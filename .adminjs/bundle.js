(function (designSystem, adminjs, React$3, styled, require$$2, require$$1) {
  'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var React__default = /*#__PURE__*/_interopDefaultLegacy(React$3);
  var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);
  var require$$2__default = /*#__PURE__*/_interopDefaultLegacy(require$$2);
  var require$$1__default = /*#__PURE__*/_interopDefaultLegacy(require$$1);

  function _iterableToArrayLimit$1(arr, i) {
    var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
    if (null != _i) {
      var _s,
        _e,
        _x,
        _r,
        _arr = [],
        _n = !0,
        _d = !1;
      try {
        if (_x = (_i = _i.call(arr)).next, 0 === i) {
          if (Object(_i) !== _i) return;
          _n = !1;
        } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);
      } catch (err) {
        _d = !0, _e = err;
      } finally {
        try {
          if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
  }
  function ownKeys$4(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$4(Object(source), !0).forEach(function (key) {
        _defineProperty$5(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _regeneratorRuntime() {
    _regeneratorRuntime = function () {
      return exports;
    };
    var exports = {},
      Op = Object.prototype,
      hasOwn = Op.hasOwnProperty,
      defineProperty = Object.defineProperty || function (obj, key, desc) {
        obj[key] = desc.value;
      },
      $Symbol = "function" == typeof Symbol ? Symbol : {},
      iteratorSymbol = $Symbol.iterator || "@@iterator",
      asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
      toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    function define(obj, key, value) {
      return Object.defineProperty(obj, key, {
        value: value,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }), obj[key];
    }
    try {
      define({}, "");
    } catch (err) {
      define = function (obj, key, value) {
        return obj[key] = value;
      };
    }
    function wrap(innerFn, outerFn, self, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
        generator = Object.create(protoGenerator.prototype),
        context = new Context(tryLocsList || []);
      return defineProperty(generator, "_invoke", {
        value: makeInvokeMethod(innerFn, self, context)
      }), generator;
    }
    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }
    exports.wrap = wrap;
    var ContinueSentinel = {};
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}
    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function () {
      return this;
    });
    var getProto = Object.getPrototypeOf,
      NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        define(prototype, method, function (arg) {
          return this._invoke(method, arg);
        });
      });
    }
    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if ("throw" !== record.type) {
          var result = record.arg,
            value = result.value;
          return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          }) : PromiseImpl.resolve(value).then(function (unwrapped) {
            result.value = unwrapped, resolve(result);
          }, function (error) {
            return invoke("throw", error, resolve, reject);
          });
        }
        reject(record.arg);
      }
      var previousPromise;
      defineProperty(this, "_invoke", {
        value: function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }
          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
      });
    }
    function makeInvokeMethod(innerFn, self, context) {
      var state = "suspendedStart";
      return function (method, arg) {
        if ("executing" === state) throw new Error("Generator is already running");
        if ("completed" === state) {
          if ("throw" === method) throw arg;
          return doneResult();
        }
        for (context.method = method, context.arg = arg;;) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }
          if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
            if ("suspendedStart" === state) throw state = "completed", context.arg;
            context.dispatchException(context.arg);
          } else "return" === context.method && context.abrupt("return", context.arg);
          state = "executing";
          var record = tryCatch(innerFn, self, context);
          if ("normal" === record.type) {
            if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
            return {
              value: record.arg,
              done: context.done
            };
          }
          "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
        }
      };
    }
    function maybeInvokeDelegate(delegate, context) {
      var methodName = context.method,
        method = delegate.iterator[methodName];
      if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
      var record = tryCatch(method, delegate.iterator, context.arg);
      if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
      var info = record.arg;
      return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
    }
    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };
      1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
    }
    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal", delete record.arg, entry.completion = record;
    }
    function Context(tryLocsList) {
      this.tryEntries = [{
        tryLoc: "root"
      }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
    }
    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) return iteratorMethod.call(iterable);
        if ("function" == typeof iterable.next) return iterable;
        if (!isNaN(iterable.length)) {
          var i = -1,
            next = function next() {
              for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              return next.value = undefined, next.done = !0, next;
            };
          return next.next = next;
        }
      }
      return {
        next: doneResult
      };
    }
    function doneResult() {
      return {
        value: undefined,
        done: !0
      };
    }
    return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
      value: GeneratorFunctionPrototype,
      configurable: !0
    }), defineProperty(GeneratorFunctionPrototype, "constructor", {
      value: GeneratorFunction,
      configurable: !0
    }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
      var ctor = "function" == typeof genFun && genFun.constructor;
      return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
    }, exports.mark = function (genFun) {
      return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
    }, exports.awrap = function (arg) {
      return {
        __await: arg
      };
    }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
      return this;
    }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      void 0 === PromiseImpl && (PromiseImpl = Promise);
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
      return this;
    }), define(Gp, "toString", function () {
      return "[object Generator]";
    }), exports.keys = function (val) {
      var object = Object(val),
        keys = [];
      for (var key in object) keys.push(key);
      return keys.reverse(), function next() {
        for (; keys.length;) {
          var key = keys.pop();
          if (key in object) return next.value = key, next.done = !1, next;
        }
        return next.done = !0, next;
      };
    }, exports.values = values, Context.prototype = {
      constructor: Context,
      reset: function (skipTempReset) {
        if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
      },
      stop: function () {
        this.done = !0;
        var rootRecord = this.tryEntries[0].completion;
        if ("throw" === rootRecord.type) throw rootRecord.arg;
        return this.rval;
      },
      dispatchException: function (exception) {
        if (this.done) throw exception;
        var context = this;
        function handle(loc, caught) {
          return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
        }
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i],
            record = entry.completion;
          if ("root" === entry.tryLoc) return handle("end");
          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc"),
              hasFinally = hasOwn.call(entry, "finallyLoc");
            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            } else {
              if (!hasFinally) throw new Error("try statement without catch or finally");
              if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
            }
          }
        }
      },
      abrupt: function (type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }
        finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
        var record = finallyEntry ? finallyEntry.completion : {};
        return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
      },
      complete: function (record, afterLoc) {
        if ("throw" === record.type) throw record.arg;
        return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
      },
      finish: function (finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
        }
      },
      catch: function (tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if ("throw" === record.type) {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }
        throw new Error("illegal catch attempt");
      },
      delegateYield: function (iterable, resultName, nextLoc) {
        return this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
      }
    }, exports;
  }
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }
    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }
  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
        args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);
        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }
        _next(undefined);
      });
    };
  }
  function _defineProperty$5(obj, key, value) {
    key = _toPropertyKey$3(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _taggedTemplateLiteral(strings, raw) {
    if (!raw) {
      raw = strings.slice(0);
    }
    return Object.freeze(Object.defineProperties(strings, {
      raw: {
        value: Object.freeze(raw)
      }
    }));
  }
  function _slicedToArray$1(arr, i) {
    return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i) || _unsupportedIterableToArray$1(arr, i) || _nonIterableRest$1();
  }
  function _arrayWithHoles$1(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function _unsupportedIterableToArray$1(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);
  }
  function _arrayLikeToArray$1(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  function _nonIterableRest$1() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _toPrimitive$3(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  function _toPropertyKey$3(arg) {
    var key = _toPrimitive$3(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }

  var PasswordEdit = function PasswordEdit(props) {
    var onChange = props.onChange,
      property = props.property,
      record = props.record,
      resource = props.resource;
    var _useTranslation = adminjs.useTranslation(),
      tb = _useTranslation.translateButton;
    var _useState = React$3.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      showPassword = _useState2[0],
      togglePassword = _useState2[1];
    React$3.useEffect(function () {
      if (!showPassword) {
        onChange(property.name, '');
      }
    }, [onChange, showPassword]);

    // For new records always show the property
    if (!record.id) {
      return /*#__PURE__*/React__default["default"].createElement(adminjs.BasePropertyComponent.Password.Edit, props);
    }
    return /*#__PURE__*/React__default["default"].createElement(designSystem.Box, null, showPassword && /*#__PURE__*/React__default["default"].createElement(adminjs.BasePropertyComponent.Password.Edit, props), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      mb: "xl"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Text, {
      textAlign: "center"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Button, {
      onClick: function onClick() {
        return togglePassword(!showPassword);
      },
      type: "button"
    }, showPassword ? tb('cancel', resource.id) : tb('changePassword', resource.id)))));
  };

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function getAugmentedNamespace(n) {
    var f = n.default;
  	if (typeof f == "function") {
  		var a = function () {
  			return f.apply(this, arguments);
  		};
  		a.prototype = f.prototype;
    } else a = {};
    Object.defineProperty(a, '__esModule', {value: true});
  	Object.keys(n).forEach(function (k) {
  		var d = Object.getOwnPropertyDescriptor(n, k);
  		Object.defineProperty(a, k, d.get ? d : {
  			enumerable: true,
  			get: function () {
  				return n[k];
  			}
  		});
  	});
  	return a;
  }

  var FileSaver_min = {exports: {}};

  (function (module, exports) {
  	(function(a,b){b();})(commonjsGlobal,function(){function b(a,b){return "undefined"==typeof b?b={autoBom:!1}:"object"!=typeof b&&(console.warn("Deprecated: Expected third argument to be a object"),b={autoBom:!b}),b.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type)?new Blob(["\uFEFF",a],{type:a.type}):a}function c(a,b,c){var d=new XMLHttpRequest;d.open("GET",a),d.responseType="blob",d.onload=function(){g(d.response,b,c);},d.onerror=function(){console.error("could not download file");},d.send();}function d(a){var b=new XMLHttpRequest;b.open("HEAD",a,!1);try{b.send();}catch(a){}return 200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent("click"));}catch(c){var b=document.createEvent("MouseEvents");b.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b);}}var f="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof commonjsGlobal&&commonjsGlobal.global===commonjsGlobal?commonjsGlobal:void 0,a=f.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),g=f.saveAs||("object"!=typeof window||window!==f?function(){}:"download"in HTMLAnchorElement.prototype&&!a?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement("a");g=g||b.name||"download",j.download=g,j.rel="noopener","string"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target="_blank")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href);},4E4),setTimeout(function(){e(j);},0));}:"msSaveOrOpenBlob"in navigator?function(f,g,h){if(g=g||f.name||"download","string"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else {var i=document.createElement("a");i.href=f,i.target="_blank",setTimeout(function(){e(i);});}}:function(b,d,e,g){if(g=g||open("","_blank"),g&&(g.document.title=g.document.body.innerText="downloading..."),"string"==typeof b)return c(b,d,e);var h="application/octet-stream"===b.type,i=/constructor/i.test(f.HTMLElement)||f.safari,j=/CriOS\/[\d]+/.test(navigator.userAgent);if((j||h&&i||a)&&"undefined"!=typeof FileReader){var k=new FileReader;k.onloadend=function(){var a=k.result;a=j?a:a.replace(/^data:[^;]*;/,"data:attachment/file;"),g?g.location.href=a:location=a,g=null;},k.readAsDataURL(b);}else {var l=f.URL||f.webkitURL,m=l.createObjectURL(b);g?g.location=m:location.href=m,g=null,setTimeout(function(){l.revokeObjectURL(m);},4E4);}});f.saveAs=g.saveAs=g,(module.exports=g);});

  	
  } (FileSaver_min));

  var Exporters = ['csv', 'json', 'xml'];

  function requiredArgs(required, args) {
    if (args.length < required) {
      throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
    }
  }

  /**
   * @name toDate
   * @category Common Helpers
   * @summary Convert the given argument to an instance of Date.
   *
   * @description
   * Convert the given argument to an instance of Date.
   *
   * If the argument is an instance of Date, the function returns its clone.
   *
   * If the argument is a number, it is treated as a timestamp.
   *
   * If the argument is none of the above, the function returns Invalid Date.
   *
   * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
   *
   * @param {Date|Number} argument - the value to convert
   * @returns {Date} the parsed date in the local time zone
   * @throws {TypeError} 1 argument required
   *
   * @example
   * // Clone the date:
   * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
   * //=> Tue Feb 11 2014 11:30:30
   *
   * @example
   * // Convert the timestamp to date:
   * const result = toDate(1392098430000)
   * //=> Tue Feb 11 2014 11:30:30
   */

  function toDate(argument) {
    requiredArgs(1, arguments);
    var argStr = Object.prototype.toString.call(argument); // Clone the date

    if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {
      // Prevent the date to lose the milliseconds when passed to new Date() in IE10
      return new Date(argument.getTime());
    } else if (typeof argument === 'number' || argStr === '[object Number]') {
      return new Date(argument);
    } else {
      if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
        // eslint-disable-next-line no-console
        console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"); // eslint-disable-next-line no-console

        console.warn(new Error().stack);
      }

      return new Date(NaN);
    }
  }

  /**
   * @name isValid
   * @category Common Helpers
   * @summary Is the given date valid?
   *
   * @description
   * Returns false if argument is Invalid Date and true otherwise.
   * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
   * Invalid Date is a Date, whose time value is NaN.
   *
   * Time value of Date: http://es5.github.io/#x15.9.1.1
   *
   * ### v2.0.0 breaking changes:
   *
   * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
   *
   * - Now `isValid` doesn't throw an exception
   *   if the first argument is not an instance of Date.
   *   Instead, argument is converted beforehand using `toDate`.
   *
   *   Examples:
   *
   *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |
   *   |---------------------------|---------------|---------------|
   *   | `new Date()`              | `true`        | `true`        |
   *   | `new Date('2016-01-01')`  | `true`        | `true`        |
   *   | `new Date('')`            | `false`       | `false`       |
   *   | `new Date(1488370835081)` | `true`        | `true`        |
   *   | `new Date(NaN)`           | `false`       | `false`       |
   *   | `'2016-01-01'`            | `TypeError`   | `false`       |
   *   | `''`                      | `TypeError`   | `false`       |
   *   | `1488370835081`           | `TypeError`   | `true`        |
   *   | `NaN`                     | `TypeError`   | `false`       |
   *
   *   We introduce this change to make *date-fns* consistent with ECMAScript behavior
   *   that try to coerce arguments to the expected type
   *   (which is also the case with other *date-fns* functions).
   *
   * @param {*} date - the date to check
   * @returns {Boolean} the date is valid
   * @throws {TypeError} 1 argument required
   *
   * @example
   * // For the valid date:
   * var result = isValid(new Date(2014, 1, 31))
   * //=> true
   *
   * @example
   * // For the value, convertable into a date:
   * var result = isValid(1393804800000)
   * //=> true
   *
   * @example
   * // For the invalid date:
   * var result = isValid(new Date(''))
   * //=> false
   */

  function isValid(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    return !isNaN(date);
  }

  var formatDistanceLocale = {
    lessThanXSeconds: {
      one: 'less than a second',
      other: 'less than {{count}} seconds'
    },
    xSeconds: {
      one: '1 second',
      other: '{{count}} seconds'
    },
    halfAMinute: 'half a minute',
    lessThanXMinutes: {
      one: 'less than a minute',
      other: 'less than {{count}} minutes'
    },
    xMinutes: {
      one: '1 minute',
      other: '{{count}} minutes'
    },
    aboutXHours: {
      one: 'about 1 hour',
      other: 'about {{count}} hours'
    },
    xHours: {
      one: '1 hour',
      other: '{{count}} hours'
    },
    xDays: {
      one: '1 day',
      other: '{{count}} days'
    },
    aboutXWeeks: {
      one: 'about 1 week',
      other: 'about {{count}} weeks'
    },
    xWeeks: {
      one: '1 week',
      other: '{{count}} weeks'
    },
    aboutXMonths: {
      one: 'about 1 month',
      other: 'about {{count}} months'
    },
    xMonths: {
      one: '1 month',
      other: '{{count}} months'
    },
    aboutXYears: {
      one: 'about 1 year',
      other: 'about {{count}} years'
    },
    xYears: {
      one: '1 year',
      other: '{{count}} years'
    },
    overXYears: {
      one: 'over 1 year',
      other: 'over {{count}} years'
    },
    almostXYears: {
      one: 'almost 1 year',
      other: 'almost {{count}} years'
    }
  };
  function formatDistance(token, count, options) {
    options = options || {};
    var result;

    if (typeof formatDistanceLocale[token] === 'string') {
      result = formatDistanceLocale[token];
    } else if (count === 1) {
      result = formatDistanceLocale[token].one;
    } else {
      result = formatDistanceLocale[token].other.replace('{{count}}', count);
    }

    if (options.addSuffix) {
      if (options.comparison > 0) {
        return 'in ' + result;
      } else {
        return result + ' ago';
      }
    }

    return result;
  }

  function buildFormatLongFn(args) {
    return function (dirtyOptions) {
      var options = dirtyOptions || {};
      var width = options.width ? String(options.width) : args.defaultWidth;
      var format = args.formats[width] || args.formats[args.defaultWidth];
      return format;
    };
  }

  var dateFormats = {
    full: 'EEEE, MMMM do, y',
    long: 'MMMM do, y',
    medium: 'MMM d, y',
    short: 'MM/dd/yyyy'
  };
  var timeFormats = {
    full: 'h:mm:ss a zzzz',
    long: 'h:mm:ss a z',
    medium: 'h:mm:ss a',
    short: 'h:mm a'
  };
  var dateTimeFormats = {
    full: "{{date}} 'at' {{time}}",
    long: "{{date}} 'at' {{time}}",
    medium: '{{date}}, {{time}}',
    short: '{{date}}, {{time}}'
  };
  var formatLong = {
    date: buildFormatLongFn({
      formats: dateFormats,
      defaultWidth: 'full'
    }),
    time: buildFormatLongFn({
      formats: timeFormats,
      defaultWidth: 'full'
    }),
    dateTime: buildFormatLongFn({
      formats: dateTimeFormats,
      defaultWidth: 'full'
    })
  };

  var formatRelativeLocale = {
    lastWeek: "'last' eeee 'at' p",
    yesterday: "'yesterday at' p",
    today: "'today at' p",
    tomorrow: "'tomorrow at' p",
    nextWeek: "eeee 'at' p",
    other: 'P'
  };
  function formatRelative(token, _date, _baseDate, _options) {
    return formatRelativeLocale[token];
  }

  function buildLocalizeFn(args) {
    return function (dirtyIndex, dirtyOptions) {
      var options = dirtyOptions || {};
      var context = options.context ? String(options.context) : 'standalone';
      var valuesArray;

      if (context === 'formatting' && args.formattingValues) {
        var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
        var width = options.width ? String(options.width) : defaultWidth;
        valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
      } else {
        var _defaultWidth = args.defaultWidth;

        var _width = options.width ? String(options.width) : args.defaultWidth;

        valuesArray = args.values[_width] || args.values[_defaultWidth];
      }

      var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
      return valuesArray[index];
    };
  }

  var eraValues = {
    narrow: ['B', 'A'],
    abbreviated: ['BC', 'AD'],
    wide: ['Before Christ', 'Anno Domini']
  };
  var quarterValues = {
    narrow: ['1', '2', '3', '4'],
    abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
    wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter'] // Note: in English, the names of days of the week and months are capitalized.
    // If you are making a new locale based on this one, check if the same is true for the language you're working on.
    // Generally, formatted dates should look like they are in the middle of a sentence,
    // e.g. in Spanish language the weekdays and months should be in the lowercase.

  };
  var monthValues = {
    narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
    abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
    wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
  };
  var dayValues = {
    narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
    short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
    abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
    wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
  };
  var dayPeriodValues = {
    narrow: {
      am: 'a',
      pm: 'p',
      midnight: 'mi',
      noon: 'n',
      morning: 'morning',
      afternoon: 'afternoon',
      evening: 'evening',
      night: 'night'
    },
    abbreviated: {
      am: 'AM',
      pm: 'PM',
      midnight: 'midnight',
      noon: 'noon',
      morning: 'morning',
      afternoon: 'afternoon',
      evening: 'evening',
      night: 'night'
    },
    wide: {
      am: 'a.m.',
      pm: 'p.m.',
      midnight: 'midnight',
      noon: 'noon',
      morning: 'morning',
      afternoon: 'afternoon',
      evening: 'evening',
      night: 'night'
    }
  };
  var formattingDayPeriodValues = {
    narrow: {
      am: 'a',
      pm: 'p',
      midnight: 'mi',
      noon: 'n',
      morning: 'in the morning',
      afternoon: 'in the afternoon',
      evening: 'in the evening',
      night: 'at night'
    },
    abbreviated: {
      am: 'AM',
      pm: 'PM',
      midnight: 'midnight',
      noon: 'noon',
      morning: 'in the morning',
      afternoon: 'in the afternoon',
      evening: 'in the evening',
      night: 'at night'
    },
    wide: {
      am: 'a.m.',
      pm: 'p.m.',
      midnight: 'midnight',
      noon: 'noon',
      morning: 'in the morning',
      afternoon: 'in the afternoon',
      evening: 'in the evening',
      night: 'at night'
    }
  };

  function ordinalNumber(dirtyNumber, _dirtyOptions) {
    var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
    // if they are different for different grammatical genders,
    // use `options.unit`:
    //
    //   var options = dirtyOptions || {}
    //   var unit = String(options.unit)
    //
    // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
    // 'day', 'hour', 'minute', 'second'

    var rem100 = number % 100;

    if (rem100 > 20 || rem100 < 10) {
      switch (rem100 % 10) {
        case 1:
          return number + 'st';

        case 2:
          return number + 'nd';

        case 3:
          return number + 'rd';
      }
    }

    return number + 'th';
  }

  var localize = {
    ordinalNumber: ordinalNumber,
    era: buildLocalizeFn({
      values: eraValues,
      defaultWidth: 'wide'
    }),
    quarter: buildLocalizeFn({
      values: quarterValues,
      defaultWidth: 'wide',
      argumentCallback: function (quarter) {
        return Number(quarter) - 1;
      }
    }),
    month: buildLocalizeFn({
      values: monthValues,
      defaultWidth: 'wide'
    }),
    day: buildLocalizeFn({
      values: dayValues,
      defaultWidth: 'wide'
    }),
    dayPeriod: buildLocalizeFn({
      values: dayPeriodValues,
      defaultWidth: 'wide',
      formattingValues: formattingDayPeriodValues,
      defaultFormattingWidth: 'wide'
    })
  };

  function buildMatchPatternFn(args) {
    return function (dirtyString, dirtyOptions) {
      var string = String(dirtyString);
      var options = dirtyOptions || {};
      var matchResult = string.match(args.matchPattern);

      if (!matchResult) {
        return null;
      }

      var matchedString = matchResult[0];
      var parseResult = string.match(args.parsePattern);

      if (!parseResult) {
        return null;
      }

      var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
      value = options.valueCallback ? options.valueCallback(value) : value;
      return {
        value: value,
        rest: string.slice(matchedString.length)
      };
    };
  }

  function buildMatchFn(args) {
    return function (dirtyString, dirtyOptions) {
      var string = String(dirtyString);
      var options = dirtyOptions || {};
      var width = options.width;
      var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
      var matchResult = string.match(matchPattern);

      if (!matchResult) {
        return null;
      }

      var matchedString = matchResult[0];
      var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
      var value;

      if (Object.prototype.toString.call(parsePatterns) === '[object Array]') {
        value = findIndex(parsePatterns, function (pattern) {
          return pattern.test(matchedString);
        });
      } else {
        value = findKey(parsePatterns, function (pattern) {
          return pattern.test(matchedString);
        });
      }

      value = args.valueCallback ? args.valueCallback(value) : value;
      value = options.valueCallback ? options.valueCallback(value) : value;
      return {
        value: value,
        rest: string.slice(matchedString.length)
      };
    };
  }

  function findKey(object, predicate) {
    for (var key in object) {
      if (object.hasOwnProperty(key) && predicate(object[key])) {
        return key;
      }
    }
  }

  function findIndex(array, predicate) {
    for (var key = 0; key < array.length; key++) {
      if (predicate(array[key])) {
        return key;
      }
    }
  }

  var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
  var parseOrdinalNumberPattern = /\d+/i;
  var matchEraPatterns = {
    narrow: /^(b|a)/i,
    abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
    wide: /^(before christ|before common era|anno domini|common era)/i
  };
  var parseEraPatterns = {
    any: [/^b/i, /^(a|c)/i]
  };
  var matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^q[1234]/i,
    wide: /^[1234](th|st|nd|rd)? quarter/i
  };
  var parseQuarterPatterns = {
    any: [/1/i, /2/i, /3/i, /4/i]
  };
  var matchMonthPatterns = {
    narrow: /^[jfmasond]/i,
    abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
    wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
  };
  var parseMonthPatterns = {
    narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
    any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
  };
  var matchDayPatterns = {
    narrow: /^[smtwf]/i,
    short: /^(su|mo|tu|we|th|fr|sa)/i,
    abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
    wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
  };
  var parseDayPatterns = {
    narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
    any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
  };
  var matchDayPeriodPatterns = {
    narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
    any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
  };
  var parseDayPeriodPatterns = {
    any: {
      am: /^a/i,
      pm: /^p/i,
      midnight: /^mi/i,
      noon: /^no/i,
      morning: /morning/i,
      afternoon: /afternoon/i,
      evening: /evening/i,
      night: /night/i
    }
  };
  var match = {
    ordinalNumber: buildMatchPatternFn({
      matchPattern: matchOrdinalNumberPattern,
      parsePattern: parseOrdinalNumberPattern,
      valueCallback: function (value) {
        return parseInt(value, 10);
      }
    }),
    era: buildMatchFn({
      matchPatterns: matchEraPatterns,
      defaultMatchWidth: 'wide',
      parsePatterns: parseEraPatterns,
      defaultParseWidth: 'any'
    }),
    quarter: buildMatchFn({
      matchPatterns: matchQuarterPatterns,
      defaultMatchWidth: 'wide',
      parsePatterns: parseQuarterPatterns,
      defaultParseWidth: 'any',
      valueCallback: function (index) {
        return index + 1;
      }
    }),
    month: buildMatchFn({
      matchPatterns: matchMonthPatterns,
      defaultMatchWidth: 'wide',
      parsePatterns: parseMonthPatterns,
      defaultParseWidth: 'any'
    }),
    day: buildMatchFn({
      matchPatterns: matchDayPatterns,
      defaultMatchWidth: 'wide',
      parsePatterns: parseDayPatterns,
      defaultParseWidth: 'any'
    }),
    dayPeriod: buildMatchFn({
      matchPatterns: matchDayPeriodPatterns,
      defaultMatchWidth: 'any',
      parsePatterns: parseDayPeriodPatterns,
      defaultParseWidth: 'any'
    })
  };

  /**
   * @type {Locale}
   * @category Locales
   * @summary English locale (United States).
   * @language English
   * @iso-639-2 eng
   * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
   * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
   */

  var locale$1 = {
    code: 'en-US',
    formatDistance: formatDistance,
    formatLong: formatLong,
    formatRelative: formatRelative,
    localize: localize,
    match: match,
    options: {
      weekStartsOn: 0
      /* Sunday */
      ,
      firstWeekContainsDate: 1
    }
  };

  function toInteger(dirtyNumber) {
    if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
      return NaN;
    }

    var number = Number(dirtyNumber);

    if (isNaN(number)) {
      return number;
    }

    return number < 0 ? Math.ceil(number) : Math.floor(number);
  }

  /**
   * @name addMilliseconds
   * @category Millisecond Helpers
   * @summary Add the specified number of milliseconds to the given date.
   *
   * @description
   * Add the specified number of milliseconds to the given date.
   *
   * ### v2.0.0 breaking changes:
   *
   * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
   *
   * @param {Date|Number} date - the date to be changed
   * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
   * @returns {Date} the new date with the milliseconds added
   * @throws {TypeError} 2 arguments required
   *
   * @example
   * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
   * var result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
   * //=> Thu Jul 10 2014 12:45:30.750
   */

  function addMilliseconds(dirtyDate, dirtyAmount) {
    requiredArgs(2, arguments);
    var timestamp = toDate(dirtyDate).getTime();
    var amount = toInteger(dirtyAmount);
    return new Date(timestamp + amount);
  }

  /**
   * @name subMilliseconds
   * @category Millisecond Helpers
   * @summary Subtract the specified number of milliseconds from the given date.
   *
   * @description
   * Subtract the specified number of milliseconds from the given date.
   *
   * ### v2.0.0 breaking changes:
   *
   * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
   *
   * @param {Date|Number} date - the date to be changed
   * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
   * @returns {Date} the new date with the milliseconds subtracted
   * @throws {TypeError} 2 arguments required
   *
   * @example
   * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
   * var result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
   * //=> Thu Jul 10 2014 12:45:29.250
   */

  function subMilliseconds(dirtyDate, dirtyAmount) {
    requiredArgs(2, arguments);
    var amount = toInteger(dirtyAmount);
    return addMilliseconds(dirtyDate, -amount);
  }

  function addLeadingZeros(number, targetLength) {
    var sign = number < 0 ? '-' : '';
    var output = Math.abs(number).toString();

    while (output.length < targetLength) {
      output = '0' + output;
    }

    return sign + output;
  }

  /*
   * |     | Unit                           |     | Unit                           |
   * |-----|--------------------------------|-----|--------------------------------|
   * |  a  | AM, PM                         |  A* |                                |
   * |  d  | Day of month                   |  D  |                                |
   * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
   * |  m  | Minute                         |  M  | Month                          |
   * |  s  | Second                         |  S  | Fraction of second             |
   * |  y  | Year (abs)                     |  Y  |                                |
   *
   * Letters marked by * are not implemented but reserved by Unicode standard.
   */

  var formatters$1 = {
    // Year
    y: function (date, token) {
      // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
      // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
      // |----------|-------|----|-------|-------|-------|
      // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
      // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
      // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
      // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
      // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)

      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);
    },
    // Month
    M: function (date, token) {
      var month = date.getUTCMonth();
      return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);
    },
    // Day of the month
    d: function (date, token) {
      return addLeadingZeros(date.getUTCDate(), token.length);
    },
    // AM or PM
    a: function (date, token) {
      var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';

      switch (token) {
        case 'a':
        case 'aa':
        case 'aaa':
          return dayPeriodEnumValue.toUpperCase();

        case 'aaaaa':
          return dayPeriodEnumValue[0];

        case 'aaaa':
        default:
          return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';
      }
    },
    // Hour [1-12]
    h: function (date, token) {
      return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
    },
    // Hour [0-23]
    H: function (date, token) {
      return addLeadingZeros(date.getUTCHours(), token.length);
    },
    // Minute
    m: function (date, token) {
      return addLeadingZeros(date.getUTCMinutes(), token.length);
    },
    // Second
    s: function (date, token) {
      return addLeadingZeros(date.getUTCSeconds(), token.length);
    },
    // Fraction of second
    S: function (date, token) {
      var numberOfDigits = token.length;
      var milliseconds = date.getUTCMilliseconds();
      var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
      return addLeadingZeros(fractionalSeconds, token.length);
    }
  };

  var MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.
  // See issue: https://github.com/date-fns/date-fns/issues/376

  function getUTCDayOfYear(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var timestamp = date.getTime();
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
    var startOfYearTimestamp = date.getTime();
    var difference = timestamp - startOfYearTimestamp;
    return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
  }

  // See issue: https://github.com/date-fns/date-fns/issues/376

  function startOfUTCISOWeek(dirtyDate) {
    requiredArgs(1, arguments);
    var weekStartsOn = 1;
    var date = toDate(dirtyDate);
    var day = date.getUTCDay();
    var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
    date.setUTCDate(date.getUTCDate() - diff);
    date.setUTCHours(0, 0, 0, 0);
    return date;
  }

  // See issue: https://github.com/date-fns/date-fns/issues/376

  function getUTCISOWeekYear(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var year = date.getUTCFullYear();
    var fourthOfJanuaryOfNextYear = new Date(0);
    fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
    fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
    var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
    var fourthOfJanuaryOfThisYear = new Date(0);
    fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
    fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
    var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);

    if (date.getTime() >= startOfNextYear.getTime()) {
      return year + 1;
    } else if (date.getTime() >= startOfThisYear.getTime()) {
      return year;
    } else {
      return year - 1;
    }
  }

  // See issue: https://github.com/date-fns/date-fns/issues/376

  function startOfUTCISOWeekYear(dirtyDate) {
    requiredArgs(1, arguments);
    var year = getUTCISOWeekYear(dirtyDate);
    var fourthOfJanuary = new Date(0);
    fourthOfJanuary.setUTCFullYear(year, 0, 4);
    fourthOfJanuary.setUTCHours(0, 0, 0, 0);
    var date = startOfUTCISOWeek(fourthOfJanuary);
    return date;
  }

  var MILLISECONDS_IN_WEEK$1 = 604800000; // This function will be a part of public API when UTC function will be implemented.
  // See issue: https://github.com/date-fns/date-fns/issues/376

  function getUTCISOWeek(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer
    // because the number of milliseconds in a week is not constant
    // (e.g. it's different in the week of the daylight saving time clock shift)

    return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
  }

  // See issue: https://github.com/date-fns/date-fns/issues/376

  function startOfUTCWeek(dirtyDate, dirtyOptions) {
    requiredArgs(1, arguments);
    var options = dirtyOptions || {};
    var locale = options.locale;
    var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
    var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
    var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

    if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
      throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
    }

    var date = toDate(dirtyDate);
    var day = date.getUTCDay();
    var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
    date.setUTCDate(date.getUTCDate() - diff);
    date.setUTCHours(0, 0, 0, 0);
    return date;
  }

  // See issue: https://github.com/date-fns/date-fns/issues/376

  function getUTCWeekYear(dirtyDate, dirtyOptions) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate, dirtyOptions);
    var year = date.getUTCFullYear();
    var options = dirtyOptions || {};
    var locale = options.locale;
    var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
    var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
    var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

    if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
      throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
    }

    var firstWeekOfNextYear = new Date(0);
    firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
    firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
    var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);
    var firstWeekOfThisYear = new Date(0);
    firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
    firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
    var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);

    if (date.getTime() >= startOfNextYear.getTime()) {
      return year + 1;
    } else if (date.getTime() >= startOfThisYear.getTime()) {
      return year;
    } else {
      return year - 1;
    }
  }

  // See issue: https://github.com/date-fns/date-fns/issues/376

  function startOfUTCWeekYear(dirtyDate, dirtyOptions) {
    requiredArgs(1, arguments);
    var options = dirtyOptions || {};
    var locale = options.locale;
    var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
    var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
    var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);
    var year = getUTCWeekYear(dirtyDate, dirtyOptions);
    var firstWeek = new Date(0);
    firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
    firstWeek.setUTCHours(0, 0, 0, 0);
    var date = startOfUTCWeek(firstWeek, dirtyOptions);
    return date;
  }

  var MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.
  // See issue: https://github.com/date-fns/date-fns/issues/376

  function getUTCWeek(dirtyDate, options) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer
    // because the number of milliseconds in a week is not constant
    // (e.g. it's different in the week of the daylight saving time clock shift)

    return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
  }

  var dayPeriodEnum = {
    am: 'am',
    pm: 'pm',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
    /*
     * |     | Unit                           |     | Unit                           |
     * |-----|--------------------------------|-----|--------------------------------|
     * |  a  | AM, PM                         |  A* | Milliseconds in day            |
     * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
     * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
     * |  d  | Day of month                   |  D  | Day of year                    |
     * |  e  | Local day of week              |  E  | Day of week                    |
     * |  f  |                                |  F* | Day of week in month           |
     * |  g* | Modified Julian day            |  G  | Era                            |
     * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
     * |  i! | ISO day of week                |  I! | ISO week of year               |
     * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
     * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
     * |  l* | (deprecated)                   |  L  | Stand-alone month              |
     * |  m  | Minute                         |  M  | Month                          |
     * |  n  |                                |  N  |                                |
     * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
     * |  p! | Long localized time            |  P! | Long localized date            |
     * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
     * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
     * |  s  | Second                         |  S  | Fraction of second             |
     * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
     * |  u  | Extended year                  |  U* | Cyclic year                    |
     * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
     * |  w  | Local week of year             |  W* | Week of month                  |
     * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
     * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
     * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
     *
     * Letters marked by * are not implemented but reserved by Unicode standard.
     *
     * Letters marked by ! are non-standard, but implemented by date-fns:
     * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
     * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
     *   i.e. 7 for Sunday, 1 for Monday, etc.
     * - `I` is ISO week of year, as opposed to `w` which is local week of year.
     * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
     *   `R` is supposed to be used in conjunction with `I` and `i`
     *   for universal ISO week-numbering date, whereas
     *   `Y` is supposed to be used in conjunction with `w` and `e`
     *   for week-numbering date specific to the locale.
     * - `P` is long localized date format
     * - `p` is long localized time format
     */

  };
  var formatters = {
    // Era
    G: function (date, token, localize) {
      var era = date.getUTCFullYear() > 0 ? 1 : 0;

      switch (token) {
        // AD, BC
        case 'G':
        case 'GG':
        case 'GGG':
          return localize.era(era, {
            width: 'abbreviated'
          });
        // A, B

        case 'GGGGG':
          return localize.era(era, {
            width: 'narrow'
          });
        // Anno Domini, Before Christ

        case 'GGGG':
        default:
          return localize.era(era, {
            width: 'wide'
          });
      }
    },
    // Year
    y: function (date, token, localize) {
      // Ordinal number
      if (token === 'yo') {
        var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)

        var year = signedYear > 0 ? signedYear : 1 - signedYear;
        return localize.ordinalNumber(year, {
          unit: 'year'
        });
      }

      return formatters$1.y(date, token);
    },
    // Local week-numbering year
    Y: function (date, token, localize, options) {
      var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)

      var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year

      if (token === 'YY') {
        var twoDigitYear = weekYear % 100;
        return addLeadingZeros(twoDigitYear, 2);
      } // Ordinal number


      if (token === 'Yo') {
        return localize.ordinalNumber(weekYear, {
          unit: 'year'
        });
      } // Padding


      return addLeadingZeros(weekYear, token.length);
    },
    // ISO week-numbering year
    R: function (date, token) {
      var isoWeekYear = getUTCISOWeekYear(date); // Padding

      return addLeadingZeros(isoWeekYear, token.length);
    },
    // Extended year. This is a single number designating the year of this calendar system.
    // The main difference between `y` and `u` localizers are B.C. years:
    // | Year | `y` | `u` |
    // |------|-----|-----|
    // | AC 1 |   1 |   1 |
    // | BC 1 |   1 |   0 |
    // | BC 2 |   2 |  -1 |
    // Also `yy` always returns the last two digits of a year,
    // while `uu` pads single digit years to 2 characters and returns other years unchanged.
    u: function (date, token) {
      var year = date.getUTCFullYear();
      return addLeadingZeros(year, token.length);
    },
    // Quarter
    Q: function (date, token, localize) {
      var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);

      switch (token) {
        // 1, 2, 3, 4
        case 'Q':
          return String(quarter);
        // 01, 02, 03, 04

        case 'QQ':
          return addLeadingZeros(quarter, 2);
        // 1st, 2nd, 3rd, 4th

        case 'Qo':
          return localize.ordinalNumber(quarter, {
            unit: 'quarter'
          });
        // Q1, Q2, Q3, Q4

        case 'QQQ':
          return localize.quarter(quarter, {
            width: 'abbreviated',
            context: 'formatting'
          });
        // 1, 2, 3, 4 (narrow quarter; could be not numerical)

        case 'QQQQQ':
          return localize.quarter(quarter, {
            width: 'narrow',
            context: 'formatting'
          });
        // 1st quarter, 2nd quarter, ...

        case 'QQQQ':
        default:
          return localize.quarter(quarter, {
            width: 'wide',
            context: 'formatting'
          });
      }
    },
    // Stand-alone quarter
    q: function (date, token, localize) {
      var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);

      switch (token) {
        // 1, 2, 3, 4
        case 'q':
          return String(quarter);
        // 01, 02, 03, 04

        case 'qq':
          return addLeadingZeros(quarter, 2);
        // 1st, 2nd, 3rd, 4th

        case 'qo':
          return localize.ordinalNumber(quarter, {
            unit: 'quarter'
          });
        // Q1, Q2, Q3, Q4

        case 'qqq':
          return localize.quarter(quarter, {
            width: 'abbreviated',
            context: 'standalone'
          });
        // 1, 2, 3, 4 (narrow quarter; could be not numerical)

        case 'qqqqq':
          return localize.quarter(quarter, {
            width: 'narrow',
            context: 'standalone'
          });
        // 1st quarter, 2nd quarter, ...

        case 'qqqq':
        default:
          return localize.quarter(quarter, {
            width: 'wide',
            context: 'standalone'
          });
      }
    },
    // Month
    M: function (date, token, localize) {
      var month = date.getUTCMonth();

      switch (token) {
        case 'M':
        case 'MM':
          return formatters$1.M(date, token);
        // 1st, 2nd, ..., 12th

        case 'Mo':
          return localize.ordinalNumber(month + 1, {
            unit: 'month'
          });
        // Jan, Feb, ..., Dec

        case 'MMM':
          return localize.month(month, {
            width: 'abbreviated',
            context: 'formatting'
          });
        // J, F, ..., D

        case 'MMMMM':
          return localize.month(month, {
            width: 'narrow',
            context: 'formatting'
          });
        // January, February, ..., December

        case 'MMMM':
        default:
          return localize.month(month, {
            width: 'wide',
            context: 'formatting'
          });
      }
    },
    // Stand-alone month
    L: function (date, token, localize) {
      var month = date.getUTCMonth();

      switch (token) {
        // 1, 2, ..., 12
        case 'L':
          return String(month + 1);
        // 01, 02, ..., 12

        case 'LL':
          return addLeadingZeros(month + 1, 2);
        // 1st, 2nd, ..., 12th

        case 'Lo':
          return localize.ordinalNumber(month + 1, {
            unit: 'month'
          });
        // Jan, Feb, ..., Dec

        case 'LLL':
          return localize.month(month, {
            width: 'abbreviated',
            context: 'standalone'
          });
        // J, F, ..., D

        case 'LLLLL':
          return localize.month(month, {
            width: 'narrow',
            context: 'standalone'
          });
        // January, February, ..., December

        case 'LLLL':
        default:
          return localize.month(month, {
            width: 'wide',
            context: 'standalone'
          });
      }
    },
    // Local week of year
    w: function (date, token, localize, options) {
      var week = getUTCWeek(date, options);

      if (token === 'wo') {
        return localize.ordinalNumber(week, {
          unit: 'week'
        });
      }

      return addLeadingZeros(week, token.length);
    },
    // ISO week of year
    I: function (date, token, localize) {
      var isoWeek = getUTCISOWeek(date);

      if (token === 'Io') {
        return localize.ordinalNumber(isoWeek, {
          unit: 'week'
        });
      }

      return addLeadingZeros(isoWeek, token.length);
    },
    // Day of the month
    d: function (date, token, localize) {
      if (token === 'do') {
        return localize.ordinalNumber(date.getUTCDate(), {
          unit: 'date'
        });
      }

      return formatters$1.d(date, token);
    },
    // Day of year
    D: function (date, token, localize) {
      var dayOfYear = getUTCDayOfYear(date);

      if (token === 'Do') {
        return localize.ordinalNumber(dayOfYear, {
          unit: 'dayOfYear'
        });
      }

      return addLeadingZeros(dayOfYear, token.length);
    },
    // Day of week
    E: function (date, token, localize) {
      var dayOfWeek = date.getUTCDay();

      switch (token) {
        // Tue
        case 'E':
        case 'EE':
        case 'EEE':
          return localize.day(dayOfWeek, {
            width: 'abbreviated',
            context: 'formatting'
          });
        // T

        case 'EEEEE':
          return localize.day(dayOfWeek, {
            width: 'narrow',
            context: 'formatting'
          });
        // Tu

        case 'EEEEEE':
          return localize.day(dayOfWeek, {
            width: 'short',
            context: 'formatting'
          });
        // Tuesday

        case 'EEEE':
        default:
          return localize.day(dayOfWeek, {
            width: 'wide',
            context: 'formatting'
          });
      }
    },
    // Local day of week
    e: function (date, token, localize, options) {
      var dayOfWeek = date.getUTCDay();
      var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;

      switch (token) {
        // Numerical value (Nth day of week with current locale or weekStartsOn)
        case 'e':
          return String(localDayOfWeek);
        // Padded numerical value

        case 'ee':
          return addLeadingZeros(localDayOfWeek, 2);
        // 1st, 2nd, ..., 7th

        case 'eo':
          return localize.ordinalNumber(localDayOfWeek, {
            unit: 'day'
          });

        case 'eee':
          return localize.day(dayOfWeek, {
            width: 'abbreviated',
            context: 'formatting'
          });
        // T

        case 'eeeee':
          return localize.day(dayOfWeek, {
            width: 'narrow',
            context: 'formatting'
          });
        // Tu

        case 'eeeeee':
          return localize.day(dayOfWeek, {
            width: 'short',
            context: 'formatting'
          });
        // Tuesday

        case 'eeee':
        default:
          return localize.day(dayOfWeek, {
            width: 'wide',
            context: 'formatting'
          });
      }
    },
    // Stand-alone local day of week
    c: function (date, token, localize, options) {
      var dayOfWeek = date.getUTCDay();
      var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;

      switch (token) {
        // Numerical value (same as in `e`)
        case 'c':
          return String(localDayOfWeek);
        // Padded numerical value

        case 'cc':
          return addLeadingZeros(localDayOfWeek, token.length);
        // 1st, 2nd, ..., 7th

        case 'co':
          return localize.ordinalNumber(localDayOfWeek, {
            unit: 'day'
          });

        case 'ccc':
          return localize.day(dayOfWeek, {
            width: 'abbreviated',
            context: 'standalone'
          });
        // T

        case 'ccccc':
          return localize.day(dayOfWeek, {
            width: 'narrow',
            context: 'standalone'
          });
        // Tu

        case 'cccccc':
          return localize.day(dayOfWeek, {
            width: 'short',
            context: 'standalone'
          });
        // Tuesday

        case 'cccc':
        default:
          return localize.day(dayOfWeek, {
            width: 'wide',
            context: 'standalone'
          });
      }
    },
    // ISO day of week
    i: function (date, token, localize) {
      var dayOfWeek = date.getUTCDay();
      var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;

      switch (token) {
        // 2
        case 'i':
          return String(isoDayOfWeek);
        // 02

        case 'ii':
          return addLeadingZeros(isoDayOfWeek, token.length);
        // 2nd

        case 'io':
          return localize.ordinalNumber(isoDayOfWeek, {
            unit: 'day'
          });
        // Tue

        case 'iii':
          return localize.day(dayOfWeek, {
            width: 'abbreviated',
            context: 'formatting'
          });
        // T

        case 'iiiii':
          return localize.day(dayOfWeek, {
            width: 'narrow',
            context: 'formatting'
          });
        // Tu

        case 'iiiiii':
          return localize.day(dayOfWeek, {
            width: 'short',
            context: 'formatting'
          });
        // Tuesday

        case 'iiii':
        default:
          return localize.day(dayOfWeek, {
            width: 'wide',
            context: 'formatting'
          });
      }
    },
    // AM or PM
    a: function (date, token, localize) {
      var hours = date.getUTCHours();
      var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';

      switch (token) {
        case 'a':
        case 'aa':
        case 'aaa':
          return localize.dayPeriod(dayPeriodEnumValue, {
            width: 'abbreviated',
            context: 'formatting'
          });

        case 'aaaaa':
          return localize.dayPeriod(dayPeriodEnumValue, {
            width: 'narrow',
            context: 'formatting'
          });

        case 'aaaa':
        default:
          return localize.dayPeriod(dayPeriodEnumValue, {
            width: 'wide',
            context: 'formatting'
          });
      }
    },
    // AM, PM, midnight, noon
    b: function (date, token, localize) {
      var hours = date.getUTCHours();
      var dayPeriodEnumValue;

      if (hours === 12) {
        dayPeriodEnumValue = dayPeriodEnum.noon;
      } else if (hours === 0) {
        dayPeriodEnumValue = dayPeriodEnum.midnight;
      } else {
        dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
      }

      switch (token) {
        case 'b':
        case 'bb':
        case 'bbb':
          return localize.dayPeriod(dayPeriodEnumValue, {
            width: 'abbreviated',
            context: 'formatting'
          });

        case 'bbbbb':
          return localize.dayPeriod(dayPeriodEnumValue, {
            width: 'narrow',
            context: 'formatting'
          });

        case 'bbbb':
        default:
          return localize.dayPeriod(dayPeriodEnumValue, {
            width: 'wide',
            context: 'formatting'
          });
      }
    },
    // in the morning, in the afternoon, in the evening, at night
    B: function (date, token, localize) {
      var hours = date.getUTCHours();
      var dayPeriodEnumValue;

      if (hours >= 17) {
        dayPeriodEnumValue = dayPeriodEnum.evening;
      } else if (hours >= 12) {
        dayPeriodEnumValue = dayPeriodEnum.afternoon;
      } else if (hours >= 4) {
        dayPeriodEnumValue = dayPeriodEnum.morning;
      } else {
        dayPeriodEnumValue = dayPeriodEnum.night;
      }

      switch (token) {
        case 'B':
        case 'BB':
        case 'BBB':
          return localize.dayPeriod(dayPeriodEnumValue, {
            width: 'abbreviated',
            context: 'formatting'
          });

        case 'BBBBB':
          return localize.dayPeriod(dayPeriodEnumValue, {
            width: 'narrow',
            context: 'formatting'
          });

        case 'BBBB':
        default:
          return localize.dayPeriod(dayPeriodEnumValue, {
            width: 'wide',
            context: 'formatting'
          });
      }
    },
    // Hour [1-12]
    h: function (date, token, localize) {
      if (token === 'ho') {
        var hours = date.getUTCHours() % 12;
        if (hours === 0) hours = 12;
        return localize.ordinalNumber(hours, {
          unit: 'hour'
        });
      }

      return formatters$1.h(date, token);
    },
    // Hour [0-23]
    H: function (date, token, localize) {
      if (token === 'Ho') {
        return localize.ordinalNumber(date.getUTCHours(), {
          unit: 'hour'
        });
      }

      return formatters$1.H(date, token);
    },
    // Hour [0-11]
    K: function (date, token, localize) {
      var hours = date.getUTCHours() % 12;

      if (token === 'Ko') {
        return localize.ordinalNumber(hours, {
          unit: 'hour'
        });
      }

      return addLeadingZeros(hours, token.length);
    },
    // Hour [1-24]
    k: function (date, token, localize) {
      var hours = date.getUTCHours();
      if (hours === 0) hours = 24;

      if (token === 'ko') {
        return localize.ordinalNumber(hours, {
          unit: 'hour'
        });
      }

      return addLeadingZeros(hours, token.length);
    },
    // Minute
    m: function (date, token, localize) {
      if (token === 'mo') {
        return localize.ordinalNumber(date.getUTCMinutes(), {
          unit: 'minute'
        });
      }

      return formatters$1.m(date, token);
    },
    // Second
    s: function (date, token, localize) {
      if (token === 'so') {
        return localize.ordinalNumber(date.getUTCSeconds(), {
          unit: 'second'
        });
      }

      return formatters$1.s(date, token);
    },
    // Fraction of second
    S: function (date, token) {
      return formatters$1.S(date, token);
    },
    // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
    X: function (date, token, _localize, options) {
      var originalDate = options._originalDate || date;
      var timezoneOffset = originalDate.getTimezoneOffset();

      if (timezoneOffset === 0) {
        return 'Z';
      }

      switch (token) {
        // Hours and optional minutes
        case 'X':
          return formatTimezoneWithOptionalMinutes(timezoneOffset);
        // Hours, minutes and optional seconds without `:` delimiter
        // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
        // so this token always has the same output as `XX`

        case 'XXXX':
        case 'XX':
          // Hours and minutes without `:` delimiter
          return formatTimezone(timezoneOffset);
        // Hours, minutes and optional seconds with `:` delimiter
        // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
        // so this token always has the same output as `XXX`

        case 'XXXXX':
        case 'XXX': // Hours and minutes with `:` delimiter

        default:
          return formatTimezone(timezoneOffset, ':');
      }
    },
    // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
    x: function (date, token, _localize, options) {
      var originalDate = options._originalDate || date;
      var timezoneOffset = originalDate.getTimezoneOffset();

      switch (token) {
        // Hours and optional minutes
        case 'x':
          return formatTimezoneWithOptionalMinutes(timezoneOffset);
        // Hours, minutes and optional seconds without `:` delimiter
        // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
        // so this token always has the same output as `xx`

        case 'xxxx':
        case 'xx':
          // Hours and minutes without `:` delimiter
          return formatTimezone(timezoneOffset);
        // Hours, minutes and optional seconds with `:` delimiter
        // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
        // so this token always has the same output as `xxx`

        case 'xxxxx':
        case 'xxx': // Hours and minutes with `:` delimiter

        default:
          return formatTimezone(timezoneOffset, ':');
      }
    },
    // Timezone (GMT)
    O: function (date, token, _localize, options) {
      var originalDate = options._originalDate || date;
      var timezoneOffset = originalDate.getTimezoneOffset();

      switch (token) {
        // Short
        case 'O':
        case 'OO':
        case 'OOO':
          return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
        // Long

        case 'OOOO':
        default:
          return 'GMT' + formatTimezone(timezoneOffset, ':');
      }
    },
    // Timezone (specific non-location)
    z: function (date, token, _localize, options) {
      var originalDate = options._originalDate || date;
      var timezoneOffset = originalDate.getTimezoneOffset();

      switch (token) {
        // Short
        case 'z':
        case 'zz':
        case 'zzz':
          return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
        // Long

        case 'zzzz':
        default:
          return 'GMT' + formatTimezone(timezoneOffset, ':');
      }
    },
    // Seconds timestamp
    t: function (date, token, _localize, options) {
      var originalDate = options._originalDate || date;
      var timestamp = Math.floor(originalDate.getTime() / 1000);
      return addLeadingZeros(timestamp, token.length);
    },
    // Milliseconds timestamp
    T: function (date, token, _localize, options) {
      var originalDate = options._originalDate || date;
      var timestamp = originalDate.getTime();
      return addLeadingZeros(timestamp, token.length);
    }
  };

  function formatTimezoneShort(offset, dirtyDelimiter) {
    var sign = offset > 0 ? '-' : '+';
    var absOffset = Math.abs(offset);
    var hours = Math.floor(absOffset / 60);
    var minutes = absOffset % 60;

    if (minutes === 0) {
      return sign + String(hours);
    }

    var delimiter = dirtyDelimiter || '';
    return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
  }

  function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
    if (offset % 60 === 0) {
      var sign = offset > 0 ? '-' : '+';
      return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
    }

    return formatTimezone(offset, dirtyDelimiter);
  }

  function formatTimezone(offset, dirtyDelimiter) {
    var delimiter = dirtyDelimiter || '';
    var sign = offset > 0 ? '-' : '+';
    var absOffset = Math.abs(offset);
    var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
    var minutes = addLeadingZeros(absOffset % 60, 2);
    return sign + hours + delimiter + minutes;
  }

  function dateLongFormatter(pattern, formatLong) {
    switch (pattern) {
      case 'P':
        return formatLong.date({
          width: 'short'
        });

      case 'PP':
        return formatLong.date({
          width: 'medium'
        });

      case 'PPP':
        return formatLong.date({
          width: 'long'
        });

      case 'PPPP':
      default:
        return formatLong.date({
          width: 'full'
        });
    }
  }

  function timeLongFormatter(pattern, formatLong) {
    switch (pattern) {
      case 'p':
        return formatLong.time({
          width: 'short'
        });

      case 'pp':
        return formatLong.time({
          width: 'medium'
        });

      case 'ppp':
        return formatLong.time({
          width: 'long'
        });

      case 'pppp':
      default:
        return formatLong.time({
          width: 'full'
        });
    }
  }

  function dateTimeLongFormatter(pattern, formatLong) {
    var matchResult = pattern.match(/(P+)(p+)?/);
    var datePattern = matchResult[1];
    var timePattern = matchResult[2];

    if (!timePattern) {
      return dateLongFormatter(pattern, formatLong);
    }

    var dateTimeFormat;

    switch (datePattern) {
      case 'P':
        dateTimeFormat = formatLong.dateTime({
          width: 'short'
        });
        break;

      case 'PP':
        dateTimeFormat = formatLong.dateTime({
          width: 'medium'
        });
        break;

      case 'PPP':
        dateTimeFormat = formatLong.dateTime({
          width: 'long'
        });
        break;

      case 'PPPP':
      default:
        dateTimeFormat = formatLong.dateTime({
          width: 'full'
        });
        break;
    }

    return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
  }

  var longFormatters = {
    p: timeLongFormatter,
    P: dateTimeLongFormatter
  };

  var MILLISECONDS_IN_MINUTE = 60000;

  function getDateMillisecondsPart(date) {
    return date.getTime() % MILLISECONDS_IN_MINUTE;
  }
  /**
   * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
   * They usually appear for dates that denote time before the timezones were introduced
   * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
   * and GMT+01:00:00 after that date)
   *
   * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
   * which would lead to incorrect calculations.
   *
   * This function returns the timezone offset in milliseconds that takes seconds in account.
   */


  function getTimezoneOffsetInMilliseconds(dirtyDate) {
    var date = new Date(dirtyDate.getTime());
    var baseTimezoneOffset = Math.ceil(date.getTimezoneOffset());
    date.setSeconds(0, 0);
    var hasNegativeUTCOffset = baseTimezoneOffset > 0;
    var millisecondsPartOfTimezoneOffset = hasNegativeUTCOffset ? (MILLISECONDS_IN_MINUTE + getDateMillisecondsPart(date)) % MILLISECONDS_IN_MINUTE : getDateMillisecondsPart(date);
    return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset;
  }

  var protectedDayOfYearTokens = ['D', 'DD'];
  var protectedWeekYearTokens = ['YY', 'YYYY'];
  function isProtectedDayOfYearToken(token) {
    return protectedDayOfYearTokens.indexOf(token) !== -1;
  }
  function isProtectedWeekYearToken(token) {
    return protectedWeekYearTokens.indexOf(token) !== -1;
  }
  function throwProtectedError(token, format, input) {
    if (token === 'YYYY') {
      throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
    } else if (token === 'YY') {
      throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
    } else if (token === 'D') {
      throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
    } else if (token === 'DD') {
      throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
    }
  }

  // - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
  //   (one of the certain letters followed by `o`)
  // - (\w)\1* matches any sequences of the same letter
  // - '' matches two quote characters in a row
  // - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
  //   except a single quote symbol, which ends the sequence.
  //   Two quote characters do not end the sequence.
  //   If there is no matching single quote
  //   then the sequence will continue until the end of the string.
  // - . matches any single character unmatched by previous parts of the RegExps

  var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also
  // sequences of symbols P, p, and the combinations like `PPPPPPPppppp`

  var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
  var escapedStringRegExp = /^'([^]*?)'?$/;
  var doubleQuoteRegExp = /''/g;
  var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
  /**
   * @name format
   * @category Common Helpers
   * @summary Format the date.
   *
   * @description
   * Return the formatted date string in the given format. The result may vary by locale.
   *
   * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
   * > See: https://git.io/fxCyr
   *
   * The characters wrapped between two single quotes characters (') are escaped.
   * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
   * (see the last example)
   *
   * Format of the string is based on Unicode Technical Standard #35:
   * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
   * with a few additions (see note 7 below the table).
   *
   * Accepted patterns:
   * | Unit                            | Pattern | Result examples                   | Notes |
   * |---------------------------------|---------|-----------------------------------|-------|
   * | Era                             | G..GGG  | AD, BC                            |       |
   * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
   * |                                 | GGGGG   | A, B                              |       |
   * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
   * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
   * |                                 | yy      | 44, 01, 00, 17                    | 5     |
   * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
   * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
   * |                                 | yyyyy   | ...                               | 3,5   |
   * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
   * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
   * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
   * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
   * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
   * |                                 | YYYYY   | ...                               | 3,5   |
   * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
   * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
   * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
   * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
   * |                                 | RRRRR   | ...                               | 3,5,7 |
   * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
   * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
   * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
   * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
   * |                                 | uuuuu   | ...                               | 3,5   |
   * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
   * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
   * |                                 | QQ      | 01, 02, 03, 04                    |       |
   * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
   * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
   * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
   * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
   * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
   * |                                 | qq      | 01, 02, 03, 04                    |       |
   * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
   * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
   * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
   * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
   * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
   * |                                 | MM      | 01, 02, ..., 12                   |       |
   * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
   * |                                 | MMMM    | January, February, ..., December  | 2     |
   * |                                 | MMMMM   | J, F, ..., D                      |       |
   * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
   * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
   * |                                 | LL      | 01, 02, ..., 12                   |       |
   * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
   * |                                 | LLLL    | January, February, ..., December  | 2     |
   * |                                 | LLLLL   | J, F, ..., D                      |       |
   * | Local week of year              | w       | 1, 2, ..., 53                     |       |
   * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
   * |                                 | ww      | 01, 02, ..., 53                   |       |
   * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
   * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
   * |                                 | II      | 01, 02, ..., 53                   | 7     |
   * | Day of month                    | d       | 1, 2, ..., 31                     |       |
   * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
   * |                                 | dd      | 01, 02, ..., 31                   |       |
   * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
   * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
   * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
   * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
   * |                                 | DDDD    | ...                               | 3     |
   * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
   * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
   * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
   * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
   * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
   * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
   * |                                 | ii      | 01, 02, ..., 07                   | 7     |
   * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |
   * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
   * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
   * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 7     |
   * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
   * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
   * |                                 | ee      | 02, 03, ..., 01                   |       |
   * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |
   * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
   * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
   * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
   * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
   * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
   * |                                 | cc      | 02, 03, ..., 01                   |       |
   * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |
   * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
   * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
   * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
   * | AM, PM                          | a..aaa  | AM, PM                            |       |
   * |                                 | aaaa    | a.m., p.m.                        | 2     |
   * |                                 | aaaaa   | a, p                              |       |
   * | AM, PM, noon, midnight          | b..bbb  | AM, PM, noon, midnight            |       |
   * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
   * |                                 | bbbbb   | a, p, n, mi                       |       |
   * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
   * |                                 | BBBB    | at night, in the morning, ...     | 2     |
   * |                                 | BBBBB   | at night, in the morning, ...     |       |
   * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
   * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
   * |                                 | hh      | 01, 02, ..., 11, 12               |       |
   * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
   * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
   * |                                 | HH      | 00, 01, 02, ..., 23               |       |
   * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
   * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
   * |                                 | KK      | 01, 02, ..., 11, 00               |       |
   * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
   * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
   * |                                 | kk      | 24, 01, 02, ..., 23               |       |
   * | Minute                          | m       | 0, 1, ..., 59                     |       |
   * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
   * |                                 | mm      | 00, 01, ..., 59                   |       |
   * | Second                          | s       | 0, 1, ..., 59                     |       |
   * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
   * |                                 | ss      | 00, 01, ..., 59                   |       |
   * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
   * |                                 | SS      | 00, 01, ..., 99                   |       |
   * |                                 | SSS     | 000, 0001, ..., 999               |       |
   * |                                 | SSSS    | ...                               | 3     |
   * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
   * |                                 | XX      | -0800, +0530, Z                   |       |
   * |                                 | XXX     | -08:00, +05:30, Z                 |       |
   * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
   * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
   * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
   * |                                 | xx      | -0800, +0530, +0000               |       |
   * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
   * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
   * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
   * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
   * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
   * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
   * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
   * | Seconds timestamp               | t       | 512969520                         | 7     |
   * |                                 | tt      | ...                               | 3,7   |
   * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
   * |                                 | TT      | ...                               | 3,7   |
   * | Long localized date             | P       | 05/29/1453                        | 7     |
   * |                                 | PP      | May 29, 1453                      | 7     |
   * |                                 | PPP     | May 29th, 1453                    | 7     |
   * |                                 | PPPP    | Sunday, May 29th, 1453            | 2,7   |
   * | Long localized time             | p       | 12:00 AM                          | 7     |
   * |                                 | pp      | 12:00:00 AM                       | 7     |
   * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
   * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
   * | Combination of date and time    | Pp      | 05/29/1453, 12:00 AM              | 7     |
   * |                                 | PPpp    | May 29, 1453, 12:00:00 AM         | 7     |
   * |                                 | PPPppp  | May 29th, 1453 at ...             | 7     |
   * |                                 | PPPPpppp| Sunday, May 29th, 1453 at ...     | 2,7   |
   * Notes:
   * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
   *    are the same as "stand-alone" units, but are different in some languages.
   *    "Formatting" units are declined according to the rules of the language
   *    in the context of a date. "Stand-alone" units are always nominative singular:
   *
   *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
   *
   *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
   *
   * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
   *    the single quote characters (see below).
   *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
   *    the output will be the same as default pattern for this unit, usually
   *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
   *    are marked with "2" in the last column of the table.
   *
   *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
   *
   *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
   *
   *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
   *
   *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
   *
   *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
   *
   * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
   *    The output will be padded with zeros to match the length of the pattern.
   *
   *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
   *
   * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
   *    These tokens represent the shortest form of the quarter.
   *
   * 5. The main difference between `y` and `u` patterns are B.C. years:
   *
   *    | Year | `y` | `u` |
   *    |------|-----|-----|
   *    | AC 1 |   1 |   1 |
   *    | BC 1 |   1 |   0 |
   *    | BC 2 |   2 |  -1 |
   *
   *    Also `yy` always returns the last two digits of a year,
   *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
   *
   *    | Year | `yy` | `uu` |
   *    |------|------|------|
   *    | 1    |   01 |   01 |
   *    | 14   |   14 |   14 |
   *    | 376  |   76 |  376 |
   *    | 1453 |   53 | 1453 |
   *
   *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
   *    except local week-numbering years are dependent on `options.weekStartsOn`
   *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}
   *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).
   *
   * 6. Specific non-location timezones are currently unavailable in `date-fns`,
   *    so right now these tokens fall back to GMT timezones.
   *
   * 7. These patterns are not in the Unicode Technical Standard #35:
   *    - `i`: ISO day of week
   *    - `I`: ISO week of year
   *    - `R`: ISO week-numbering year
   *    - `t`: seconds timestamp
   *    - `T`: milliseconds timestamp
   *    - `o`: ordinal number modifier
   *    - `P`: long localized date
   *    - `p`: long localized time
   *
   * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
   *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr
   *
   * 9. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.
   *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr
   *
   * ### v2.0.0 breaking changes:
   *
   * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
   *
   * - The second argument is now required for the sake of explicitness.
   *
   *   ```javascript
   *   // Before v2.0.0
   *   format(new Date(2016, 0, 1))
   *
   *   // v2.0.0 onward
   *   format(new Date(2016, 0, 1), "yyyy-MM-dd'T'HH:mm:ss.SSSxxx")
   *   ```
   *
   * - New format string API for `format` function
   *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).
   *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.
   *
   * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.
   *
   * @param {Date|Number} date - the original date
   * @param {String} format - the string of tokens
   * @param {Object} [options] - an object with options.
   * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
   * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
   * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is
   * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
   *   see: https://git.io/fxCyr
   * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
   *   see: https://git.io/fxCyr
   * @returns {String} the formatted date string
   * @throws {TypeError} 2 arguments required
   * @throws {RangeError} `date` must not be Invalid Date
   * @throws {RangeError} `options.locale` must contain `localize` property
   * @throws {RangeError} `options.locale` must contain `formatLong` property
   * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
   * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
   * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
   * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
   * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
   * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
   * @throws {RangeError} format string contains an unescaped latin alphabet character
   *
   * @example
   * // Represent 11 February 2014 in middle-endian format:
   * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
   * //=> '02/11/2014'
   *
   * @example
   * // Represent 2 July 2014 in Esperanto:
   * import { eoLocale } from 'date-fns/locale/eo'
   * var result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
   *   locale: eoLocale
   * })
   * //=> '2-a de julio 2014'
   *
   * @example
   * // Escape string by single quote characters:
   * var result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
   * //=> "3 o'clock"
   */

  function format(dirtyDate, dirtyFormatStr, dirtyOptions) {
    requiredArgs(2, arguments);
    var formatStr = String(dirtyFormatStr);
    var options = dirtyOptions || {};
    var locale = options.locale || locale$1;
    var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;
    var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
    var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

    if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
      throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
    }

    var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;
    var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
    var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

    if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
      throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
    }

    if (!locale.localize) {
      throw new RangeError('locale must contain localize property');
    }

    if (!locale.formatLong) {
      throw new RangeError('locale must contain formatLong property');
    }

    var originalDate = toDate(dirtyDate);

    if (!isValid(originalDate)) {
      throw new RangeError('Invalid time value');
    } // Convert the date in system timezone to the same date in UTC+00:00 timezone.
    // This ensures that when UTC functions will be implemented, locales will be compatible with them.
    // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376


    var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
    var utcDate = subMilliseconds(originalDate, timezoneOffset);
    var formatterOptions = {
      firstWeekContainsDate: firstWeekContainsDate,
      weekStartsOn: weekStartsOn,
      locale: locale,
      _originalDate: originalDate
    };
    var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {
      var firstCharacter = substring[0];

      if (firstCharacter === 'p' || firstCharacter === 'P') {
        var longFormatter = longFormatters[firstCharacter];
        return longFormatter(substring, locale.formatLong, formatterOptions);
      }

      return substring;
    }).join('').match(formattingTokensRegExp).map(function (substring) {
      // Replace two single quote characters with one single quote character
      if (substring === "''") {
        return "'";
      }

      var firstCharacter = substring[0];

      if (firstCharacter === "'") {
        return cleanEscapedString(substring);
      }

      var formatter = formatters[firstCharacter];

      if (formatter) {
        if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {
          throwProtectedError(substring, dirtyFormatStr, dirtyDate);
        }

        if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {
          throwProtectedError(substring, dirtyFormatStr, dirtyDate);
        }

        return formatter(utcDate, substring, locale.localize, formatterOptions);
      }

      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
        throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
      }

      return substring;
    }).join('');
    return result;
  }

  function cleanEscapedString(input) {
    return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
  }

  var mimeTypes = {
    json: 'application/json',
    csv: 'text/csv',
    xml: 'text/xml'
  };
  var getExportedFileName = function getExportedFileName(extension) {
    return "export-".concat(format(Date.now(), 'yyyy-MM-dd_HH-mm'), ".").concat(extension);
  };
  var ExportComponent = function ExportComponent(_ref) {
    var resource = _ref.resource;
    var _useState = React$3.useState(),
      _useState2 = _slicedToArray$1(_useState, 2),
      isFetching = _useState2[0],
      setFetching = _useState2[1];
    var sendNotice = adminjs.useNotice();
    var exportData = /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(type) {
        var _yield$ApiClient$reso, exportedData, blob;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              setFetching(true);
              _context.prev = 1;
              _context.next = 4;
              return new adminjs.ApiClient().resourceAction({
                method: 'post',
                resourceId: resource.id,
                actionName: 'export',
                params: {
                  type: type
                }
              });
            case 4:
              _yield$ApiClient$reso = _context.sent;
              exportedData = _yield$ApiClient$reso.data.exportedData;
              blob = new Blob([exportedData], {
                type: mimeTypes[type]
              });
              FileSaver_min.exports.saveAs(blob, getExportedFileName(type));
              sendNotice({
                message: 'Exported successfully',
                type: 'success'
              });
              _context.next = 14;
              break;
            case 11:
              _context.prev = 11;
              _context.t0 = _context["catch"](1);
              sendNotice({
                message: _context.t0.message,
                type: 'error'
              });
            case 14:
              setFetching(false);
            case 15:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[1, 11]]);
      }));
      return function exportData(_x) {
        return _ref2.apply(this, arguments);
      };
    }();
    if (isFetching) {
      return /*#__PURE__*/React__default["default"].createElement(designSystem.Loader, null);
    }
    return /*#__PURE__*/React__default["default"].createElement(designSystem.Box, null, /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      display: "flex",
      justifyContent: "center"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Text, {
      variant: "lg"
    }, "Choose export format:")), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      display: "flex",
      justifyContent: "center"
    }, Exporters.map(function (parserType) {
      return /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
        key: parserType,
        m: 2
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Button, {
        onClick: function onClick() {
          return exportData(parserType);
        },
        disabled: isFetching
      }, parserType.toUpperCase()));
    })));
  };

  var ImportComponent = function ImportComponent(_ref) {
    var resource = _ref.resource;
    var _useState = React$3.useState(null),
      _useState2 = _slicedToArray$1(_useState, 2),
      file = _useState2[0],
      setFile = _useState2[1];
    var sendNotice = adminjs.useNotice();
    var _useState3 = React$3.useState(),
      _useState4 = _slicedToArray$1(_useState3, 2),
      isFetching = _useState4[0],
      setFetching = _useState4[1];
    var onUpload = function onUpload(uploadedFile) {
      var _uploadedFile$;
      setFile((_uploadedFile$ = uploadedFile === null || uploadedFile === void 0 ? void 0 : uploadedFile[0]) !== null && _uploadedFile$ !== void 0 ? _uploadedFile$ : null);
    };
    var onSubmit = /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var importData;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (file) {
                _context.next = 2;
                break;
              }
              return _context.abrupt("return");
            case 2:
              setFetching(true);
              _context.prev = 3;
              importData = new FormData();
              importData.append('file', file, file === null || file === void 0 ? void 0 : file.name);
              _context.next = 8;
              return new adminjs.ApiClient().resourceAction({
                method: 'post',
                resourceId: resource.id,
                actionName: 'import',
                data: importData
              });
            case 8:
              sendNotice({
                message: 'Imported successfully',
                type: 'success'
              });
              _context.next = 14;
              break;
            case 11:
              _context.prev = 11;
              _context.t0 = _context["catch"](3);
              sendNotice({
                message: _context.t0.message,
                type: 'error'
              });
            case 14:
              setFetching(false);
            case 15:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[3, 11]]);
      }));
      return function onSubmit() {
        return _ref2.apply(this, arguments);
      };
    }();
    if (isFetching) {
      return /*#__PURE__*/React__default["default"].createElement(designSystem.Loader, null);
    }
    return /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      margin: "auto",
      maxWidth: 600,
      display: "flex",
      justifyContent: "center",
      flexDirection: "column"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.DropZone, {
      files: [],
      onChange: onUpload,
      multiple: false
    }), file && /*#__PURE__*/React__default["default"].createElement(designSystem.DropZoneItem, {
      file: file,
      filename: file.name,
      onRemove: function onRemove() {
        return setFile(null);
      }
    }), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      display: "flex",
      justifyContent: "center",
      m: 10
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Button, {
      onClick: onSubmit,
      disabled: !file || isFetching
    }, "Upload")));
  };

  var lib = {};

  var Chart$1 = {};

  var interopRequireDefault = {exports: {}};

  (function (module) {
  	function _interopRequireDefault(obj) {
  	  return obj && obj.__esModule ? obj : {
  	    "default": obj
  	  };
  	}
  	module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
  } (interopRequireDefault));

  var interopRequireWildcard = {exports: {}};

  var _typeof$2 = {exports: {}};

  (function (module) {
  	function _typeof(obj) {
  	  "@babel/helpers - typeof";

  	  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
  	    return typeof obj;
  	  } : function (obj) {
  	    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  	  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
  	}
  	module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
  } (_typeof$2));

  (function (module) {
  	var _typeof = _typeof$2.exports["default"];
  	function _getRequireWildcardCache(nodeInterop) {
  	  if (typeof WeakMap !== "function") return null;
  	  var cacheBabelInterop = new WeakMap();
  	  var cacheNodeInterop = new WeakMap();
  	  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
  	    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  	  })(nodeInterop);
  	}
  	function _interopRequireWildcard(obj, nodeInterop) {
  	  if (!nodeInterop && obj && obj.__esModule) {
  	    return obj;
  	  }
  	  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
  	    return {
  	      "default": obj
  	    };
  	  }
  	  var cache = _getRequireWildcardCache(nodeInterop);
  	  if (cache && cache.has(obj)) {
  	    return cache.get(obj);
  	  }
  	  var newObj = {};
  	  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  	  for (var key in obj) {
  	    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
  	      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
  	      if (desc && (desc.get || desc.set)) {
  	        Object.defineProperty(newObj, key, desc);
  	      } else {
  	        newObj[key] = obj[key];
  	      }
  	    }
  	  }
  	  newObj["default"] = obj;
  	  if (cache) {
  	    cache.set(obj, newObj);
  	  }
  	  return newObj;
  	}
  	module.exports = _interopRequireWildcard, module.exports.__esModule = true, module.exports["default"] = module.exports;
  } (interopRequireWildcard));

  var createForOfIteratorHelperLoose = {exports: {}};

  var unsupportedIterableToArray = {exports: {}};

  var arrayLikeToArray = {exports: {}};

  (function (module) {
  	function _arrayLikeToArray(arr, len) {
  	  if (len == null || len > arr.length) len = arr.length;
  	  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  	  return arr2;
  	}
  	module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  } (arrayLikeToArray));

  (function (module) {
  	var arrayLikeToArray$1 = arrayLikeToArray.exports;
  	function _unsupportedIterableToArray(o, minLen) {
  	  if (!o) return;
  	  if (typeof o === "string") return arrayLikeToArray$1(o, minLen);
  	  var n = Object.prototype.toString.call(o).slice(8, -1);
  	  if (n === "Object" && o.constructor) n = o.constructor.name;
  	  if (n === "Map" || n === "Set") return Array.from(o);
  	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray$1(o, minLen);
  	}
  	module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  } (unsupportedIterableToArray));

  (function (module) {
  	var unsupportedIterableToArray$1 = unsupportedIterableToArray.exports;
  	function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  	  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  	  if (it) return (it = it.call(o)).next.bind(it);
  	  if (Array.isArray(o) || (it = unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") {
  	    if (it) o = it;
  	    var i = 0;
  	    return function () {
  	      if (i >= o.length) return {
  	        done: true
  	      };
  	      return {
  	        done: false,
  	        value: o[i++]
  	      };
  	    };
  	  }
  	  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  	}
  	module.exports = _createForOfIteratorHelperLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;
  } (createForOfIteratorHelperLoose));

  var objectWithoutPropertiesLoose = {exports: {}};

  (function (module) {
  	function _objectWithoutPropertiesLoose(source, excluded) {
  	  if (source == null) return {};
  	  var target = {};
  	  var sourceKeys = Object.keys(source);
  	  var key, i;
  	  for (i = 0; i < sourceKeys.length; i++) {
  	    key = sourceKeys[i];
  	    if (excluded.indexOf(key) >= 0) continue;
  	    target[key] = source[key];
  	  }
  	  return target;
  	}
  	module.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;
  } (objectWithoutPropertiesLoose));

  var _extends$2 = {exports: {}};

  (function (module) {
  	function _extends() {
  	  module.exports = _extends = Object.assign ? Object.assign.bind() : function (target) {
  	    for (var i = 1; i < arguments.length; i++) {
  	      var source = arguments[i];
  	      for (var key in source) {
  	        if (Object.prototype.hasOwnProperty.call(source, key)) {
  	          target[key] = source[key];
  	        }
  	      }
  	    }
  	    return target;
  	  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  	  return _extends.apply(this, arguments);
  	}
  	module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;
  } (_extends$2));

  var d3Array = {exports: {}};

  (function (module, exports) {
  	// https://d3js.org/d3-array/ v2.12.1 Copyright 2021 Mike Bostock
  	(function (global, factory) {
  	factory(exports) ;
  	}(commonjsGlobal, (function (exports) {
  	function ascending(a, b) {
  	  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  	}

  	function bisector(f) {
  	  let delta = f;
  	  let compare = f;

  	  if (f.length === 1) {
  	    delta = (d, x) => f(d) - x;
  	    compare = ascendingComparator(f);
  	  }

  	  function left(a, x, lo, hi) {
  	    if (lo == null) lo = 0;
  	    if (hi == null) hi = a.length;
  	    while (lo < hi) {
  	      const mid = (lo + hi) >>> 1;
  	      if (compare(a[mid], x) < 0) lo = mid + 1;
  	      else hi = mid;
  	    }
  	    return lo;
  	  }

  	  function right(a, x, lo, hi) {
  	    if (lo == null) lo = 0;
  	    if (hi == null) hi = a.length;
  	    while (lo < hi) {
  	      const mid = (lo + hi) >>> 1;
  	      if (compare(a[mid], x) > 0) hi = mid;
  	      else lo = mid + 1;
  	    }
  	    return lo;
  	  }

  	  function center(a, x, lo, hi) {
  	    if (lo == null) lo = 0;
  	    if (hi == null) hi = a.length;
  	    const i = left(a, x, lo, hi - 1);
  	    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
  	  }

  	  return {left, center, right};
  	}

  	function ascendingComparator(f) {
  	  return (d, x) => ascending(f(d), x);
  	}

  	function number(x) {
  	  return x === null ? NaN : +x;
  	}

  	function* numbers(values, valueof) {
  	  if (valueof === undefined) {
  	    for (let value of values) {
  	      if (value != null && (value = +value) >= value) {
  	        yield value;
  	      }
  	    }
  	  } else {
  	    let index = -1;
  	    for (let value of values) {
  	      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
  	        yield value;
  	      }
  	    }
  	  }
  	}

  	const ascendingBisect = bisector(ascending);
  	const bisectRight = ascendingBisect.right;
  	const bisectLeft = ascendingBisect.left;
  	const bisectCenter = bisector(number).center;

  	function count(values, valueof) {
  	  let count = 0;
  	  if (valueof === undefined) {
  	    for (let value of values) {
  	      if (value != null && (value = +value) >= value) {
  	        ++count;
  	      }
  	    }
  	  } else {
  	    let index = -1;
  	    for (let value of values) {
  	      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
  	        ++count;
  	      }
  	    }
  	  }
  	  return count;
  	}

  	function length$1(array) {
  	  return array.length | 0;
  	}

  	function empty(length) {
  	  return !(length > 0);
  	}

  	function arrayify(values) {
  	  return typeof values !== "object" || "length" in values ? values : Array.from(values);
  	}

  	function reducer(reduce) {
  	  return values => reduce(...values);
  	}

  	function cross(...values) {
  	  const reduce = typeof values[values.length - 1] === "function" && reducer(values.pop());
  	  values = values.map(arrayify);
  	  const lengths = values.map(length$1);
  	  const j = values.length - 1;
  	  const index = new Array(j + 1).fill(0);
  	  const product = [];
  	  if (j < 0 || lengths.some(empty)) return product;
  	  while (true) {
  	    product.push(index.map((j, i) => values[i][j]));
  	    let i = j;
  	    while (++index[i] === lengths[i]) {
  	      if (i === 0) return reduce ? product.map(reduce) : product;
  	      index[i--] = 0;
  	    }
  	  }
  	}

  	function cumsum(values, valueof) {
  	  var sum = 0, index = 0;
  	  return Float64Array.from(values, valueof === undefined
  	    ? v => (sum += +v || 0)
  	    : v => (sum += +valueof(v, index++, values) || 0));
  	}

  	function descending(a, b) {
  	  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
  	}

  	function variance(values, valueof) {
  	  let count = 0;
  	  let delta;
  	  let mean = 0;
  	  let sum = 0;
  	  if (valueof === undefined) {
  	    for (let value of values) {
  	      if (value != null && (value = +value) >= value) {
  	        delta = value - mean;
  	        mean += delta / ++count;
  	        sum += delta * (value - mean);
  	      }
  	    }
  	  } else {
  	    let index = -1;
  	    for (let value of values) {
  	      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
  	        delta = value - mean;
  	        mean += delta / ++count;
  	        sum += delta * (value - mean);
  	      }
  	    }
  	  }
  	  if (count > 1) return sum / (count - 1);
  	}

  	function deviation(values, valueof) {
  	  const v = variance(values, valueof);
  	  return v ? Math.sqrt(v) : v;
  	}

  	function extent(values, valueof) {
  	  let min;
  	  let max;
  	  if (valueof === undefined) {
  	    for (const value of values) {
  	      if (value != null) {
  	        if (min === undefined) {
  	          if (value >= value) min = max = value;
  	        } else {
  	          if (min > value) min = value;
  	          if (max < value) max = value;
  	        }
  	      }
  	    }
  	  } else {
  	    let index = -1;
  	    for (let value of values) {
  	      if ((value = valueof(value, ++index, values)) != null) {
  	        if (min === undefined) {
  	          if (value >= value) min = max = value;
  	        } else {
  	          if (min > value) min = value;
  	          if (max < value) max = value;
  	        }
  	      }
  	    }
  	  }
  	  return [min, max];
  	}

  	// https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Modules/mathmodule.c#L1423
  	class Adder {
  	  constructor() {
  	    this._partials = new Float64Array(32);
  	    this._n = 0;
  	  }
  	  add(x) {
  	    const p = this._partials;
  	    let i = 0;
  	    for (let j = 0; j < this._n && j < 32; j++) {
  	      const y = p[j],
  	        hi = x + y,
  	        lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);
  	      if (lo) p[i++] = lo;
  	      x = hi;
  	    }
  	    p[i] = x;
  	    this._n = i + 1;
  	    return this;
  	  }
  	  valueOf() {
  	    const p = this._partials;
  	    let n = this._n, x, y, lo, hi = 0;
  	    if (n > 0) {
  	      hi = p[--n];
  	      while (n > 0) {
  	        x = hi;
  	        y = p[--n];
  	        hi = x + y;
  	        lo = y - (hi - x);
  	        if (lo) break;
  	      }
  	      if (n > 0 && ((lo < 0 && p[n - 1] < 0) || (lo > 0 && p[n - 1] > 0))) {
  	        y = lo * 2;
  	        x = hi + y;
  	        if (y == x - hi) hi = x;
  	      }
  	    }
  	    return hi;
  	  }
  	}

  	function fsum(values, valueof) {
  	  const adder = new Adder();
  	  if (valueof === undefined) {
  	    for (let value of values) {
  	      if (value = +value) {
  	        adder.add(value);
  	      }
  	    }
  	  } else {
  	    let index = -1;
  	    for (let value of values) {
  	      if (value = +valueof(value, ++index, values)) {
  	        adder.add(value);
  	      }
  	    }
  	  }
  	  return +adder;
  	}

  	function fcumsum(values, valueof) {
  	  const adder = new Adder();
  	  let index = -1;
  	  return Float64Array.from(values, valueof === undefined
  	      ? v => adder.add(+v || 0)
  	      : v => adder.add(+valueof(v, ++index, values) || 0)
  	  );
  	}

  	class InternMap extends Map {
  	  constructor(entries, key = keyof) {
  	    super();
  	    Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});
  	    if (entries != null) for (const [key, value] of entries) this.set(key, value);
  	  }
  	  get(key) {
  	    return super.get(intern_get(this, key));
  	  }
  	  has(key) {
  	    return super.has(intern_get(this, key));
  	  }
  	  set(key, value) {
  	    return super.set(intern_set(this, key), value);
  	  }
  	  delete(key) {
  	    return super.delete(intern_delete(this, key));
  	  }
  	}

  	class InternSet extends Set {
  	  constructor(values, key = keyof) {
  	    super();
  	    Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});
  	    if (values != null) for (const value of values) this.add(value);
  	  }
  	  has(value) {
  	    return super.has(intern_get(this, value));
  	  }
  	  add(value) {
  	    return super.add(intern_set(this, value));
  	  }
  	  delete(value) {
  	    return super.delete(intern_delete(this, value));
  	  }
  	}

  	function intern_get({_intern, _key}, value) {
  	  const key = _key(value);
  	  return _intern.has(key) ? _intern.get(key) : value;
  	}

  	function intern_set({_intern, _key}, value) {
  	  const key = _key(value);
  	  if (_intern.has(key)) return _intern.get(key);
  	  _intern.set(key, value);
  	  return value;
  	}

  	function intern_delete({_intern, _key}, value) {
  	  const key = _key(value);
  	  if (_intern.has(key)) {
  	    value = _intern.get(value);
  	    _intern.delete(key);
  	  }
  	  return value;
  	}

  	function keyof(value) {
  	  return value !== null && typeof value === "object" ? value.valueOf() : value;
  	}

  	function identity(x) {
  	  return x;
  	}

  	function group(values, ...keys) {
  	  return nest(values, identity, identity, keys);
  	}

  	function groups(values, ...keys) {
  	  return nest(values, Array.from, identity, keys);
  	}

  	function rollup(values, reduce, ...keys) {
  	  return nest(values, identity, reduce, keys);
  	}

  	function rollups(values, reduce, ...keys) {
  	  return nest(values, Array.from, reduce, keys);
  	}

  	function index(values, ...keys) {
  	  return nest(values, identity, unique, keys);
  	}

  	function indexes(values, ...keys) {
  	  return nest(values, Array.from, unique, keys);
  	}

  	function unique(values) {
  	  if (values.length !== 1) throw new Error("duplicate key");
  	  return values[0];
  	}

  	function nest(values, map, reduce, keys) {
  	  return (function regroup(values, i) {
  	    if (i >= keys.length) return reduce(values);
  	    const groups = new InternMap();
  	    const keyof = keys[i++];
  	    let index = -1;
  	    for (const value of values) {
  	      const key = keyof(value, ++index, values);
  	      const group = groups.get(key);
  	      if (group) group.push(value);
  	      else groups.set(key, [value]);
  	    }
  	    for (const [key, values] of groups) {
  	      groups.set(key, regroup(values, i));
  	    }
  	    return map(groups);
  	  })(values, 0);
  	}

  	function permute(source, keys) {
  	  return Array.from(keys, key => source[key]);
  	}

  	function sort(values, ...F) {
  	  if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
  	  values = Array.from(values);
  	  let [f = ascending] = F;
  	  if (f.length === 1 || F.length > 1) {
  	    const index = Uint32Array.from(values, (d, i) => i);
  	    if (F.length > 1) {
  	      F = F.map(f => values.map(f));
  	      index.sort((i, j) => {
  	        for (const f of F) {
  	          const c = ascending(f[i], f[j]);
  	          if (c) return c;
  	        }
  	      });
  	    } else {
  	      f = values.map(f);
  	      index.sort((i, j) => ascending(f[i], f[j]));
  	    }
  	    return permute(values, index);
  	  }
  	  return values.sort(f);
  	}

  	function groupSort(values, reduce, key) {
  	  return (reduce.length === 1
  	    ? sort(rollup(values, reduce, key), (([ak, av], [bk, bv]) => ascending(av, bv) || ascending(ak, bk)))
  	    : sort(group(values, key), (([ak, av], [bk, bv]) => reduce(av, bv) || ascending(ak, bk))))
  	    .map(([key]) => key);
  	}

  	var array = Array.prototype;

  	var slice = array.slice;

  	function constant(x) {
  	  return function() {
  	    return x;
  	  };
  	}

  	var e10 = Math.sqrt(50),
  	    e5 = Math.sqrt(10),
  	    e2 = Math.sqrt(2);

  	function ticks(start, stop, count) {
  	  var reverse,
  	      i = -1,
  	      n,
  	      ticks,
  	      step;

  	  stop = +stop, start = +start, count = +count;
  	  if (start === stop && count > 0) return [start];
  	  if (reverse = stop < start) n = start, start = stop, stop = n;
  	  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

  	  if (step > 0) {
  	    let r0 = Math.round(start / step), r1 = Math.round(stop / step);
  	    if (r0 * step < start) ++r0;
  	    if (r1 * step > stop) --r1;
  	    ticks = new Array(n = r1 - r0 + 1);
  	    while (++i < n) ticks[i] = (r0 + i) * step;
  	  } else {
  	    step = -step;
  	    let r0 = Math.round(start * step), r1 = Math.round(stop * step);
  	    if (r0 / step < start) ++r0;
  	    if (r1 / step > stop) --r1;
  	    ticks = new Array(n = r1 - r0 + 1);
  	    while (++i < n) ticks[i] = (r0 + i) / step;
  	  }

  	  if (reverse) ticks.reverse();

  	  return ticks;
  	}

  	function tickIncrement(start, stop, count) {
  	  var step = (stop - start) / Math.max(0, count),
  	      power = Math.floor(Math.log(step) / Math.LN10),
  	      error = step / Math.pow(10, power);
  	  return power >= 0
  	      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)
  	      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
  	}

  	function tickStep(start, stop, count) {
  	  var step0 = Math.abs(stop - start) / Math.max(0, count),
  	      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
  	      error = step0 / step1;
  	  if (error >= e10) step1 *= 10;
  	  else if (error >= e5) step1 *= 5;
  	  else if (error >= e2) step1 *= 2;
  	  return stop < start ? -step1 : step1;
  	}

  	function nice(start, stop, count) {
  	  let prestep;
  	  while (true) {
  	    const step = tickIncrement(start, stop, count);
  	    if (step === prestep || step === 0 || !isFinite(step)) {
  	      return [start, stop];
  	    } else if (step > 0) {
  	      start = Math.floor(start / step) * step;
  	      stop = Math.ceil(stop / step) * step;
  	    } else if (step < 0) {
  	      start = Math.ceil(start * step) / step;
  	      stop = Math.floor(stop * step) / step;
  	    }
  	    prestep = step;
  	  }
  	}

  	function sturges(values) {
  	  return Math.ceil(Math.log(count(values)) / Math.LN2) + 1;
  	}

  	function bin() {
  	  var value = identity,
  	      domain = extent,
  	      threshold = sturges;

  	  function histogram(data) {
  	    if (!Array.isArray(data)) data = Array.from(data);

  	    var i,
  	        n = data.length,
  	        x,
  	        values = new Array(n);

  	    for (i = 0; i < n; ++i) {
  	      values[i] = value(data[i], i, data);
  	    }

  	    var xz = domain(values),
  	        x0 = xz[0],
  	        x1 = xz[1],
  	        tz = threshold(values, x0, x1);

  	    // Convert number of thresholds into uniform thresholds, and nice the
  	    // default domain accordingly.
  	    if (!Array.isArray(tz)) {
  	      const max = x1, tn = +tz;
  	      if (domain === extent) [x0, x1] = nice(x0, x1, tn);
  	      tz = ticks(x0, x1, tn);

  	      // If the last threshold is coincident with the domain’s upper bound, the
  	      // last bin will be zero-width. If the default domain is used, and this
  	      // last threshold is coincident with the maximum input value, we can
  	      // extend the niced upper bound by one tick to ensure uniform bin widths;
  	      // otherwise, we simply remove the last threshold. Note that we don’t
  	      // coerce values or the domain to numbers, and thus must be careful to
  	      // compare order (>=) rather than strict equality (===)!
  	      if (tz[tz.length - 1] >= x1) {
  	        if (max >= x1 && domain === extent) {
  	          const step = tickIncrement(x0, x1, tn);
  	          if (isFinite(step)) {
  	            if (step > 0) {
  	              x1 = (Math.floor(x1 / step) + 1) * step;
  	            } else if (step < 0) {
  	              x1 = (Math.ceil(x1 * -step) + 1) / -step;
  	            }
  	          }
  	        } else {
  	          tz.pop();
  	        }
  	      }
  	    }

  	    // Remove any thresholds outside the domain.
  	    var m = tz.length;
  	    while (tz[0] <= x0) tz.shift(), --m;
  	    while (tz[m - 1] > x1) tz.pop(), --m;

  	    var bins = new Array(m + 1),
  	        bin;

  	    // Initialize bins.
  	    for (i = 0; i <= m; ++i) {
  	      bin = bins[i] = [];
  	      bin.x0 = i > 0 ? tz[i - 1] : x0;
  	      bin.x1 = i < m ? tz[i] : x1;
  	    }

  	    // Assign data to bins by value, ignoring any outside the domain.
  	    for (i = 0; i < n; ++i) {
  	      x = values[i];
  	      if (x0 <= x && x <= x1) {
  	        bins[bisectRight(tz, x, 0, m)].push(data[i]);
  	      }
  	    }

  	    return bins;
  	  }

  	  histogram.value = function(_) {
  	    return arguments.length ? (value = typeof _ === "function" ? _ : constant(_), histogram) : value;
  	  };

  	  histogram.domain = function(_) {
  	    return arguments.length ? (domain = typeof _ === "function" ? _ : constant([_[0], _[1]]), histogram) : domain;
  	  };

  	  histogram.thresholds = function(_) {
  	    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;
  	  };

  	  return histogram;
  	}

  	function max(values, valueof) {
  	  let max;
  	  if (valueof === undefined) {
  	    for (const value of values) {
  	      if (value != null
  	          && (max < value || (max === undefined && value >= value))) {
  	        max = value;
  	      }
  	    }
  	  } else {
  	    let index = -1;
  	    for (let value of values) {
  	      if ((value = valueof(value, ++index, values)) != null
  	          && (max < value || (max === undefined && value >= value))) {
  	        max = value;
  	      }
  	    }
  	  }
  	  return max;
  	}

  	function min(values, valueof) {
  	  let min;
  	  if (valueof === undefined) {
  	    for (const value of values) {
  	      if (value != null
  	          && (min > value || (min === undefined && value >= value))) {
  	        min = value;
  	      }
  	    }
  	  } else {
  	    let index = -1;
  	    for (let value of values) {
  	      if ((value = valueof(value, ++index, values)) != null
  	          && (min > value || (min === undefined && value >= value))) {
  	        min = value;
  	      }
  	    }
  	  }
  	  return min;
  	}

  	// Based on https://github.com/mourner/quickselect
  	// ISC license, Copyright 2018 Vladimir Agafonkin.
  	function quickselect(array, k, left = 0, right = array.length - 1, compare = ascending) {
  	  while (right > left) {
  	    if (right - left > 600) {
  	      const n = right - left + 1;
  	      const m = k - left + 1;
  	      const z = Math.log(n);
  	      const s = 0.5 * Math.exp(2 * z / 3);
  	      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
  	      const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
  	      const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
  	      quickselect(array, k, newLeft, newRight, compare);
  	    }

  	    const t = array[k];
  	    let i = left;
  	    let j = right;

  	    swap(array, left, k);
  	    if (compare(array[right], t) > 0) swap(array, left, right);

  	    while (i < j) {
  	      swap(array, i, j), ++i, --j;
  	      while (compare(array[i], t) < 0) ++i;
  	      while (compare(array[j], t) > 0) --j;
  	    }

  	    if (compare(array[left], t) === 0) swap(array, left, j);
  	    else ++j, swap(array, j, right);

  	    if (j <= k) left = j + 1;
  	    if (k <= j) right = j - 1;
  	  }
  	  return array;
  	}

  	function swap(array, i, j) {
  	  const t = array[i];
  	  array[i] = array[j];
  	  array[j] = t;
  	}

  	function quantile(values, p, valueof) {
  	  values = Float64Array.from(numbers(values, valueof));
  	  if (!(n = values.length)) return;
  	  if ((p = +p) <= 0 || n < 2) return min(values);
  	  if (p >= 1) return max(values);
  	  var n,
  	      i = (n - 1) * p,
  	      i0 = Math.floor(i),
  	      value0 = max(quickselect(values, i0).subarray(0, i0 + 1)),
  	      value1 = min(values.subarray(i0 + 1));
  	  return value0 + (value1 - value0) * (i - i0);
  	}

  	function quantileSorted(values, p, valueof = number) {
  	  if (!(n = values.length)) return;
  	  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
  	  if (p >= 1) return +valueof(values[n - 1], n - 1, values);
  	  var n,
  	      i = (n - 1) * p,
  	      i0 = Math.floor(i),
  	      value0 = +valueof(values[i0], i0, values),
  	      value1 = +valueof(values[i0 + 1], i0 + 1, values);
  	  return value0 + (value1 - value0) * (i - i0);
  	}

  	function freedmanDiaconis(values, min, max) {
  	  return Math.ceil((max - min) / (2 * (quantile(values, 0.75) - quantile(values, 0.25)) * Math.pow(count(values), -1 / 3)));
  	}

  	function scott(values, min, max) {
  	  return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(count(values), -1 / 3)));
  	}

  	function maxIndex(values, valueof) {
  	  let max;
  	  let maxIndex = -1;
  	  let index = -1;
  	  if (valueof === undefined) {
  	    for (const value of values) {
  	      ++index;
  	      if (value != null
  	          && (max < value || (max === undefined && value >= value))) {
  	        max = value, maxIndex = index;
  	      }
  	    }
  	  } else {
  	    for (let value of values) {
  	      if ((value = valueof(value, ++index, values)) != null
  	          && (max < value || (max === undefined && value >= value))) {
  	        max = value, maxIndex = index;
  	      }
  	    }
  	  }
  	  return maxIndex;
  	}

  	function mean(values, valueof) {
  	  let count = 0;
  	  let sum = 0;
  	  if (valueof === undefined) {
  	    for (let value of values) {
  	      if (value != null && (value = +value) >= value) {
  	        ++count, sum += value;
  	      }
  	    }
  	  } else {
  	    let index = -1;
  	    for (let value of values) {
  	      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
  	        ++count, sum += value;
  	      }
  	    }
  	  }
  	  if (count) return sum / count;
  	}

  	function median(values, valueof) {
  	  return quantile(values, 0.5, valueof);
  	}

  	function* flatten(arrays) {
  	  for (const array of arrays) {
  	    yield* array;
  	  }
  	}

  	function merge(arrays) {
  	  return Array.from(flatten(arrays));
  	}

  	function minIndex(values, valueof) {
  	  let min;
  	  let minIndex = -1;
  	  let index = -1;
  	  if (valueof === undefined) {
  	    for (const value of values) {
  	      ++index;
  	      if (value != null
  	          && (min > value || (min === undefined && value >= value))) {
  	        min = value, minIndex = index;
  	      }
  	    }
  	  } else {
  	    for (let value of values) {
  	      if ((value = valueof(value, ++index, values)) != null
  	          && (min > value || (min === undefined && value >= value))) {
  	        min = value, minIndex = index;
  	      }
  	    }
  	  }
  	  return minIndex;
  	}

  	function pairs(values, pairof = pair) {
  	  const pairs = [];
  	  let previous;
  	  let first = false;
  	  for (const value of values) {
  	    if (first) pairs.push(pairof(previous, value));
  	    previous = value;
  	    first = true;
  	  }
  	  return pairs;
  	}

  	function pair(a, b) {
  	  return [a, b];
  	}

  	function range(start, stop, step) {
  	  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

  	  var i = -1,
  	      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
  	      range = new Array(n);

  	  while (++i < n) {
  	    range[i] = start + i * step;
  	  }

  	  return range;
  	}

  	function least(values, compare = ascending) {
  	  let min;
  	  let defined = false;
  	  if (compare.length === 1) {
  	    let minValue;
  	    for (const element of values) {
  	      const value = compare(element);
  	      if (defined
  	          ? ascending(value, minValue) < 0
  	          : ascending(value, value) === 0) {
  	        min = element;
  	        minValue = value;
  	        defined = true;
  	      }
  	    }
  	  } else {
  	    for (const value of values) {
  	      if (defined
  	          ? compare(value, min) < 0
  	          : compare(value, value) === 0) {
  	        min = value;
  	        defined = true;
  	      }
  	    }
  	  }
  	  return min;
  	}

  	function leastIndex(values, compare = ascending) {
  	  if (compare.length === 1) return minIndex(values, compare);
  	  let minValue;
  	  let min = -1;
  	  let index = -1;
  	  for (const value of values) {
  	    ++index;
  	    if (min < 0
  	        ? compare(value, value) === 0
  	        : compare(value, minValue) < 0) {
  	      minValue = value;
  	      min = index;
  	    }
  	  }
  	  return min;
  	}

  	function greatest(values, compare = ascending) {
  	  let max;
  	  let defined = false;
  	  if (compare.length === 1) {
  	    let maxValue;
  	    for (const element of values) {
  	      const value = compare(element);
  	      if (defined
  	          ? ascending(value, maxValue) > 0
  	          : ascending(value, value) === 0) {
  	        max = element;
  	        maxValue = value;
  	        defined = true;
  	      }
  	    }
  	  } else {
  	    for (const value of values) {
  	      if (defined
  	          ? compare(value, max) > 0
  	          : compare(value, value) === 0) {
  	        max = value;
  	        defined = true;
  	      }
  	    }
  	  }
  	  return max;
  	}

  	function greatestIndex(values, compare = ascending) {
  	  if (compare.length === 1) return maxIndex(values, compare);
  	  let maxValue;
  	  let max = -1;
  	  let index = -1;
  	  for (const value of values) {
  	    ++index;
  	    if (max < 0
  	        ? compare(value, value) === 0
  	        : compare(value, maxValue) > 0) {
  	      maxValue = value;
  	      max = index;
  	    }
  	  }
  	  return max;
  	}

  	function scan(values, compare) {
  	  const index = leastIndex(values, compare);
  	  return index < 0 ? undefined : index;
  	}

  	var shuffle = shuffler(Math.random);

  	function shuffler(random) {
  	  return function shuffle(array, i0 = 0, i1 = array.length) {
  	    let m = i1 - (i0 = +i0);
  	    while (m) {
  	      const i = random() * m-- | 0, t = array[m + i0];
  	      array[m + i0] = array[i + i0];
  	      array[i + i0] = t;
  	    }
  	    return array;
  	  };
  	}

  	function sum(values, valueof) {
  	  let sum = 0;
  	  if (valueof === undefined) {
  	    for (let value of values) {
  	      if (value = +value) {
  	        sum += value;
  	      }
  	    }
  	  } else {
  	    let index = -1;
  	    for (let value of values) {
  	      if (value = +valueof(value, ++index, values)) {
  	        sum += value;
  	      }
  	    }
  	  }
  	  return sum;
  	}

  	function transpose(matrix) {
  	  if (!(n = matrix.length)) return [];
  	  for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {
  	    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
  	      row[j] = matrix[j][i];
  	    }
  	  }
  	  return transpose;
  	}

  	function length(d) {
  	  return d.length;
  	}

  	function zip() {
  	  return transpose(arguments);
  	}

  	function every(values, test) {
  	  if (typeof test !== "function") throw new TypeError("test is not a function");
  	  let index = -1;
  	  for (const value of values) {
  	    if (!test(value, ++index, values)) {
  	      return false;
  	    }
  	  }
  	  return true;
  	}

  	function some(values, test) {
  	  if (typeof test !== "function") throw new TypeError("test is not a function");
  	  let index = -1;
  	  for (const value of values) {
  	    if (test(value, ++index, values)) {
  	      return true;
  	    }
  	  }
  	  return false;
  	}

  	function filter(values, test) {
  	  if (typeof test !== "function") throw new TypeError("test is not a function");
  	  const array = [];
  	  let index = -1;
  	  for (const value of values) {
  	    if (test(value, ++index, values)) {
  	      array.push(value);
  	    }
  	  }
  	  return array;
  	}

  	function map(values, mapper) {
  	  if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
  	  if (typeof mapper !== "function") throw new TypeError("mapper is not a function");
  	  return Array.from(values, (value, index) => mapper(value, index, values));
  	}

  	function reduce(values, reducer, value) {
  	  if (typeof reducer !== "function") throw new TypeError("reducer is not a function");
  	  const iterator = values[Symbol.iterator]();
  	  let done, next, index = -1;
  	  if (arguments.length < 3) {
  	    ({done, value} = iterator.next());
  	    if (done) return;
  	    ++index;
  	  }
  	  while (({done, value: next} = iterator.next()), !done) {
  	    value = reducer(value, next, ++index, values);
  	  }
  	  return value;
  	}

  	function reverse(values) {
  	  if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
  	  return Array.from(values).reverse();
  	}

  	function difference(values, ...others) {
  	  values = new Set(values);
  	  for (const other of others) {
  	    for (const value of other) {
  	      values.delete(value);
  	    }
  	  }
  	  return values;
  	}

  	function disjoint(values, other) {
  	  const iterator = other[Symbol.iterator](), set = new Set();
  	  for (const v of values) {
  	    if (set.has(v)) return false;
  	    let value, done;
  	    while (({value, done} = iterator.next())) {
  	      if (done) break;
  	      if (Object.is(v, value)) return false;
  	      set.add(value);
  	    }
  	  }
  	  return true;
  	}

  	function set(values) {
  	  return values instanceof Set ? values : new Set(values);
  	}

  	function intersection(values, ...others) {
  	  values = new Set(values);
  	  others = others.map(set);
  	  out: for (const value of values) {
  	    for (const other of others) {
  	      if (!other.has(value)) {
  	        values.delete(value);
  	        continue out;
  	      }
  	    }
  	  }
  	  return values;
  	}

  	function superset(values, other) {
  	  const iterator = values[Symbol.iterator](), set = new Set();
  	  for (const o of other) {
  	    if (set.has(o)) continue;
  	    let value, done;
  	    while (({value, done} = iterator.next())) {
  	      if (done) return false;
  	      set.add(value);
  	      if (Object.is(o, value)) break;
  	    }
  	  }
  	  return true;
  	}

  	function subset(values, other) {
  	  return superset(other, values);
  	}

  	function union(...others) {
  	  const set = new Set();
  	  for (const other of others) {
  	    for (const o of other) {
  	      set.add(o);
  	    }
  	  }
  	  return set;
  	}

  	exports.Adder = Adder;
  	exports.InternMap = InternMap;
  	exports.InternSet = InternSet;
  	exports.ascending = ascending;
  	exports.bin = bin;
  	exports.bisect = bisectRight;
  	exports.bisectCenter = bisectCenter;
  	exports.bisectLeft = bisectLeft;
  	exports.bisectRight = bisectRight;
  	exports.bisector = bisector;
  	exports.count = count;
  	exports.cross = cross;
  	exports.cumsum = cumsum;
  	exports.descending = descending;
  	exports.deviation = deviation;
  	exports.difference = difference;
  	exports.disjoint = disjoint;
  	exports.every = every;
  	exports.extent = extent;
  	exports.fcumsum = fcumsum;
  	exports.filter = filter;
  	exports.fsum = fsum;
  	exports.greatest = greatest;
  	exports.greatestIndex = greatestIndex;
  	exports.group = group;
  	exports.groupSort = groupSort;
  	exports.groups = groups;
  	exports.histogram = bin;
  	exports.index = index;
  	exports.indexes = indexes;
  	exports.intersection = intersection;
  	exports.least = least;
  	exports.leastIndex = leastIndex;
  	exports.map = map;
  	exports.max = max;
  	exports.maxIndex = maxIndex;
  	exports.mean = mean;
  	exports.median = median;
  	exports.merge = merge;
  	exports.min = min;
  	exports.minIndex = minIndex;
  	exports.nice = nice;
  	exports.pairs = pairs;
  	exports.permute = permute;
  	exports.quantile = quantile;
  	exports.quantileSorted = quantileSorted;
  	exports.quickselect = quickselect;
  	exports.range = range;
  	exports.reduce = reduce;
  	exports.reverse = reverse;
  	exports.rollup = rollup;
  	exports.rollups = rollups;
  	exports.scan = scan;
  	exports.shuffle = shuffle;
  	exports.shuffler = shuffler;
  	exports.some = some;
  	exports.sort = sort;
  	exports.subset = subset;
  	exports.sum = sum;
  	exports.superset = superset;
  	exports.thresholdFreedmanDiaconis = freedmanDiaconis;
  	exports.thresholdScott = scott;
  	exports.thresholdSturges = sturges;
  	exports.tickIncrement = tickIncrement;
  	exports.tickStep = tickStep;
  	exports.ticks = ticks;
  	exports.transpose = transpose;
  	exports.union = union;
  	exports.variance = variance;
  	exports.zip = zip;

  	Object.defineProperty(exports, '__esModule', { value: true });

  	})));
  } (d3Array, d3Array.exports));

  var useGetLatest = {};

  (function (exports) {

  	var _interopRequireDefault = interopRequireDefault.exports["default"];

  	exports.__esModule = true;
  	exports["default"] = useGetLatest;

  	var _react = _interopRequireDefault(React__default["default"]);

  	function useGetLatest(obj) {
  	  var ref = _react["default"].useRef(obj);

  	  var getterRef = _react["default"].useRef();

  	  ref.current = obj;

  	  if (!getterRef.current) {
  	    getterRef.current = function () {
  	      return ref.current;
  	    };
  	  }

  	  return getterRef.current;
  	}
  } (useGetLatest));

  var useIsomorphicLayoutEffect = {};

  (function (exports) {

  	var _interopRequireDefault = interopRequireDefault.exports["default"];

  	exports.__esModule = true;
  	exports["default"] = void 0;

  	var _react = _interopRequireDefault(React__default["default"]);

  	var _default = typeof window !== 'undefined' ? _react["default"].useLayoutEffect : _react["default"].useEffect;

  	exports["default"] = _default;
  } (useIsomorphicLayoutEffect));

  var Bar = {};

  var Utils = {};

  var _interopRequireDefault$7 = interopRequireDefault.exports["default"];

  Utils.__esModule = true;
  Utils.getSeriesStatus = getSeriesStatus;
  Utils.getDatumStatus = getDatumStatus;
  Utils.materializeStyles = materializeStyles;
  Utils.translate = translate;
  Utils.isDefined = isDefined;

  var _extends2$2 = _interopRequireDefault$7(_extends$2.exports);

  function getSeriesStatus(series, focusedDatum) {
    if ((focusedDatum == null ? void 0 : focusedDatum.seriesId) === series.id) {
      return 'focused';
    }

    return 'none';
  }

  function getDatumStatus(datum, focusedDatum) {
    var _datum$tooltipGroup;

    if (datum === focusedDatum) {
      return 'focused';
    }

    if ((_datum$tooltipGroup = datum.tooltipGroup) != null && _datum$tooltipGroup.some(function (groupDatum) {
      groupDatum.seriesId === (focusedDatum == null ? void 0 : focusedDatum.seriesId) && groupDatum.index === (focusedDatum == null ? void 0 : focusedDatum.index);
    })) {
      return 'groupFocused';
    }

    return 'none';
  }

  var elementTypes = ['area', 'line', 'rectangle', 'circle'];

  function materializeStyles(style, defaults) {
    if (style === void 0) {
      style = {};
    }

    if (defaults === void 0) {
      defaults = {};
    }

    style = normalizeColor(style, defaults);

    for (var i = 0; i < elementTypes.length; i++) {
      var type = elementTypes[i];

      if (style[type] && defaults[type]) {
        style[type] = materializeStyles(style[type], defaults);
      }
    }

    return style;
  }

  function translate(x, y) {
    return "translate3d(" + Math.round(x) + "px, " + Math.round(y) + "px, 0)";
  } //


  function normalizeColor(style, defaults) {
    return (0, _extends2$2["default"])({}, style, {
      stroke: style.stroke || style.color || defaults.stroke || defaults.color,
      fill: style.fill || style.color || defaults.fill || defaults.color
    });
  }

  function isDefined(num) {
    return typeof num === 'number' && !Number.isNaN(num);
  }

  var chartContext = {};

  (function (exports) {

  	var _interopRequireWildcard = interopRequireWildcard.exports["default"];

  	exports.__esModule = true;
  	exports.ChartContextProvider = ChartContextProvider;
  	exports["default"] = useChartContext;

  	var React = _interopRequireWildcard(React__default["default"]);

  	var chartContext = /*#__PURE__*/React.createContext(null);

  	function ChartContextProvider(_ref) {
  	  var value = _ref.value,
  	      children = _ref.children;
  	  return /*#__PURE__*/React.createElement(chartContext.Provider, {
  	    value: value,
  	    children: children
  	  });
  	}

  	function useChartContext() {
  	  return React.useContext(chartContext)();
  	}
  } (chartContext));

  (function (exports) {

  	var _interopRequireDefault = interopRequireDefault.exports["default"];

  	exports.__esModule = true;
  	exports["default"] = BarComponent;
  	exports.getPrimaryGroupLength = getPrimaryGroupLength;
  	exports.getPrimaryLength = getPrimaryLength;
  	exports.getPrimary = getPrimary;

  	var _extends2 = _interopRequireDefault(_extends$2.exports);

  	var _react = _interopRequireDefault(React__default["default"]);

  	var _Utils = Utils;

  	var _chartContext = _interopRequireDefault(chartContext);

  	//
  	function BarComponent(_ref) {
  	  var primaryAxis = _ref.primaryAxis,
  	      secondaryAxis = _ref.secondaryAxis,
  	      allSeries = _ref.series;

  	  var _useChartContext = (0, _chartContext["default"])(),
  	      getSeriesStatusStyle = _useChartContext.getSeriesStatusStyle,
  	      getDatumStatusStyle = _useChartContext.getDatumStatusStyle,
  	      focusedDatumState = _useChartContext.focusedDatumState,
  	      gridDimensions = _useChartContext.gridDimensions;

  	  var focusedDatum = focusedDatumState[0];
  	  var xAxis = primaryAxis.isVertical ? secondaryAxis : primaryAxis;
  	  var yAxis = primaryAxis.isVertical ? primaryAxis : secondaryAxis;
  	  return /*#__PURE__*/_react["default"].createElement("g", {
  	    style: {
  	      transform: (0, _Utils.translate)(gridDimensions.left, gridDimensions.top)
  	    }
  	  }, allSeries.map(function (series, i) {
  	    var style = getSeriesStatusStyle(series, focusedDatum);
  	    return /*#__PURE__*/_react["default"].createElement("g", {
  	      key: "lines-" + i
  	    }, series.datums.map(function (datum, i) {
  	      var _getRectX, _getWidth, _getRectY, _getHeight;

  	      var dataStyle = getDatumStatusStyle(datum, focusedDatum);

  	      var _clampPxToAxis = clampPxToAxis((_getRectX = getRectX(datum, primaryAxis, secondaryAxis)) != null ? _getRectX : NaN, (_getWidth = getWidth(datum, primaryAxis, secondaryAxis)) != null ? _getWidth : NaN, xAxis),
  	          x = _clampPxToAxis[0],
  	          width = _clampPxToAxis[1];

  	      var _clampPxToAxis2 = clampPxToAxis((_getRectY = getRectY(datum, primaryAxis, secondaryAxis)) != null ? _getRectY : NaN, (_getHeight = getHeight(datum, primaryAxis, secondaryAxis)) != null ? _getHeight : NaN, yAxis),
  	          y = _clampPxToAxis2[0],
  	          height = _clampPxToAxis2[1];

  	      return /*#__PURE__*/_react["default"].createElement("rect", {
  	        ref: function ref(el) {
  	          datum.element = el;
  	        },
  	        key: i,
  	        x: x,
  	        y: y,
  	        width: width,
  	        height: height,
  	        style: (0, _extends2["default"])({
  	          strokeWidth: 0
  	        }, style, style.rectangle, dataStyle, dataStyle.rectangle)
  	      });
  	    }));
  	  }));
  	}

  	function getWidth(datum, primaryAxis, secondaryAxis) {
  	  return primaryAxis.isVertical ? getSecondaryLength(datum, secondaryAxis) : getPrimaryLength(datum, primaryAxis, secondaryAxis);
  	}

  	function getHeight(datum, primaryAxis, secondaryAxis) {
  	  return primaryAxis.isVertical ? getPrimaryLength(datum, primaryAxis, secondaryAxis) : getSecondaryLength(datum, secondaryAxis);
  	}

  	function getPrimaryGroupLength(_datum, primaryAxis) {
  	  return Math.max(primaryAxis.primaryBandScale.bandwidth(), 1);
  	}

  	function getPrimaryLength(_datum, primaryAxis, secondaryAxis) {
  	  if (primaryAxis.axisFamily === 'band') {
  	    var _primaryAxis$minBandS, _primaryAxis$maxBandS;

  	    var bandWidth = secondaryAxis.stacked ? primaryAxis.scale.bandwidth() : primaryAxis.seriesBandScale.bandwidth();
  	    return Math.min(Math.max(bandWidth, (_primaryAxis$minBandS = primaryAxis.minBandSize) != null ? _primaryAxis$minBandS : 1), (_primaryAxis$maxBandS = primaryAxis.maxBandSize) != null ? _primaryAxis$maxBandS : 99999999);
  	  }

  	  return Math.max(secondaryAxis.stacked ? primaryAxis.primaryBandScale.bandwidth() : primaryAxis.seriesBandScale.bandwidth(), 1);
  	}

  	function getSecondaryLength(datum, secondaryAxis) {
  	  var secondary = [getSecondaryStart(datum, secondaryAxis), getSecondary(datum, secondaryAxis)];
  	  return Math.abs(secondary[1] - secondary[0]);
  	}

  	function getRectX(datum, primaryAxis, secondaryAxis) {
  	  return primaryAxis.isVertical ? getSecondaryStart(datum, secondaryAxis) : getPrimary(datum, primaryAxis, secondaryAxis);
  	}

  	function getRectY(datum, primaryAxis, secondaryAxis) {
  	  return primaryAxis.isVertical ? getPrimary(datum, primaryAxis, secondaryAxis) : getSecondary(datum, secondaryAxis);
  	}

  	function getPrimary(datum, primaryAxis, secondaryAxis) {
  	  var _primaryAxis$scale;

  	  var primary = (_primaryAxis$scale = primaryAxis.scale(datum.primaryValue)) != null ? _primaryAxis$scale : NaN;

  	  if (primaryAxis.axisFamily !== 'band') {
  	    primary -= getPrimaryGroupLength(datum, primaryAxis) / 2;
  	  }

  	  if (!secondaryAxis.stacked) {
  	    var _seriesBandScale;

  	    primary = primary + ((_seriesBandScale = primaryAxis.seriesBandScale(datum.seriesIndex)) != null ? _seriesBandScale : NaN);
  	  }

  	  return primary;
  	}

  	function getSecondaryStart(datum, secondaryAxis) {
  	  var _secondaryAxis$scale2;

  	  if (secondaryAxis.stacked) {
  	    var _secondaryAxis$scale, _datum$stackData$, _datum$stackData;

  	    return (_secondaryAxis$scale = secondaryAxis.scale((_datum$stackData$ = (_datum$stackData = datum.stackData) == null ? void 0 : _datum$stackData[0]) != null ? _datum$stackData$ : NaN)) != null ? _secondaryAxis$scale : NaN;
  	  }

  	  return (_secondaryAxis$scale2 = secondaryAxis.scale(datum.secondaryValue < 0 ? datum.secondaryValue : 0)) != null ? _secondaryAxis$scale2 : NaN;
  	}

  	function getSecondary(datum, secondaryAxis) {
  	  var _secondaryAxis$scale4;

  	  if (secondaryAxis.stacked) {
  	    var _secondaryAxis$scale3, _datum$stackData$2, _datum$stackData2;

  	    return (_secondaryAxis$scale3 = secondaryAxis.scale((_datum$stackData$2 = (_datum$stackData2 = datum.stackData) == null ? void 0 : _datum$stackData2[1]) != null ? _datum$stackData$2 : NaN)) != null ? _secondaryAxis$scale3 : NaN;
  	  }

  	  return (_secondaryAxis$scale4 = secondaryAxis.scale(datum.secondaryValue < 0 ? 0 : datum.secondaryValue)) != null ? _secondaryAxis$scale4 : NaN;
  	}

  	function clampPxToAxis(startPx, lengthPx, axis) {
  	  var range = axis.scale.range();

  	  if (axis.isVertical) {
  	    range.reverse();
  	  }

  	  var safe = function safe(num) {
  	    return Math.max(range[0], Math.min(num, range[1]));
  	  };

  	  var safeStart = safe(startPx);
  	  var safeEnd = safe(startPx + lengthPx);
  	  var safeLength = safeEnd - safeStart;
  	  return [safeStart, safeLength];
  	}
  } (Bar));

  var Line = {};

  var d3Shape = {exports: {}};

  var d3Path = {exports: {}};

  var hasRequiredD3Path;

  function requireD3Path () {
  	if (hasRequiredD3Path) return d3Path.exports;
  	hasRequiredD3Path = 1;
  	(function (module, exports) {
  		// https://d3js.org/d3-path/ v2.0.0 Copyright 2020 Mike Bostock
  		(function (global, factory) {
  		factory(exports) ;
  		}(commonjsGlobal, function (exports) {
  		const pi = Math.PI,
  		    tau = 2 * pi,
  		    epsilon = 1e-6,
  		    tauEpsilon = tau - epsilon;

  		function Path() {
  		  this._x0 = this._y0 = // start of current subpath
  		  this._x1 = this._y1 = null; // end of current subpath
  		  this._ = "";
  		}

  		function path() {
  		  return new Path;
  		}

  		Path.prototype = path.prototype = {
  		  constructor: Path,
  		  moveTo: function(x, y) {
  		    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
  		  },
  		  closePath: function() {
  		    if (this._x1 !== null) {
  		      this._x1 = this._x0, this._y1 = this._y0;
  		      this._ += "Z";
  		    }
  		  },
  		  lineTo: function(x, y) {
  		    this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
  		  },
  		  quadraticCurveTo: function(x1, y1, x, y) {
  		    this._ += "Q" + (+x1) + "," + (+y1) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  		  },
  		  bezierCurveTo: function(x1, y1, x2, y2, x, y) {
  		    this._ += "C" + (+x1) + "," + (+y1) + "," + (+x2) + "," + (+y2) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  		  },
  		  arcTo: function(x1, y1, x2, y2, r) {
  		    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
  		    var x0 = this._x1,
  		        y0 = this._y1,
  		        x21 = x2 - x1,
  		        y21 = y2 - y1,
  		        x01 = x0 - x1,
  		        y01 = y0 - y1,
  		        l01_2 = x01 * x01 + y01 * y01;

  		    // Is the radius negative? Error.
  		    if (r < 0) throw new Error("negative radius: " + r);

  		    // Is this path empty? Move to (x1,y1).
  		    if (this._x1 === null) {
  		      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
  		    }

  		    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
  		    else if (!(l01_2 > epsilon));

  		    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
  		    // Equivalently, is (x1,y1) coincident with (x2,y2)?
  		    // Or, is the radius zero? Line to (x1,y1).
  		    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
  		      this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
  		    }

  		    // Otherwise, draw an arc!
  		    else {
  		      var x20 = x2 - x0,
  		          y20 = y2 - y0,
  		          l21_2 = x21 * x21 + y21 * y21,
  		          l20_2 = x20 * x20 + y20 * y20,
  		          l21 = Math.sqrt(l21_2),
  		          l01 = Math.sqrt(l01_2),
  		          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
  		          t01 = l / l01,
  		          t21 = l / l21;

  		      // If the start tangent is not coincident with (x0,y0), line to.
  		      if (Math.abs(t01 - 1) > epsilon) {
  		        this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
  		      }

  		      this._ += "A" + r + "," + r + ",0,0," + (+(y01 * x20 > x01 * y20)) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
  		    }
  		  },
  		  arc: function(x, y, r, a0, a1, ccw) {
  		    x = +x, y = +y, r = +r, ccw = !!ccw;
  		    var dx = r * Math.cos(a0),
  		        dy = r * Math.sin(a0),
  		        x0 = x + dx,
  		        y0 = y + dy,
  		        cw = 1 ^ ccw,
  		        da = ccw ? a0 - a1 : a1 - a0;

  		    // Is the radius negative? Error.
  		    if (r < 0) throw new Error("negative radius: " + r);

  		    // Is this path empty? Move to (x0,y0).
  		    if (this._x1 === null) {
  		      this._ += "M" + x0 + "," + y0;
  		    }

  		    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
  		    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
  		      this._ += "L" + x0 + "," + y0;
  		    }

  		    // Is this arc empty? We’re done.
  		    if (!r) return;

  		    // Does the angle go the wrong way? Flip the direction.
  		    if (da < 0) da = da % tau + tau;

  		    // Is this a complete circle? Draw two arcs to complete the circle.
  		    if (da > tauEpsilon) {
  		      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
  		    }

  		    // Is this arc non-empty? Draw an arc!
  		    else if (da > epsilon) {
  		      this._ += "A" + r + "," + r + ",0," + (+(da >= pi)) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
  		    }
  		  },
  		  rect: function(x, y, w, h) {
  		    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + (+w) + "v" + (+h) + "h" + (-w) + "Z";
  		  },
  		  toString: function() {
  		    return this._;
  		  }
  		};

  		exports.path = path;

  		Object.defineProperty(exports, '__esModule', { value: true });

  		}));
  } (d3Path, d3Path.exports));
  	return d3Path.exports;
  }

  (function (module, exports) {
  	// https://d3js.org/d3-shape/ v2.1.0 Copyright 2021 Mike Bostock
  	(function (global, factory) {
  	factory(exports, requireD3Path()) ;
  	}(commonjsGlobal, (function (exports, d3Path) {
  	function constant(x) {
  	  return function constant() {
  	    return x;
  	  };
  	}

  	var abs = Math.abs;
  	var atan2 = Math.atan2;
  	var cos = Math.cos;
  	var max = Math.max;
  	var min = Math.min;
  	var sin = Math.sin;
  	var sqrt = Math.sqrt;

  	var epsilon = 1e-12;
  	var pi = Math.PI;
  	var halfPi = pi / 2;
  	var tau = 2 * pi;

  	function acos(x) {
  	  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
  	}

  	function asin(x) {
  	  return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);
  	}

  	function arcInnerRadius(d) {
  	  return d.innerRadius;
  	}

  	function arcOuterRadius(d) {
  	  return d.outerRadius;
  	}

  	function arcStartAngle(d) {
  	  return d.startAngle;
  	}

  	function arcEndAngle(d) {
  	  return d.endAngle;
  	}

  	function arcPadAngle(d) {
  	  return d && d.padAngle; // Note: optional!
  	}

  	function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
  	  var x10 = x1 - x0, y10 = y1 - y0,
  	      x32 = x3 - x2, y32 = y3 - y2,
  	      t = y32 * x10 - x32 * y10;
  	  if (t * t < epsilon) return;
  	  t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
  	  return [x0 + t * x10, y0 + t * y10];
  	}

  	// Compute perpendicular offset line of length rc.
  	// http://mathworld.wolfram.com/Circle-LineIntersection.html
  	function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
  	  var x01 = x0 - x1,
  	      y01 = y0 - y1,
  	      lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),
  	      ox = lo * y01,
  	      oy = -lo * x01,
  	      x11 = x0 + ox,
  	      y11 = y0 + oy,
  	      x10 = x1 + ox,
  	      y10 = y1 + oy,
  	      x00 = (x11 + x10) / 2,
  	      y00 = (y11 + y10) / 2,
  	      dx = x10 - x11,
  	      dy = y10 - y11,
  	      d2 = dx * dx + dy * dy,
  	      r = r1 - rc,
  	      D = x11 * y10 - x10 * y11,
  	      d = (dy < 0 ? -1 : 1) * sqrt(max(0, r * r * d2 - D * D)),
  	      cx0 = (D * dy - dx * d) / d2,
  	      cy0 = (-D * dx - dy * d) / d2,
  	      cx1 = (D * dy + dx * d) / d2,
  	      cy1 = (-D * dx + dy * d) / d2,
  	      dx0 = cx0 - x00,
  	      dy0 = cy0 - y00,
  	      dx1 = cx1 - x00,
  	      dy1 = cy1 - y00;

  	  // Pick the closer of the two intersection points.
  	  // TODO Is there a faster way to determine which intersection to use?
  	  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;

  	  return {
  	    cx: cx0,
  	    cy: cy0,
  	    x01: -ox,
  	    y01: -oy,
  	    x11: cx0 * (r1 / r - 1),
  	    y11: cy0 * (r1 / r - 1)
  	  };
  	}

  	function arc() {
  	  var innerRadius = arcInnerRadius,
  	      outerRadius = arcOuterRadius,
  	      cornerRadius = constant(0),
  	      padRadius = null,
  	      startAngle = arcStartAngle,
  	      endAngle = arcEndAngle,
  	      padAngle = arcPadAngle,
  	      context = null;

  	  function arc() {
  	    var buffer,
  	        r,
  	        r0 = +innerRadius.apply(this, arguments),
  	        r1 = +outerRadius.apply(this, arguments),
  	        a0 = startAngle.apply(this, arguments) - halfPi,
  	        a1 = endAngle.apply(this, arguments) - halfPi,
  	        da = abs(a1 - a0),
  	        cw = a1 > a0;

  	    if (!context) context = buffer = d3Path.path();

  	    // Ensure that the outer radius is always larger than the inner radius.
  	    if (r1 < r0) r = r1, r1 = r0, r0 = r;

  	    // Is it a point?
  	    if (!(r1 > epsilon)) context.moveTo(0, 0);

  	    // Or is it a circle or annulus?
  	    else if (da > tau - epsilon) {
  	      context.moveTo(r1 * cos(a0), r1 * sin(a0));
  	      context.arc(0, 0, r1, a0, a1, !cw);
  	      if (r0 > epsilon) {
  	        context.moveTo(r0 * cos(a1), r0 * sin(a1));
  	        context.arc(0, 0, r0, a1, a0, cw);
  	      }
  	    }

  	    // Or is it a circular or annular sector?
  	    else {
  	      var a01 = a0,
  	          a11 = a1,
  	          a00 = a0,
  	          a10 = a1,
  	          da0 = da,
  	          da1 = da,
  	          ap = padAngle.apply(this, arguments) / 2,
  	          rp = (ap > epsilon) && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),
  	          rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
  	          rc0 = rc,
  	          rc1 = rc,
  	          t0,
  	          t1;

  	      // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
  	      if (rp > epsilon) {
  	        var p0 = asin(rp / r0 * sin(ap)),
  	            p1 = asin(rp / r1 * sin(ap));
  	        if ((da0 -= p0 * 2) > epsilon) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;
  	        else da0 = 0, a00 = a10 = (a0 + a1) / 2;
  	        if ((da1 -= p1 * 2) > epsilon) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;
  	        else da1 = 0, a01 = a11 = (a0 + a1) / 2;
  	      }

  	      var x01 = r1 * cos(a01),
  	          y01 = r1 * sin(a01),
  	          x10 = r0 * cos(a10),
  	          y10 = r0 * sin(a10);

  	      // Apply rounded corners?
  	      if (rc > epsilon) {
  	        var x11 = r1 * cos(a11),
  	            y11 = r1 * sin(a11),
  	            x00 = r0 * cos(a00),
  	            y00 = r0 * sin(a00),
  	            oc;

  	        // Restrict the corner radius according to the sector angle.
  	        if (da < pi && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {
  	          var ax = x01 - oc[0],
  	              ay = y01 - oc[1],
  	              bx = x11 - oc[0],
  	              by = y11 - oc[1],
  	              kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),
  	              lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
  	          rc0 = min(rc, (r0 - lc) / (kc - 1));
  	          rc1 = min(rc, (r1 - lc) / (kc + 1));
  	        }
  	      }

  	      // Is the sector collapsed to a line?
  	      if (!(da1 > epsilon)) context.moveTo(x01, y01);

  	      // Does the sector’s outer ring have rounded corners?
  	      else if (rc1 > epsilon) {
  	        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
  	        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);

  	        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);

  	        // Have the corners merged?
  	        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);

  	        // Otherwise, draw the two corners and the ring.
  	        else {
  	          context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
  	          context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
  	          context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
  	        }
  	      }

  	      // Or is the outer ring just a circular arc?
  	      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);

  	      // Is there no inner ring, and it’s a circular sector?
  	      // Or perhaps it’s an annular sector collapsed due to padding?
  	      if (!(r0 > epsilon) || !(da0 > epsilon)) context.lineTo(x10, y10);

  	      // Does the sector’s inner ring (or point) have rounded corners?
  	      else if (rc0 > epsilon) {
  	        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
  	        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);

  	        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);

  	        // Have the corners merged?
  	        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);

  	        // Otherwise, draw the two corners and the ring.
  	        else {
  	          context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
  	          context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
  	          context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
  	        }
  	      }

  	      // Or is the inner ring just a circular arc?
  	      else context.arc(0, 0, r0, a10, a00, cw);
  	    }

  	    context.closePath();

  	    if (buffer) return context = null, buffer + "" || null;
  	  }

  	  arc.centroid = function() {
  	    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
  	        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;
  	    return [cos(a) * r, sin(a) * r];
  	  };

  	  arc.innerRadius = function(_) {
  	    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant(+_), arc) : innerRadius;
  	  };

  	  arc.outerRadius = function(_) {
  	    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant(+_), arc) : outerRadius;
  	  };

  	  arc.cornerRadius = function(_) {
  	    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant(+_), arc) : cornerRadius;
  	  };

  	  arc.padRadius = function(_) {
  	    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant(+_), arc) : padRadius;
  	  };

  	  arc.startAngle = function(_) {
  	    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), arc) : startAngle;
  	  };

  	  arc.endAngle = function(_) {
  	    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), arc) : endAngle;
  	  };

  	  arc.padAngle = function(_) {
  	    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant(+_), arc) : padAngle;
  	  };

  	  arc.context = function(_) {
  	    return arguments.length ? ((context = _ == null ? null : _), arc) : context;
  	  };

  	  return arc;
  	}

  	var slice = Array.prototype.slice;

  	function array(x) {
  	  return typeof x === "object" && "length" in x
  	    ? x // Array, TypedArray, NodeList, array-like
  	    : Array.from(x); // Map, Set, iterable, string, or anything else
  	}

  	function Linear(context) {
  	  this._context = context;
  	}

  	Linear.prototype = {
  	  areaStart: function() {
  	    this._line = 0;
  	  },
  	  areaEnd: function() {
  	    this._line = NaN;
  	  },
  	  lineStart: function() {
  	    this._point = 0;
  	  },
  	  lineEnd: function() {
  	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
  	    this._line = 1 - this._line;
  	  },
  	  point: function(x, y) {
  	    x = +x, y = +y;
  	    switch (this._point) {
  	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
  	      case 1: this._point = 2; // proceed
  	      default: this._context.lineTo(x, y); break;
  	    }
  	  }
  	};

  	function curveLinear(context) {
  	  return new Linear(context);
  	}

  	function x(p) {
  	  return p[0];
  	}

  	function y(p) {
  	  return p[1];
  	}

  	function line(x$1, y$1) {
  	  var defined = constant(true),
  	      context = null,
  	      curve = curveLinear,
  	      output = null;

  	  x$1 = typeof x$1 === "function" ? x$1 : (x$1 === undefined) ? x : constant(x$1);
  	  y$1 = typeof y$1 === "function" ? y$1 : (y$1 === undefined) ? y : constant(y$1);

  	  function line(data) {
  	    var i,
  	        n = (data = array(data)).length,
  	        d,
  	        defined0 = false,
  	        buffer;

  	    if (context == null) output = curve(buffer = d3Path.path());

  	    for (i = 0; i <= n; ++i) {
  	      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
  	        if (defined0 = !defined0) output.lineStart();
  	        else output.lineEnd();
  	      }
  	      if (defined0) output.point(+x$1(d, i, data), +y$1(d, i, data));
  	    }

  	    if (buffer) return output = null, buffer + "" || null;
  	  }

  	  line.x = function(_) {
  	    return arguments.length ? (x$1 = typeof _ === "function" ? _ : constant(+_), line) : x$1;
  	  };

  	  line.y = function(_) {
  	    return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant(+_), line) : y$1;
  	  };

  	  line.defined = function(_) {
  	    return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), line) : defined;
  	  };

  	  line.curve = function(_) {
  	    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
  	  };

  	  line.context = function(_) {
  	    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
  	  };

  	  return line;
  	}

  	function area(x0, y0, y1) {
  	  var x1 = null,
  	      defined = constant(true),
  	      context = null,
  	      curve = curveLinear,
  	      output = null;

  	  x0 = typeof x0 === "function" ? x0 : (x0 === undefined) ? x : constant(+x0);
  	  y0 = typeof y0 === "function" ? y0 : (y0 === undefined) ? constant(0) : constant(+y0);
  	  y1 = typeof y1 === "function" ? y1 : (y1 === undefined) ? y : constant(+y1);

  	  function area(data) {
  	    var i,
  	        j,
  	        k,
  	        n = (data = array(data)).length,
  	        d,
  	        defined0 = false,
  	        buffer,
  	        x0z = new Array(n),
  	        y0z = new Array(n);

  	    if (context == null) output = curve(buffer = d3Path.path());

  	    for (i = 0; i <= n; ++i) {
  	      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
  	        if (defined0 = !defined0) {
  	          j = i;
  	          output.areaStart();
  	          output.lineStart();
  	        } else {
  	          output.lineEnd();
  	          output.lineStart();
  	          for (k = i - 1; k >= j; --k) {
  	            output.point(x0z[k], y0z[k]);
  	          }
  	          output.lineEnd();
  	          output.areaEnd();
  	        }
  	      }
  	      if (defined0) {
  	        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
  	        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
  	      }
  	    }

  	    if (buffer) return output = null, buffer + "" || null;
  	  }

  	  function arealine() {
  	    return line().defined(defined).curve(curve).context(context);
  	  }

  	  area.x = function(_) {
  	    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), x1 = null, area) : x0;
  	  };

  	  area.x0 = function(_) {
  	    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), area) : x0;
  	  };

  	  area.x1 = function(_) {
  	    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area) : x1;
  	  };

  	  area.y = function(_) {
  	    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), y1 = null, area) : y0;
  	  };

  	  area.y0 = function(_) {
  	    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), area) : y0;
  	  };

  	  area.y1 = function(_) {
  	    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area) : y1;
  	  };

  	  area.lineX0 =
  	  area.lineY0 = function() {
  	    return arealine().x(x0).y(y0);
  	  };

  	  area.lineY1 = function() {
  	    return arealine().x(x0).y(y1);
  	  };

  	  area.lineX1 = function() {
  	    return arealine().x(x1).y(y0);
  	  };

  	  area.defined = function(_) {
  	    return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), area) : defined;
  	  };

  	  area.curve = function(_) {
  	    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
  	  };

  	  area.context = function(_) {
  	    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
  	  };

  	  return area;
  	}

  	function descending$1(a, b) {
  	  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
  	}

  	function identity(d) {
  	  return d;
  	}

  	function pie() {
  	  var value = identity,
  	      sortValues = descending$1,
  	      sort = null,
  	      startAngle = constant(0),
  	      endAngle = constant(tau),
  	      padAngle = constant(0);

  	  function pie(data) {
  	    var i,
  	        n = (data = array(data)).length,
  	        j,
  	        k,
  	        sum = 0,
  	        index = new Array(n),
  	        arcs = new Array(n),
  	        a0 = +startAngle.apply(this, arguments),
  	        da = Math.min(tau, Math.max(-tau, endAngle.apply(this, arguments) - a0)),
  	        a1,
  	        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),
  	        pa = p * (da < 0 ? -1 : 1),
  	        v;

  	    for (i = 0; i < n; ++i) {
  	      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
  	        sum += v;
  	      }
  	    }

  	    // Optionally sort the arcs by previously-computed values or by data.
  	    if (sortValues != null) index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); });
  	    else if (sort != null) index.sort(function(i, j) { return sort(data[i], data[j]); });

  	    // Compute the arcs! They are stored in the original data's order.
  	    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
  	      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
  	        data: data[j],
  	        index: i,
  	        value: v,
  	        startAngle: a0,
  	        endAngle: a1,
  	        padAngle: p
  	      };
  	    }

  	    return arcs;
  	  }

  	  pie.value = function(_) {
  	    return arguments.length ? (value = typeof _ === "function" ? _ : constant(+_), pie) : value;
  	  };

  	  pie.sortValues = function(_) {
  	    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
  	  };

  	  pie.sort = function(_) {
  	    return arguments.length ? (sort = _, sortValues = null, pie) : sort;
  	  };

  	  pie.startAngle = function(_) {
  	    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), pie) : startAngle;
  	  };

  	  pie.endAngle = function(_) {
  	    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), pie) : endAngle;
  	  };

  	  pie.padAngle = function(_) {
  	    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant(+_), pie) : padAngle;
  	  };

  	  return pie;
  	}

  	var curveRadialLinear = curveRadial$1(curveLinear);

  	function Radial(curve) {
  	  this._curve = curve;
  	}

  	Radial.prototype = {
  	  areaStart: function() {
  	    this._curve.areaStart();
  	  },
  	  areaEnd: function() {
  	    this._curve.areaEnd();
  	  },
  	  lineStart: function() {
  	    this._curve.lineStart();
  	  },
  	  lineEnd: function() {
  	    this._curve.lineEnd();
  	  },
  	  point: function(a, r) {
  	    this._curve.point(r * Math.sin(a), r * -Math.cos(a));
  	  }
  	};

  	function curveRadial$1(curve) {

  	  function radial(context) {
  	    return new Radial(curve(context));
  	  }

  	  radial._curve = curve;

  	  return radial;
  	}

  	function lineRadial(l) {
  	  var c = l.curve;

  	  l.angle = l.x, delete l.x;
  	  l.radius = l.y, delete l.y;

  	  l.curve = function(_) {
  	    return arguments.length ? c(curveRadial$1(_)) : c()._curve;
  	  };

  	  return l;
  	}

  	function lineRadial$1() {
  	  return lineRadial(line().curve(curveRadialLinear));
  	}

  	function areaRadial() {
  	  var a = area().curve(curveRadialLinear),
  	      c = a.curve,
  	      x0 = a.lineX0,
  	      x1 = a.lineX1,
  	      y0 = a.lineY0,
  	      y1 = a.lineY1;

  	  a.angle = a.x, delete a.x;
  	  a.startAngle = a.x0, delete a.x0;
  	  a.endAngle = a.x1, delete a.x1;
  	  a.radius = a.y, delete a.y;
  	  a.innerRadius = a.y0, delete a.y0;
  	  a.outerRadius = a.y1, delete a.y1;
  	  a.lineStartAngle = function() { return lineRadial(x0()); }, delete a.lineX0;
  	  a.lineEndAngle = function() { return lineRadial(x1()); }, delete a.lineX1;
  	  a.lineInnerRadius = function() { return lineRadial(y0()); }, delete a.lineY0;
  	  a.lineOuterRadius = function() { return lineRadial(y1()); }, delete a.lineY1;

  	  a.curve = function(_) {
  	    return arguments.length ? c(curveRadial$1(_)) : c()._curve;
  	  };

  	  return a;
  	}

  	function pointRadial(x, y) {
  	  return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];
  	}

  	function linkSource(d) {
  	  return d.source;
  	}

  	function linkTarget(d) {
  	  return d.target;
  	}

  	function link(curve) {
  	  var source = linkSource,
  	      target = linkTarget,
  	      x$1 = x,
  	      y$1 = y,
  	      context = null;

  	  function link() {
  	    var buffer, argv = slice.call(arguments), s = source.apply(this, argv), t = target.apply(this, argv);
  	    if (!context) context = buffer = d3Path.path();
  	    curve(context, +x$1.apply(this, (argv[0] = s, argv)), +y$1.apply(this, argv), +x$1.apply(this, (argv[0] = t, argv)), +y$1.apply(this, argv));
  	    if (buffer) return context = null, buffer + "" || null;
  	  }

  	  link.source = function(_) {
  	    return arguments.length ? (source = _, link) : source;
  	  };

  	  link.target = function(_) {
  	    return arguments.length ? (target = _, link) : target;
  	  };

  	  link.x = function(_) {
  	    return arguments.length ? (x$1 = typeof _ === "function" ? _ : constant(+_), link) : x$1;
  	  };

  	  link.y = function(_) {
  	    return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant(+_), link) : y$1;
  	  };

  	  link.context = function(_) {
  	    return arguments.length ? ((context = _ == null ? null : _), link) : context;
  	  };

  	  return link;
  	}

  	function curveHorizontal(context, x0, y0, x1, y1) {
  	  context.moveTo(x0, y0);
  	  context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);
  	}

  	function curveVertical(context, x0, y0, x1, y1) {
  	  context.moveTo(x0, y0);
  	  context.bezierCurveTo(x0, y0 = (y0 + y1) / 2, x1, y0, x1, y1);
  	}

  	function curveRadial(context, x0, y0, x1, y1) {
  	  var p0 = pointRadial(x0, y0),
  	      p1 = pointRadial(x0, y0 = (y0 + y1) / 2),
  	      p2 = pointRadial(x1, y0),
  	      p3 = pointRadial(x1, y1);
  	  context.moveTo(p0[0], p0[1]);
  	  context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);
  	}

  	function linkHorizontal() {
  	  return link(curveHorizontal);
  	}

  	function linkVertical() {
  	  return link(curveVertical);
  	}

  	function linkRadial() {
  	  var l = link(curveRadial);
  	  l.angle = l.x, delete l.x;
  	  l.radius = l.y, delete l.y;
  	  return l;
  	}

  	var circle = {
  	  draw: function(context, size) {
  	    var r = Math.sqrt(size / pi);
  	    context.moveTo(r, 0);
  	    context.arc(0, 0, r, 0, tau);
  	  }
  	};

  	var cross = {
  	  draw: function(context, size) {
  	    var r = Math.sqrt(size / 5) / 2;
  	    context.moveTo(-3 * r, -r);
  	    context.lineTo(-r, -r);
  	    context.lineTo(-r, -3 * r);
  	    context.lineTo(r, -3 * r);
  	    context.lineTo(r, -r);
  	    context.lineTo(3 * r, -r);
  	    context.lineTo(3 * r, r);
  	    context.lineTo(r, r);
  	    context.lineTo(r, 3 * r);
  	    context.lineTo(-r, 3 * r);
  	    context.lineTo(-r, r);
  	    context.lineTo(-3 * r, r);
  	    context.closePath();
  	  }
  	};

  	var tan30 = Math.sqrt(1 / 3),
  	    tan30_2 = tan30 * 2;

  	var diamond = {
  	  draw: function(context, size) {
  	    var y = Math.sqrt(size / tan30_2),
  	        x = y * tan30;
  	    context.moveTo(0, -y);
  	    context.lineTo(x, 0);
  	    context.lineTo(0, y);
  	    context.lineTo(-x, 0);
  	    context.closePath();
  	  }
  	};

  	var ka = 0.89081309152928522810,
  	    kr = Math.sin(pi / 10) / Math.sin(7 * pi / 10),
  	    kx = Math.sin(tau / 10) * kr,
  	    ky = -Math.cos(tau / 10) * kr;

  	var star = {
  	  draw: function(context, size) {
  	    var r = Math.sqrt(size * ka),
  	        x = kx * r,
  	        y = ky * r;
  	    context.moveTo(0, -r);
  	    context.lineTo(x, y);
  	    for (var i = 1; i < 5; ++i) {
  	      var a = tau * i / 5,
  	          c = Math.cos(a),
  	          s = Math.sin(a);
  	      context.lineTo(s * r, -c * r);
  	      context.lineTo(c * x - s * y, s * x + c * y);
  	    }
  	    context.closePath();
  	  }
  	};

  	var square = {
  	  draw: function(context, size) {
  	    var w = Math.sqrt(size),
  	        x = -w / 2;
  	    context.rect(x, x, w, w);
  	  }
  	};

  	var sqrt3 = Math.sqrt(3);

  	var triangle = {
  	  draw: function(context, size) {
  	    var y = -Math.sqrt(size / (sqrt3 * 3));
  	    context.moveTo(0, y * 2);
  	    context.lineTo(-sqrt3 * y, -y);
  	    context.lineTo(sqrt3 * y, -y);
  	    context.closePath();
  	  }
  	};

  	var c = -0.5,
  	    s = Math.sqrt(3) / 2,
  	    k = 1 / Math.sqrt(12),
  	    a = (k / 2 + 1) * 3;

  	var wye = {
  	  draw: function(context, size) {
  	    var r = Math.sqrt(size / a),
  	        x0 = r / 2,
  	        y0 = r * k,
  	        x1 = x0,
  	        y1 = r * k + r,
  	        x2 = -x1,
  	        y2 = y1;
  	    context.moveTo(x0, y0);
  	    context.lineTo(x1, y1);
  	    context.lineTo(x2, y2);
  	    context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
  	    context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
  	    context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
  	    context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
  	    context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
  	    context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
  	    context.closePath();
  	  }
  	};

  	var symbols = [
  	  circle,
  	  cross,
  	  diamond,
  	  square,
  	  star,
  	  triangle,
  	  wye
  	];

  	function symbol(type, size) {
  	  var context = null;
  	  type = typeof type === "function" ? type : constant(type || circle);
  	  size = typeof size === "function" ? size : constant(size === undefined ? 64 : +size);

  	  function symbol() {
  	    var buffer;
  	    if (!context) context = buffer = d3Path.path();
  	    type.apply(this, arguments).draw(context, +size.apply(this, arguments));
  	    if (buffer) return context = null, buffer + "" || null;
  	  }

  	  symbol.type = function(_) {
  	    return arguments.length ? (type = typeof _ === "function" ? _ : constant(_), symbol) : type;
  	  };

  	  symbol.size = function(_) {
  	    return arguments.length ? (size = typeof _ === "function" ? _ : constant(+_), symbol) : size;
  	  };

  	  symbol.context = function(_) {
  	    return arguments.length ? (context = _ == null ? null : _, symbol) : context;
  	  };

  	  return symbol;
  	}

  	function noop() {}

  	function point$3(that, x, y) {
  	  that._context.bezierCurveTo(
  	    (2 * that._x0 + that._x1) / 3,
  	    (2 * that._y0 + that._y1) / 3,
  	    (that._x0 + 2 * that._x1) / 3,
  	    (that._y0 + 2 * that._y1) / 3,
  	    (that._x0 + 4 * that._x1 + x) / 6,
  	    (that._y0 + 4 * that._y1 + y) / 6
  	  );
  	}

  	function Basis(context) {
  	  this._context = context;
  	}

  	Basis.prototype = {
  	  areaStart: function() {
  	    this._line = 0;
  	  },
  	  areaEnd: function() {
  	    this._line = NaN;
  	  },
  	  lineStart: function() {
  	    this._x0 = this._x1 =
  	    this._y0 = this._y1 = NaN;
  	    this._point = 0;
  	  },
  	  lineEnd: function() {
  	    switch (this._point) {
  	      case 3: point$3(this, this._x1, this._y1); // proceed
  	      case 2: this._context.lineTo(this._x1, this._y1); break;
  	    }
  	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
  	    this._line = 1 - this._line;
  	  },
  	  point: function(x, y) {
  	    x = +x, y = +y;
  	    switch (this._point) {
  	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
  	      case 1: this._point = 2; break;
  	      case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed
  	      default: point$3(this, x, y); break;
  	    }
  	    this._x0 = this._x1, this._x1 = x;
  	    this._y0 = this._y1, this._y1 = y;
  	  }
  	};

  	function basis(context) {
  	  return new Basis(context);
  	}

  	function BasisClosed(context) {
  	  this._context = context;
  	}

  	BasisClosed.prototype = {
  	  areaStart: noop,
  	  areaEnd: noop,
  	  lineStart: function() {
  	    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =
  	    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
  	    this._point = 0;
  	  },
  	  lineEnd: function() {
  	    switch (this._point) {
  	      case 1: {
  	        this._context.moveTo(this._x2, this._y2);
  	        this._context.closePath();
  	        break;
  	      }
  	      case 2: {
  	        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
  	        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
  	        this._context.closePath();
  	        break;
  	      }
  	      case 3: {
  	        this.point(this._x2, this._y2);
  	        this.point(this._x3, this._y3);
  	        this.point(this._x4, this._y4);
  	        break;
  	      }
  	    }
  	  },
  	  point: function(x, y) {
  	    x = +x, y = +y;
  	    switch (this._point) {
  	      case 0: this._point = 1; this._x2 = x, this._y2 = y; break;
  	      case 1: this._point = 2; this._x3 = x, this._y3 = y; break;
  	      case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;
  	      default: point$3(this, x, y); break;
  	    }
  	    this._x0 = this._x1, this._x1 = x;
  	    this._y0 = this._y1, this._y1 = y;
  	  }
  	};

  	function basisClosed(context) {
  	  return new BasisClosed(context);
  	}

  	function BasisOpen(context) {
  	  this._context = context;
  	}

  	BasisOpen.prototype = {
  	  areaStart: function() {
  	    this._line = 0;
  	  },
  	  areaEnd: function() {
  	    this._line = NaN;
  	  },
  	  lineStart: function() {
  	    this._x0 = this._x1 =
  	    this._y0 = this._y1 = NaN;
  	    this._point = 0;
  	  },
  	  lineEnd: function() {
  	    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
  	    this._line = 1 - this._line;
  	  },
  	  point: function(x, y) {
  	    x = +x, y = +y;
  	    switch (this._point) {
  	      case 0: this._point = 1; break;
  	      case 1: this._point = 2; break;
  	      case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;
  	      case 3: this._point = 4; // proceed
  	      default: point$3(this, x, y); break;
  	    }
  	    this._x0 = this._x1, this._x1 = x;
  	    this._y0 = this._y1, this._y1 = y;
  	  }
  	};

  	function basisOpen(context) {
  	  return new BasisOpen(context);
  	}

  	class Bump {
  	  constructor(context, x) {
  	    this._context = context;
  	    this._x = x;
  	  }
  	  areaStart() {
  	    this._line = 0;
  	  }
  	  areaEnd() {
  	    this._line = NaN;
  	  }
  	  lineStart() {
  	    this._point = 0;
  	  }
  	  lineEnd() {
  	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
  	    this._line = 1 - this._line;
  	  }
  	  point(x, y) {
  	    x = +x, y = +y;
  	    switch (this._point) {
  	      case 0: {
  	        this._point = 1;
  	        if (this._line) this._context.lineTo(x, y);
  	        else this._context.moveTo(x, y);
  	        break;
  	      }
  	      case 1: this._point = 2; // proceed
  	      default: {
  	        if (this._x) this._context.bezierCurveTo(this._x0 = (this._x0 + x) / 2, this._y0, this._x0, y, x, y);
  	        else this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + y) / 2, x, this._y0, x, y);
  	        break;
  	      }
  	    }
  	    this._x0 = x, this._y0 = y;
  	  }
  	}

  	function bumpX(context) {
  	  return new Bump(context, true);
  	}

  	function bumpY(context) {
  	  return new Bump(context, false);
  	}

  	function Bundle(context, beta) {
  	  this._basis = new Basis(context);
  	  this._beta = beta;
  	}

  	Bundle.prototype = {
  	  lineStart: function() {
  	    this._x = [];
  	    this._y = [];
  	    this._basis.lineStart();
  	  },
  	  lineEnd: function() {
  	    var x = this._x,
  	        y = this._y,
  	        j = x.length - 1;

  	    if (j > 0) {
  	      var x0 = x[0],
  	          y0 = y[0],
  	          dx = x[j] - x0,
  	          dy = y[j] - y0,
  	          i = -1,
  	          t;

  	      while (++i <= j) {
  	        t = i / j;
  	        this._basis.point(
  	          this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),
  	          this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)
  	        );
  	      }
  	    }

  	    this._x = this._y = null;
  	    this._basis.lineEnd();
  	  },
  	  point: function(x, y) {
  	    this._x.push(+x);
  	    this._y.push(+y);
  	  }
  	};

  	var bundle = (function custom(beta) {

  	  function bundle(context) {
  	    return beta === 1 ? new Basis(context) : new Bundle(context, beta);
  	  }

  	  bundle.beta = function(beta) {
  	    return custom(+beta);
  	  };

  	  return bundle;
  	})(0.85);

  	function point$2(that, x, y) {
  	  that._context.bezierCurveTo(
  	    that._x1 + that._k * (that._x2 - that._x0),
  	    that._y1 + that._k * (that._y2 - that._y0),
  	    that._x2 + that._k * (that._x1 - x),
  	    that._y2 + that._k * (that._y1 - y),
  	    that._x2,
  	    that._y2
  	  );
  	}

  	function Cardinal(context, tension) {
  	  this._context = context;
  	  this._k = (1 - tension) / 6;
  	}

  	Cardinal.prototype = {
  	  areaStart: function() {
  	    this._line = 0;
  	  },
  	  areaEnd: function() {
  	    this._line = NaN;
  	  },
  	  lineStart: function() {
  	    this._x0 = this._x1 = this._x2 =
  	    this._y0 = this._y1 = this._y2 = NaN;
  	    this._point = 0;
  	  },
  	  lineEnd: function() {
  	    switch (this._point) {
  	      case 2: this._context.lineTo(this._x2, this._y2); break;
  	      case 3: point$2(this, this._x1, this._y1); break;
  	    }
  	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
  	    this._line = 1 - this._line;
  	  },
  	  point: function(x, y) {
  	    x = +x, y = +y;
  	    switch (this._point) {
  	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
  	      case 1: this._point = 2; this._x1 = x, this._y1 = y; break;
  	      case 2: this._point = 3; // proceed
  	      default: point$2(this, x, y); break;
  	    }
  	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
  	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  	  }
  	};

  	var cardinal = (function custom(tension) {

  	  function cardinal(context) {
  	    return new Cardinal(context, tension);
  	  }

  	  cardinal.tension = function(tension) {
  	    return custom(+tension);
  	  };

  	  return cardinal;
  	})(0);

  	function CardinalClosed(context, tension) {
  	  this._context = context;
  	  this._k = (1 - tension) / 6;
  	}

  	CardinalClosed.prototype = {
  	  areaStart: noop,
  	  areaEnd: noop,
  	  lineStart: function() {
  	    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
  	    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
  	    this._point = 0;
  	  },
  	  lineEnd: function() {
  	    switch (this._point) {
  	      case 1: {
  	        this._context.moveTo(this._x3, this._y3);
  	        this._context.closePath();
  	        break;
  	      }
  	      case 2: {
  	        this._context.lineTo(this._x3, this._y3);
  	        this._context.closePath();
  	        break;
  	      }
  	      case 3: {
  	        this.point(this._x3, this._y3);
  	        this.point(this._x4, this._y4);
  	        this.point(this._x5, this._y5);
  	        break;
  	      }
  	    }
  	  },
  	  point: function(x, y) {
  	    x = +x, y = +y;
  	    switch (this._point) {
  	      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
  	      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
  	      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
  	      default: point$2(this, x, y); break;
  	    }
  	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
  	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  	  }
  	};

  	var cardinalClosed = (function custom(tension) {

  	  function cardinal(context) {
  	    return new CardinalClosed(context, tension);
  	  }

  	  cardinal.tension = function(tension) {
  	    return custom(+tension);
  	  };

  	  return cardinal;
  	})(0);

  	function CardinalOpen(context, tension) {
  	  this._context = context;
  	  this._k = (1 - tension) / 6;
  	}

  	CardinalOpen.prototype = {
  	  areaStart: function() {
  	    this._line = 0;
  	  },
  	  areaEnd: function() {
  	    this._line = NaN;
  	  },
  	  lineStart: function() {
  	    this._x0 = this._x1 = this._x2 =
  	    this._y0 = this._y1 = this._y2 = NaN;
  	    this._point = 0;
  	  },
  	  lineEnd: function() {
  	    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
  	    this._line = 1 - this._line;
  	  },
  	  point: function(x, y) {
  	    x = +x, y = +y;
  	    switch (this._point) {
  	      case 0: this._point = 1; break;
  	      case 1: this._point = 2; break;
  	      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
  	      case 3: this._point = 4; // proceed
  	      default: point$2(this, x, y); break;
  	    }
  	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
  	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  	  }
  	};

  	var cardinalOpen = (function custom(tension) {

  	  function cardinal(context) {
  	    return new CardinalOpen(context, tension);
  	  }

  	  cardinal.tension = function(tension) {
  	    return custom(+tension);
  	  };

  	  return cardinal;
  	})(0);

  	function point$1(that, x, y) {
  	  var x1 = that._x1,
  	      y1 = that._y1,
  	      x2 = that._x2,
  	      y2 = that._y2;

  	  if (that._l01_a > epsilon) {
  	    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
  	        n = 3 * that._l01_a * (that._l01_a + that._l12_a);
  	    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
  	    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
  	  }

  	  if (that._l23_a > epsilon) {
  	    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
  	        m = 3 * that._l23_a * (that._l23_a + that._l12_a);
  	    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
  	    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
  	  }

  	  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
  	}

  	function CatmullRom(context, alpha) {
  	  this._context = context;
  	  this._alpha = alpha;
  	}

  	CatmullRom.prototype = {
  	  areaStart: function() {
  	    this._line = 0;
  	  },
  	  areaEnd: function() {
  	    this._line = NaN;
  	  },
  	  lineStart: function() {
  	    this._x0 = this._x1 = this._x2 =
  	    this._y0 = this._y1 = this._y2 = NaN;
  	    this._l01_a = this._l12_a = this._l23_a =
  	    this._l01_2a = this._l12_2a = this._l23_2a =
  	    this._point = 0;
  	  },
  	  lineEnd: function() {
  	    switch (this._point) {
  	      case 2: this._context.lineTo(this._x2, this._y2); break;
  	      case 3: this.point(this._x2, this._y2); break;
  	    }
  	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
  	    this._line = 1 - this._line;
  	  },
  	  point: function(x, y) {
  	    x = +x, y = +y;

  	    if (this._point) {
  	      var x23 = this._x2 - x,
  	          y23 = this._y2 - y;
  	      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
  	    }

  	    switch (this._point) {
  	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
  	      case 1: this._point = 2; break;
  	      case 2: this._point = 3; // proceed
  	      default: point$1(this, x, y); break;
  	    }

  	    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
  	    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
  	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
  	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  	  }
  	};

  	var catmullRom = (function custom(alpha) {

  	  function catmullRom(context) {
  	    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
  	  }

  	  catmullRom.alpha = function(alpha) {
  	    return custom(+alpha);
  	  };

  	  return catmullRom;
  	})(0.5);

  	function CatmullRomClosed(context, alpha) {
  	  this._context = context;
  	  this._alpha = alpha;
  	}

  	CatmullRomClosed.prototype = {
  	  areaStart: noop,
  	  areaEnd: noop,
  	  lineStart: function() {
  	    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
  	    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
  	    this._l01_a = this._l12_a = this._l23_a =
  	    this._l01_2a = this._l12_2a = this._l23_2a =
  	    this._point = 0;
  	  },
  	  lineEnd: function() {
  	    switch (this._point) {
  	      case 1: {
  	        this._context.moveTo(this._x3, this._y3);
  	        this._context.closePath();
  	        break;
  	      }
  	      case 2: {
  	        this._context.lineTo(this._x3, this._y3);
  	        this._context.closePath();
  	        break;
  	      }
  	      case 3: {
  	        this.point(this._x3, this._y3);
  	        this.point(this._x4, this._y4);
  	        this.point(this._x5, this._y5);
  	        break;
  	      }
  	    }
  	  },
  	  point: function(x, y) {
  	    x = +x, y = +y;

  	    if (this._point) {
  	      var x23 = this._x2 - x,
  	          y23 = this._y2 - y;
  	      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
  	    }

  	    switch (this._point) {
  	      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
  	      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
  	      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
  	      default: point$1(this, x, y); break;
  	    }

  	    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
  	    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
  	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
  	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  	  }
  	};

  	var catmullRomClosed = (function custom(alpha) {

  	  function catmullRom(context) {
  	    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
  	  }

  	  catmullRom.alpha = function(alpha) {
  	    return custom(+alpha);
  	  };

  	  return catmullRom;
  	})(0.5);

  	function CatmullRomOpen(context, alpha) {
  	  this._context = context;
  	  this._alpha = alpha;
  	}

  	CatmullRomOpen.prototype = {
  	  areaStart: function() {
  	    this._line = 0;
  	  },
  	  areaEnd: function() {
  	    this._line = NaN;
  	  },
  	  lineStart: function() {
  	    this._x0 = this._x1 = this._x2 =
  	    this._y0 = this._y1 = this._y2 = NaN;
  	    this._l01_a = this._l12_a = this._l23_a =
  	    this._l01_2a = this._l12_2a = this._l23_2a =
  	    this._point = 0;
  	  },
  	  lineEnd: function() {
  	    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
  	    this._line = 1 - this._line;
  	  },
  	  point: function(x, y) {
  	    x = +x, y = +y;

  	    if (this._point) {
  	      var x23 = this._x2 - x,
  	          y23 = this._y2 - y;
  	      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
  	    }

  	    switch (this._point) {
  	      case 0: this._point = 1; break;
  	      case 1: this._point = 2; break;
  	      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
  	      case 3: this._point = 4; // proceed
  	      default: point$1(this, x, y); break;
  	    }

  	    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
  	    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
  	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
  	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  	  }
  	};

  	var catmullRomOpen = (function custom(alpha) {

  	  function catmullRom(context) {
  	    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
  	  }

  	  catmullRom.alpha = function(alpha) {
  	    return custom(+alpha);
  	  };

  	  return catmullRom;
  	})(0.5);

  	function LinearClosed(context) {
  	  this._context = context;
  	}

  	LinearClosed.prototype = {
  	  areaStart: noop,
  	  areaEnd: noop,
  	  lineStart: function() {
  	    this._point = 0;
  	  },
  	  lineEnd: function() {
  	    if (this._point) this._context.closePath();
  	  },
  	  point: function(x, y) {
  	    x = +x, y = +y;
  	    if (this._point) this._context.lineTo(x, y);
  	    else this._point = 1, this._context.moveTo(x, y);
  	  }
  	};

  	function linearClosed(context) {
  	  return new LinearClosed(context);
  	}

  	function sign(x) {
  	  return x < 0 ? -1 : 1;
  	}

  	// Calculate the slopes of the tangents (Hermite-type interpolation) based on
  	// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
  	// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
  	// NOV(II), P. 443, 1990.
  	function slope3(that, x2, y2) {
  	  var h0 = that._x1 - that._x0,
  	      h1 = x2 - that._x1,
  	      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
  	      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
  	      p = (s0 * h1 + s1 * h0) / (h0 + h1);
  	  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
  	}

  	// Calculate a one-sided slope.
  	function slope2(that, t) {
  	  var h = that._x1 - that._x0;
  	  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
  	}

  	// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
  	// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
  	// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
  	function point(that, t0, t1) {
  	  var x0 = that._x0,
  	      y0 = that._y0,
  	      x1 = that._x1,
  	      y1 = that._y1,
  	      dx = (x1 - x0) / 3;
  	  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
  	}

  	function MonotoneX(context) {
  	  this._context = context;
  	}

  	MonotoneX.prototype = {
  	  areaStart: function() {
  	    this._line = 0;
  	  },
  	  areaEnd: function() {
  	    this._line = NaN;
  	  },
  	  lineStart: function() {
  	    this._x0 = this._x1 =
  	    this._y0 = this._y1 =
  	    this._t0 = NaN;
  	    this._point = 0;
  	  },
  	  lineEnd: function() {
  	    switch (this._point) {
  	      case 2: this._context.lineTo(this._x1, this._y1); break;
  	      case 3: point(this, this._t0, slope2(this, this._t0)); break;
  	    }
  	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
  	    this._line = 1 - this._line;
  	  },
  	  point: function(x, y) {
  	    var t1 = NaN;

  	    x = +x, y = +y;
  	    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.
  	    switch (this._point) {
  	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
  	      case 1: this._point = 2; break;
  	      case 2: this._point = 3; point(this, slope2(this, t1 = slope3(this, x, y)), t1); break;
  	      default: point(this, this._t0, t1 = slope3(this, x, y)); break;
  	    }

  	    this._x0 = this._x1, this._x1 = x;
  	    this._y0 = this._y1, this._y1 = y;
  	    this._t0 = t1;
  	  }
  	};

  	function MonotoneY(context) {
  	  this._context = new ReflectContext(context);
  	}

  	(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {
  	  MonotoneX.prototype.point.call(this, y, x);
  	};

  	function ReflectContext(context) {
  	  this._context = context;
  	}

  	ReflectContext.prototype = {
  	  moveTo: function(x, y) { this._context.moveTo(y, x); },
  	  closePath: function() { this._context.closePath(); },
  	  lineTo: function(x, y) { this._context.lineTo(y, x); },
  	  bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }
  	};

  	function monotoneX(context) {
  	  return new MonotoneX(context);
  	}

  	function monotoneY(context) {
  	  return new MonotoneY(context);
  	}

  	function Natural(context) {
  	  this._context = context;
  	}

  	Natural.prototype = {
  	  areaStart: function() {
  	    this._line = 0;
  	  },
  	  areaEnd: function() {
  	    this._line = NaN;
  	  },
  	  lineStart: function() {
  	    this._x = [];
  	    this._y = [];
  	  },
  	  lineEnd: function() {
  	    var x = this._x,
  	        y = this._y,
  	        n = x.length;

  	    if (n) {
  	      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
  	      if (n === 2) {
  	        this._context.lineTo(x[1], y[1]);
  	      } else {
  	        var px = controlPoints(x),
  	            py = controlPoints(y);
  	        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
  	          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
  	        }
  	      }
  	    }

  	    if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();
  	    this._line = 1 - this._line;
  	    this._x = this._y = null;
  	  },
  	  point: function(x, y) {
  	    this._x.push(+x);
  	    this._y.push(+y);
  	  }
  	};

  	// See https://www.particleincell.com/2012/bezier-splines/ for derivation.
  	function controlPoints(x) {
  	  var i,
  	      n = x.length - 1,
  	      m,
  	      a = new Array(n),
  	      b = new Array(n),
  	      r = new Array(n);
  	  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
  	  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
  	  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
  	  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
  	  a[n - 1] = r[n - 1] / b[n - 1];
  	  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];
  	  b[n - 1] = (x[n] + a[n - 1]) / 2;
  	  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];
  	  return [a, b];
  	}

  	function natural(context) {
  	  return new Natural(context);
  	}

  	function Step(context, t) {
  	  this._context = context;
  	  this._t = t;
  	}

  	Step.prototype = {
  	  areaStart: function() {
  	    this._line = 0;
  	  },
  	  areaEnd: function() {
  	    this._line = NaN;
  	  },
  	  lineStart: function() {
  	    this._x = this._y = NaN;
  	    this._point = 0;
  	  },
  	  lineEnd: function() {
  	    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
  	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
  	    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
  	  },
  	  point: function(x, y) {
  	    x = +x, y = +y;
  	    switch (this._point) {
  	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
  	      case 1: this._point = 2; // proceed
  	      default: {
  	        if (this._t <= 0) {
  	          this._context.lineTo(this._x, y);
  	          this._context.lineTo(x, y);
  	        } else {
  	          var x1 = this._x * (1 - this._t) + x * this._t;
  	          this._context.lineTo(x1, this._y);
  	          this._context.lineTo(x1, y);
  	        }
  	        break;
  	      }
  	    }
  	    this._x = x, this._y = y;
  	  }
  	};

  	function step(context) {
  	  return new Step(context, 0.5);
  	}

  	function stepBefore(context) {
  	  return new Step(context, 0);
  	}

  	function stepAfter(context) {
  	  return new Step(context, 1);
  	}

  	function none$1(series, order) {
  	  if (!((n = series.length) > 1)) return;
  	  for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
  	    s0 = s1, s1 = series[order[i]];
  	    for (j = 0; j < m; ++j) {
  	      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
  	    }
  	  }
  	}

  	function none(series) {
  	  var n = series.length, o = new Array(n);
  	  while (--n >= 0) o[n] = n;
  	  return o;
  	}

  	function stackValue(d, key) {
  	  return d[key];
  	}

  	function stackSeries(key) {
  	  const series = [];
  	  series.key = key;
  	  return series;
  	}

  	function stack() {
  	  var keys = constant([]),
  	      order = none,
  	      offset = none$1,
  	      value = stackValue;

  	  function stack(data) {
  	    var sz = Array.from(keys.apply(this, arguments), stackSeries),
  	        i, n = sz.length, j = -1,
  	        oz;

  	    for (const d of data) {
  	      for (i = 0, ++j; i < n; ++i) {
  	        (sz[i][j] = [0, +value(d, sz[i].key, j, data)]).data = d;
  	      }
  	    }

  	    for (i = 0, oz = array(order(sz)); i < n; ++i) {
  	      sz[oz[i]].index = i;
  	    }

  	    offset(sz, oz);
  	    return sz;
  	  }

  	  stack.keys = function(_) {
  	    return arguments.length ? (keys = typeof _ === "function" ? _ : constant(Array.from(_)), stack) : keys;
  	  };

  	  stack.value = function(_) {
  	    return arguments.length ? (value = typeof _ === "function" ? _ : constant(+_), stack) : value;
  	  };

  	  stack.order = function(_) {
  	    return arguments.length ? (order = _ == null ? none : typeof _ === "function" ? _ : constant(Array.from(_)), stack) : order;
  	  };

  	  stack.offset = function(_) {
  	    return arguments.length ? (offset = _ == null ? none$1 : _, stack) : offset;
  	  };

  	  return stack;
  	}

  	function expand(series, order) {
  	  if (!((n = series.length) > 0)) return;
  	  for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
  	    for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;
  	    if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;
  	  }
  	  none$1(series, order);
  	}

  	function diverging(series, order) {
  	  if (!((n = series.length) > 0)) return;
  	  for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {
  	    for (yp = yn = 0, i = 0; i < n; ++i) {
  	      if ((dy = (d = series[order[i]][j])[1] - d[0]) > 0) {
  	        d[0] = yp, d[1] = yp += dy;
  	      } else if (dy < 0) {
  	        d[1] = yn, d[0] = yn += dy;
  	      } else {
  	        d[0] = 0, d[1] = dy;
  	      }
  	    }
  	  }
  	}

  	function silhouette(series, order) {
  	  if (!((n = series.length) > 0)) return;
  	  for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
  	    for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;
  	    s0[j][1] += s0[j][0] = -y / 2;
  	  }
  	  none$1(series, order);
  	}

  	function wiggle(series, order) {
  	  if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;
  	  for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
  	    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
  	      var si = series[order[i]],
  	          sij0 = si[j][1] || 0,
  	          sij1 = si[j - 1][1] || 0,
  	          s3 = (sij0 - sij1) / 2;
  	      for (var k = 0; k < i; ++k) {
  	        var sk = series[order[k]],
  	            skj0 = sk[j][1] || 0,
  	            skj1 = sk[j - 1][1] || 0;
  	        s3 += skj0 - skj1;
  	      }
  	      s1 += sij0, s2 += s3 * sij0;
  	    }
  	    s0[j - 1][1] += s0[j - 1][0] = y;
  	    if (s1) y -= s2 / s1;
  	  }
  	  s0[j - 1][1] += s0[j - 1][0] = y;
  	  none$1(series, order);
  	}

  	function appearance(series) {
  	  var peaks = series.map(peak);
  	  return none(series).sort(function(a, b) { return peaks[a] - peaks[b]; });
  	}

  	function peak(series) {
  	  var i = -1, j = 0, n = series.length, vi, vj = -Infinity;
  	  while (++i < n) if ((vi = +series[i][1]) > vj) vj = vi, j = i;
  	  return j;
  	}

  	function ascending(series) {
  	  var sums = series.map(sum);
  	  return none(series).sort(function(a, b) { return sums[a] - sums[b]; });
  	}

  	function sum(series) {
  	  var s = 0, i = -1, n = series.length, v;
  	  while (++i < n) if (v = +series[i][1]) s += v;
  	  return s;
  	}

  	function descending(series) {
  	  return ascending(series).reverse();
  	}

  	function insideOut(series) {
  	  var n = series.length,
  	      i,
  	      j,
  	      sums = series.map(sum),
  	      order = appearance(series),
  	      top = 0,
  	      bottom = 0,
  	      tops = [],
  	      bottoms = [];

  	  for (i = 0; i < n; ++i) {
  	    j = order[i];
  	    if (top < bottom) {
  	      top += sums[j];
  	      tops.push(j);
  	    } else {
  	      bottom += sums[j];
  	      bottoms.push(j);
  	    }
  	  }

  	  return bottoms.reverse().concat(tops);
  	}

  	function reverse(series) {
  	  return none(series).reverse();
  	}

  	exports.arc = arc;
  	exports.area = area;
  	exports.areaRadial = areaRadial;
  	exports.curveBasis = basis;
  	exports.curveBasisClosed = basisClosed;
  	exports.curveBasisOpen = basisOpen;
  	exports.curveBumpX = bumpX;
  	exports.curveBumpY = bumpY;
  	exports.curveBundle = bundle;
  	exports.curveCardinal = cardinal;
  	exports.curveCardinalClosed = cardinalClosed;
  	exports.curveCardinalOpen = cardinalOpen;
  	exports.curveCatmullRom = catmullRom;
  	exports.curveCatmullRomClosed = catmullRomClosed;
  	exports.curveCatmullRomOpen = catmullRomOpen;
  	exports.curveLinear = curveLinear;
  	exports.curveLinearClosed = linearClosed;
  	exports.curveMonotoneX = monotoneX;
  	exports.curveMonotoneY = monotoneY;
  	exports.curveNatural = natural;
  	exports.curveStep = step;
  	exports.curveStepAfter = stepAfter;
  	exports.curveStepBefore = stepBefore;
  	exports.line = line;
  	exports.lineRadial = lineRadial$1;
  	exports.linkHorizontal = linkHorizontal;
  	exports.linkRadial = linkRadial;
  	exports.linkVertical = linkVertical;
  	exports.pie = pie;
  	exports.pointRadial = pointRadial;
  	exports.radialArea = areaRadial;
  	exports.radialLine = lineRadial$1;
  	exports.stack = stack;
  	exports.stackOffsetDiverging = diverging;
  	exports.stackOffsetExpand = expand;
  	exports.stackOffsetNone = none$1;
  	exports.stackOffsetSilhouette = silhouette;
  	exports.stackOffsetWiggle = wiggle;
  	exports.stackOrderAppearance = appearance;
  	exports.stackOrderAscending = ascending;
  	exports.stackOrderDescending = descending;
  	exports.stackOrderInsideOut = insideOut;
  	exports.stackOrderNone = none;
  	exports.stackOrderReverse = reverse;
  	exports.symbol = symbol;
  	exports.symbolCircle = circle;
  	exports.symbolCross = cross;
  	exports.symbolDiamond = diamond;
  	exports.symbolSquare = square;
  	exports.symbolStar = star;
  	exports.symbolTriangle = triangle;
  	exports.symbolWye = wye;
  	exports.symbols = symbols;

  	Object.defineProperty(exports, '__esModule', { value: true });

  	})));
  } (d3Shape, d3Shape.exports));

  var curveMonotone = {};

  curveMonotone.__esModule = true;
  curveMonotone.monotoneY = curveMonotone.monotoneX = void 0;

  // @ts-nocheck
  function sign(x) {
    return x < 0 ? -1 : 1;
  } // Calculate the slopes of the tangents (Hermite-type interpolation) based on
  // the following paper: Steffen, M. 1990. A Simple Method for Monotonic
  // Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
  // NOV(II), P. 443, 1990.


  function slope3(that, x2, y2) {
    var h0 = that._x1 - that._x0,
        h1 = x2 - that._x1,
        s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
        s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
        p = (s0 * h1 + s1 * h0) / (h0 + h1);
    return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
  } // Calculate a one-sided slope.


  function slope2(that, t) {
    var h = that._x1 - that._x0;
    return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
  } // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
  // "you can express cubic Hermite interpolation in terms of cubic Bézier curves
  // with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".


  function _point(that, t0, t1) {
    var x0 = that._x0,
        y0 = that._y0,
        x1 = that._x1,
        y1 = that._y1,
        dx = (x1 - x0) / 3;

    that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
  }

  function MonotoneX(context) {
    this._context = context;
  }

  MonotoneX.prototype = {
    areaStart: function areaStart() {
      this._line = 0;
    },
    areaEnd: function areaEnd() {
      this._line = NaN;
    },
    lineStart: function lineStart() {
      this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
      this._point = 0;
    },
    lineEnd: function lineEnd() {
      switch (this._point) {
        case 2:
          this._context.lineTo(this._x1, this._y1);

          break;

        case 3:
          _point(this, this._t0, slope2(this, this._t0));

          break;
      }

      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function point(x, y) {
      var t1 = NaN;
      x = +x, y = +y;
      if (x === this._x1 && y === this._y1) return; // Ignore coincident points.

      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
          break;

        case 1:
          this._point = 2;
          break;

        case 2:
          this._point = 3;

          _point(this, slope2(this, t1 = slope3(this, x, y)), t1);

          break;

        default:
          _point(this, this._t0, t1 = slope3(this, x, y));

          break;
      }
      this._x0 = this._x1, this._x1 = x;
      this._y0 = this._y1, this._y1 = y;
      this._t0 = t1;
    }
  };

  function MonotoneY(context) {
    this._context = new ReflectContext(context);
  }

  (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function (x, y) {
    MonotoneX.prototype.point.call(this, y, x);
  };

  function ReflectContext(context) {
    this._context = context;
  }

  ReflectContext.prototype = {
    moveTo: function moveTo(x, y) {
      this._context.moveTo(y, x);
    },
    closePath: function closePath() {
      this._context.closePath();
    },
    lineTo: function lineTo(x, y) {
      this._context.lineTo(y, x);
    },
    bezierCurveTo: function bezierCurveTo(x1, y1, x2, y2, x, y) {
      this._context.bezierCurveTo(y1, x1, y2, x2, y, x);
    }
  };

  var monotoneX = function monotoneX(context) {
    return new MonotoneX(context);
  };

  curveMonotone.monotoneX = monotoneX;

  var monotoneY = function monotoneY(context) {
    return new MonotoneY(context);
  };

  curveMonotone.monotoneY = monotoneY;

  (function (exports) {

  	var _interopRequireDefault = interopRequireDefault.exports["default"];

  	exports.__esModule = true;
  	exports["default"] = Line;

  	var _extends2 = _interopRequireDefault(_extends$2.exports);

  	var _d3Shape = d3Shape.exports;

  	var _react = _interopRequireDefault(React__default["default"]);

  	var _Utils = Utils;

  	var _chartContext = _interopRequireDefault(chartContext);

  	var _curveMonotone = curveMonotone;

  	//
  	function Line(_ref) {
  	  var _secondaryAxis$curve;

  	  var primaryAxis = _ref.primaryAxis,
  	      secondaryAxis = _ref.secondaryAxis,
  	      allSeries = _ref.series;

  	  var _useChartContext = (0, _chartContext["default"])(),
  	      getSeriesStatusStyle = _useChartContext.getSeriesStatusStyle,
  	      getDatumStatusStyle = _useChartContext.getDatumStatusStyle,
  	      focusedDatumState = _useChartContext.focusedDatumState,
  	      gridDimensions = _useChartContext.gridDimensions;

  	  var curve = (_secondaryAxis$curve = secondaryAxis.curve) != null ? _secondaryAxis$curve : _curveMonotone.monotoneX;
  	  var focusedDatum = focusedDatumState[0];
  	  return /*#__PURE__*/_react["default"].createElement("g", {
  	    style: {
  	      transform: (0, _Utils.translate)(gridDimensions.left, gridDimensions.top)
  	    }
  	  }, allSeries.map(function (series, i) {
  	    var _lineFn, _secondaryAxis$showDa;

  	    var style = getSeriesStatusStyle(series, focusedDatum);
  	    var areaPath = null;

  	    if (secondaryAxis.elementType === 'area') {
  	      var _x2 = function _x2(datum) {
  	        return getPrimary(datum, primaryAxis);
  	      };

  	      var _y1 = function _y1(datum) {
  	        return clampPxToAxis(getSecondaryStart(datum, secondaryAxis), secondaryAxis);
  	      };

  	      var _y2 = function _y2(datum) {
  	        return clampPxToAxis(getSecondary(datum, secondaryAxis), secondaryAxis);
  	      };

  	      var areaFn = (0, _d3Shape.area)(_x2, _y1, _y2).curve(curve);
  	      areaFn.defined(function (datum) {
  	        return [_x2(datum), _y1(datum), _y2(datum)].every(_Utils.isDefined);
  	      });
  	      areaPath = areaFn(series.datums);
  	    }

  	    var _x = function _x(datum) {
  	      return getPrimary(datum, primaryAxis);
  	    };

  	    var _y = function _y(datum) {
  	      return getSecondary(datum, secondaryAxis);
  	    };

  	    var lineFn = (0, _d3Shape.line)(_x, _y).curve(curve);
  	    lineFn.defined(function (datum) {
  	      return [_x(datum), _y(datum)].every(_Utils.isDefined);
  	    });
  	    var linePath = secondaryAxis.elementType === 'area' || secondaryAxis.elementType === 'line' ? (_lineFn = lineFn(series.datums)) != null ? _lineFn : undefined : undefined;
  	    var showDatumElements = (_secondaryAxis$showDa = secondaryAxis.showDatumElements) != null ? _secondaryAxis$showDa : secondaryAxis.elementType === 'bubble' || 'onFocus';
  	    return /*#__PURE__*/_react["default"].createElement("g", {
  	      key: "lines-" + i
  	    }, areaPath ? /*#__PURE__*/_react["default"].createElement("path", {
  	      d: areaPath,
  	      style: (0, _extends2["default"])({
  	        strokeWidth: 2,
  	        opacity: 0.5
  	      }, style, style.area)
  	    }) : null, linePath ? /*#__PURE__*/_react["default"].createElement("path", {
  	      d: linePath,
  	      style: (0, _extends2["default"])({
  	        strokeWidth: 2
  	      }, style, style.line, {
  	        fill: 'none'
  	      })
  	    }) : null, series.datums.map(function (datum, i) {
  	      var _secondaryAxis$showDa2;

  	      var dataStyle = getDatumStatusStyle(datum, focusedDatum);
  	      var radius = showDatumElements === 'onFocus' ? datum === focusedDatum ? 4 : 0 : 2;
  	      var show = showDatumElements === 'onFocus' ? datum === focusedDatum : (_secondaryAxis$showDa2 = secondaryAxis.showDatumElements) != null ? _secondaryAxis$showDa2 : secondaryAxis.elementType === 'bubble';
  	      return /*#__PURE__*/_react["default"].createElement("circle", {
  	        key: i,
  	        ref: function ref(el) {
  	          datum.element = el;
  	        },
  	        cx: getX(datum, primaryAxis, secondaryAxis) || 0,
  	        cy: getY(datum, primaryAxis, secondaryAxis) || 0,
  	        style: (0, _extends2["default"])({
  	          // @ts-ignore
  	          r: radius,
  	          transition: 'all .3s ease-out'
  	        }, style, style.circle, dataStyle, dataStyle.circle, !show ? {
  	          opacity: 0
  	        } : {})
  	      });
  	    }));
  	  }));
  	}

  	function getX(datum, primaryAxis, secondaryAxis) {
  	  return primaryAxis.isVertical ? getSecondary(datum, secondaryAxis) : getPrimary(datum, primaryAxis);
  	}

  	function getY(datum, primaryAxis, secondaryAxis) {
  	  return primaryAxis.isVertical ? getPrimary(datum, primaryAxis) : getSecondary(datum, secondaryAxis);
  	}

  	function getPrimary(datum, primaryAxis) {
  	  var _primaryAxis$scale;

  	  var primary = (_primaryAxis$scale = primaryAxis.scale(datum.primaryValue)) != null ? _primaryAxis$scale : NaN;

  	  if (primaryAxis.axisFamily === 'band') {
  	    primary += primaryAxis.scale.bandwidth() / 2;
  	  }

  	  return primary;
  	}

  	function getSecondary(datum, secondaryAxis) {
  	  var _secondaryAxis$scale2;

  	  if (secondaryAxis.stacked) {
  	    var _secondaryAxis$scale, _datum$stackData$, _datum$stackData;

  	    return (_secondaryAxis$scale = secondaryAxis.scale((_datum$stackData$ = (_datum$stackData = datum.stackData) == null ? void 0 : _datum$stackData[1]) != null ? _datum$stackData$ : NaN)) != null ? _secondaryAxis$scale : NaN;
  	  }

  	  return (_secondaryAxis$scale2 = secondaryAxis.scale(datum.secondaryValue)) != null ? _secondaryAxis$scale2 : NaN;
  	}

  	function getSecondaryStart(datum, secondaryAxis) {
  	  var _secondaryAxis$scale4;

  	  if (secondaryAxis.stacked) {
  	    var _secondaryAxis$scale3, _datum$stackData$2, _datum$stackData2;

  	    return (_secondaryAxis$scale3 = secondaryAxis.scale((_datum$stackData$2 = (_datum$stackData2 = datum.stackData) == null ? void 0 : _datum$stackData2[0]) != null ? _datum$stackData$2 : NaN)) != null ? _secondaryAxis$scale3 : NaN;
  	  }

  	  return (_secondaryAxis$scale4 = secondaryAxis.scale(0)) != null ? _secondaryAxis$scale4 : NaN;
  	}

  	function clampPxToAxis(px, axis) {
  	  var range = axis.scale.range();

  	  if (axis.isVertical) {
  	    range.reverse();
  	  }

  	  return Math.max(range[0], Math.min(px, range[1]));
  	}
  } (Line));

  var buildAxis_linear = {};

  var d3Scale = {exports: {}};

  var d3Interpolate = {exports: {}};

  var d3Color = {exports: {}};

  var hasRequiredD3Color;

  function requireD3Color () {
  	if (hasRequiredD3Color) return d3Color.exports;
  	hasRequiredD3Color = 1;
  	(function (module, exports) {
  		// https://d3js.org/d3-color/ v2.0.0 Copyright 2020 Mike Bostock
  		(function (global, factory) {
  		factory(exports) ;
  		}(commonjsGlobal, function (exports) {
  		function define(constructor, factory, prototype) {
  		  constructor.prototype = factory.prototype = prototype;
  		  prototype.constructor = constructor;
  		}

  		function extend(parent, definition) {
  		  var prototype = Object.create(parent.prototype);
  		  for (var key in definition) prototype[key] = definition[key];
  		  return prototype;
  		}

  		function Color() {}

  		var darker = 0.7;
  		var brighter = 1 / darker;

  		var reI = "\\s*([+-]?\\d+)\\s*",
  		    reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
  		    reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
  		    reHex = /^#([0-9a-f]{3,8})$/,
  		    reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
  		    reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
  		    reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
  		    reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
  		    reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
  		    reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

  		var named = {
  		  aliceblue: 0xf0f8ff,
  		  antiquewhite: 0xfaebd7,
  		  aqua: 0x00ffff,
  		  aquamarine: 0x7fffd4,
  		  azure: 0xf0ffff,
  		  beige: 0xf5f5dc,
  		  bisque: 0xffe4c4,
  		  black: 0x000000,
  		  blanchedalmond: 0xffebcd,
  		  blue: 0x0000ff,
  		  blueviolet: 0x8a2be2,
  		  brown: 0xa52a2a,
  		  burlywood: 0xdeb887,
  		  cadetblue: 0x5f9ea0,
  		  chartreuse: 0x7fff00,
  		  chocolate: 0xd2691e,
  		  coral: 0xff7f50,
  		  cornflowerblue: 0x6495ed,
  		  cornsilk: 0xfff8dc,
  		  crimson: 0xdc143c,
  		  cyan: 0x00ffff,
  		  darkblue: 0x00008b,
  		  darkcyan: 0x008b8b,
  		  darkgoldenrod: 0xb8860b,
  		  darkgray: 0xa9a9a9,
  		  darkgreen: 0x006400,
  		  darkgrey: 0xa9a9a9,
  		  darkkhaki: 0xbdb76b,
  		  darkmagenta: 0x8b008b,
  		  darkolivegreen: 0x556b2f,
  		  darkorange: 0xff8c00,
  		  darkorchid: 0x9932cc,
  		  darkred: 0x8b0000,
  		  darksalmon: 0xe9967a,
  		  darkseagreen: 0x8fbc8f,
  		  darkslateblue: 0x483d8b,
  		  darkslategray: 0x2f4f4f,
  		  darkslategrey: 0x2f4f4f,
  		  darkturquoise: 0x00ced1,
  		  darkviolet: 0x9400d3,
  		  deeppink: 0xff1493,
  		  deepskyblue: 0x00bfff,
  		  dimgray: 0x696969,
  		  dimgrey: 0x696969,
  		  dodgerblue: 0x1e90ff,
  		  firebrick: 0xb22222,
  		  floralwhite: 0xfffaf0,
  		  forestgreen: 0x228b22,
  		  fuchsia: 0xff00ff,
  		  gainsboro: 0xdcdcdc,
  		  ghostwhite: 0xf8f8ff,
  		  gold: 0xffd700,
  		  goldenrod: 0xdaa520,
  		  gray: 0x808080,
  		  green: 0x008000,
  		  greenyellow: 0xadff2f,
  		  grey: 0x808080,
  		  honeydew: 0xf0fff0,
  		  hotpink: 0xff69b4,
  		  indianred: 0xcd5c5c,
  		  indigo: 0x4b0082,
  		  ivory: 0xfffff0,
  		  khaki: 0xf0e68c,
  		  lavender: 0xe6e6fa,
  		  lavenderblush: 0xfff0f5,
  		  lawngreen: 0x7cfc00,
  		  lemonchiffon: 0xfffacd,
  		  lightblue: 0xadd8e6,
  		  lightcoral: 0xf08080,
  		  lightcyan: 0xe0ffff,
  		  lightgoldenrodyellow: 0xfafad2,
  		  lightgray: 0xd3d3d3,
  		  lightgreen: 0x90ee90,
  		  lightgrey: 0xd3d3d3,
  		  lightpink: 0xffb6c1,
  		  lightsalmon: 0xffa07a,
  		  lightseagreen: 0x20b2aa,
  		  lightskyblue: 0x87cefa,
  		  lightslategray: 0x778899,
  		  lightslategrey: 0x778899,
  		  lightsteelblue: 0xb0c4de,
  		  lightyellow: 0xffffe0,
  		  lime: 0x00ff00,
  		  limegreen: 0x32cd32,
  		  linen: 0xfaf0e6,
  		  magenta: 0xff00ff,
  		  maroon: 0x800000,
  		  mediumaquamarine: 0x66cdaa,
  		  mediumblue: 0x0000cd,
  		  mediumorchid: 0xba55d3,
  		  mediumpurple: 0x9370db,
  		  mediumseagreen: 0x3cb371,
  		  mediumslateblue: 0x7b68ee,
  		  mediumspringgreen: 0x00fa9a,
  		  mediumturquoise: 0x48d1cc,
  		  mediumvioletred: 0xc71585,
  		  midnightblue: 0x191970,
  		  mintcream: 0xf5fffa,
  		  mistyrose: 0xffe4e1,
  		  moccasin: 0xffe4b5,
  		  navajowhite: 0xffdead,
  		  navy: 0x000080,
  		  oldlace: 0xfdf5e6,
  		  olive: 0x808000,
  		  olivedrab: 0x6b8e23,
  		  orange: 0xffa500,
  		  orangered: 0xff4500,
  		  orchid: 0xda70d6,
  		  palegoldenrod: 0xeee8aa,
  		  palegreen: 0x98fb98,
  		  paleturquoise: 0xafeeee,
  		  palevioletred: 0xdb7093,
  		  papayawhip: 0xffefd5,
  		  peachpuff: 0xffdab9,
  		  peru: 0xcd853f,
  		  pink: 0xffc0cb,
  		  plum: 0xdda0dd,
  		  powderblue: 0xb0e0e6,
  		  purple: 0x800080,
  		  rebeccapurple: 0x663399,
  		  red: 0xff0000,
  		  rosybrown: 0xbc8f8f,
  		  royalblue: 0x4169e1,
  		  saddlebrown: 0x8b4513,
  		  salmon: 0xfa8072,
  		  sandybrown: 0xf4a460,
  		  seagreen: 0x2e8b57,
  		  seashell: 0xfff5ee,
  		  sienna: 0xa0522d,
  		  silver: 0xc0c0c0,
  		  skyblue: 0x87ceeb,
  		  slateblue: 0x6a5acd,
  		  slategray: 0x708090,
  		  slategrey: 0x708090,
  		  snow: 0xfffafa,
  		  springgreen: 0x00ff7f,
  		  steelblue: 0x4682b4,
  		  tan: 0xd2b48c,
  		  teal: 0x008080,
  		  thistle: 0xd8bfd8,
  		  tomato: 0xff6347,
  		  turquoise: 0x40e0d0,
  		  violet: 0xee82ee,
  		  wheat: 0xf5deb3,
  		  white: 0xffffff,
  		  whitesmoke: 0xf5f5f5,
  		  yellow: 0xffff00,
  		  yellowgreen: 0x9acd32
  		};

  		define(Color, color, {
  		  copy: function(channels) {
  		    return Object.assign(new this.constructor, this, channels);
  		  },
  		  displayable: function() {
  		    return this.rgb().displayable();
  		  },
  		  hex: color_formatHex, // Deprecated! Use color.formatHex.
  		  formatHex: color_formatHex,
  		  formatHsl: color_formatHsl,
  		  formatRgb: color_formatRgb,
  		  toString: color_formatRgb
  		});

  		function color_formatHex() {
  		  return this.rgb().formatHex();
  		}

  		function color_formatHsl() {
  		  return hslConvert(this).formatHsl();
  		}

  		function color_formatRgb() {
  		  return this.rgb().formatRgb();
  		}

  		function color(format) {
  		  var m, l;
  		  format = (format + "").trim().toLowerCase();
  		  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
  		      : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00
  		      : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
  		      : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000
  		      : null) // invalid hex
  		      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
  		      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
  		      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
  		      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
  		      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
  		      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
  		      : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
  		      : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
  		      : null;
  		}

  		function rgbn(n) {
  		  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
  		}

  		function rgba(r, g, b, a) {
  		  if (a <= 0) r = g = b = NaN;
  		  return new Rgb(r, g, b, a);
  		}

  		function rgbConvert(o) {
  		  if (!(o instanceof Color)) o = color(o);
  		  if (!o) return new Rgb;
  		  o = o.rgb();
  		  return new Rgb(o.r, o.g, o.b, o.opacity);
  		}

  		function rgb(r, g, b, opacity) {
  		  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
  		}

  		function Rgb(r, g, b, opacity) {
  		  this.r = +r;
  		  this.g = +g;
  		  this.b = +b;
  		  this.opacity = +opacity;
  		}

  		define(Rgb, rgb, extend(Color, {
  		  brighter: function(k) {
  		    k = k == null ? brighter : Math.pow(brighter, k);
  		    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  		  },
  		  darker: function(k) {
  		    k = k == null ? darker : Math.pow(darker, k);
  		    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  		  },
  		  rgb: function() {
  		    return this;
  		  },
  		  displayable: function() {
  		    return (-0.5 <= this.r && this.r < 255.5)
  		        && (-0.5 <= this.g && this.g < 255.5)
  		        && (-0.5 <= this.b && this.b < 255.5)
  		        && (0 <= this.opacity && this.opacity <= 1);
  		  },
  		  hex: rgb_formatHex, // Deprecated! Use color.formatHex.
  		  formatHex: rgb_formatHex,
  		  formatRgb: rgb_formatRgb,
  		  toString: rgb_formatRgb
  		}));

  		function rgb_formatHex() {
  		  return "#" + hex(this.r) + hex(this.g) + hex(this.b);
  		}

  		function rgb_formatRgb() {
  		  var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
  		  return (a === 1 ? "rgb(" : "rgba(")
  		      + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
  		      + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
  		      + Math.max(0, Math.min(255, Math.round(this.b) || 0))
  		      + (a === 1 ? ")" : ", " + a + ")");
  		}

  		function hex(value) {
  		  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  		  return (value < 16 ? "0" : "") + value.toString(16);
  		}

  		function hsla(h, s, l, a) {
  		  if (a <= 0) h = s = l = NaN;
  		  else if (l <= 0 || l >= 1) h = s = NaN;
  		  else if (s <= 0) h = NaN;
  		  return new Hsl(h, s, l, a);
  		}

  		function hslConvert(o) {
  		  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  		  if (!(o instanceof Color)) o = color(o);
  		  if (!o) return new Hsl;
  		  if (o instanceof Hsl) return o;
  		  o = o.rgb();
  		  var r = o.r / 255,
  		      g = o.g / 255,
  		      b = o.b / 255,
  		      min = Math.min(r, g, b),
  		      max = Math.max(r, g, b),
  		      h = NaN,
  		      s = max - min,
  		      l = (max + min) / 2;
  		  if (s) {
  		    if (r === max) h = (g - b) / s + (g < b) * 6;
  		    else if (g === max) h = (b - r) / s + 2;
  		    else h = (r - g) / s + 4;
  		    s /= l < 0.5 ? max + min : 2 - max - min;
  		    h *= 60;
  		  } else {
  		    s = l > 0 && l < 1 ? 0 : h;
  		  }
  		  return new Hsl(h, s, l, o.opacity);
  		}

  		function hsl(h, s, l, opacity) {
  		  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
  		}

  		function Hsl(h, s, l, opacity) {
  		  this.h = +h;
  		  this.s = +s;
  		  this.l = +l;
  		  this.opacity = +opacity;
  		}

  		define(Hsl, hsl, extend(Color, {
  		  brighter: function(k) {
  		    k = k == null ? brighter : Math.pow(brighter, k);
  		    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  		  },
  		  darker: function(k) {
  		    k = k == null ? darker : Math.pow(darker, k);
  		    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  		  },
  		  rgb: function() {
  		    var h = this.h % 360 + (this.h < 0) * 360,
  		        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
  		        l = this.l,
  		        m2 = l + (l < 0.5 ? l : 1 - l) * s,
  		        m1 = 2 * l - m2;
  		    return new Rgb(
  		      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
  		      hsl2rgb(h, m1, m2),
  		      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
  		      this.opacity
  		    );
  		  },
  		  displayable: function() {
  		    return (0 <= this.s && this.s <= 1 || isNaN(this.s))
  		        && (0 <= this.l && this.l <= 1)
  		        && (0 <= this.opacity && this.opacity <= 1);
  		  },
  		  formatHsl: function() {
  		    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
  		    return (a === 1 ? "hsl(" : "hsla(")
  		        + (this.h || 0) + ", "
  		        + (this.s || 0) * 100 + "%, "
  		        + (this.l || 0) * 100 + "%"
  		        + (a === 1 ? ")" : ", " + a + ")");
  		  }
  		}));

  		/* From FvD 13.37, CSS Color Module Level 3 */
  		function hsl2rgb(h, m1, m2) {
  		  return (h < 60 ? m1 + (m2 - m1) * h / 60
  		      : h < 180 ? m2
  		      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
  		      : m1) * 255;
  		}

  		const radians = Math.PI / 180;
  		const degrees = 180 / Math.PI;

  		// https://observablehq.com/@mbostock/lab-and-rgb
  		const K = 18,
  		    Xn = 0.96422,
  		    Yn = 1,
  		    Zn = 0.82521,
  		    t0 = 4 / 29,
  		    t1 = 6 / 29,
  		    t2 = 3 * t1 * t1,
  		    t3 = t1 * t1 * t1;

  		function labConvert(o) {
  		  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
  		  if (o instanceof Hcl) return hcl2lab(o);
  		  if (!(o instanceof Rgb)) o = rgbConvert(o);
  		  var r = rgb2lrgb(o.r),
  		      g = rgb2lrgb(o.g),
  		      b = rgb2lrgb(o.b),
  		      y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn), x, z;
  		  if (r === g && g === b) x = z = y; else {
  		    x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);
  		    z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);
  		  }
  		  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
  		}

  		function gray(l, opacity) {
  		  return new Lab(l, 0, 0, opacity == null ? 1 : opacity);
  		}

  		function lab(l, a, b, opacity) {
  		  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
  		}

  		function Lab(l, a, b, opacity) {
  		  this.l = +l;
  		  this.a = +a;
  		  this.b = +b;
  		  this.opacity = +opacity;
  		}

  		define(Lab, lab, extend(Color, {
  		  brighter: function(k) {
  		    return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);
  		  },
  		  darker: function(k) {
  		    return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);
  		  },
  		  rgb: function() {
  		    var y = (this.l + 16) / 116,
  		        x = isNaN(this.a) ? y : y + this.a / 500,
  		        z = isNaN(this.b) ? y : y - this.b / 200;
  		    x = Xn * lab2xyz(x);
  		    y = Yn * lab2xyz(y);
  		    z = Zn * lab2xyz(z);
  		    return new Rgb(
  		      lrgb2rgb( 3.1338561 * x - 1.6168667 * y - 0.4906146 * z),
  		      lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z),
  		      lrgb2rgb( 0.0719453 * x - 0.2289914 * y + 1.4052427 * z),
  		      this.opacity
  		    );
  		  }
  		}));

  		function xyz2lab(t) {
  		  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
  		}

  		function lab2xyz(t) {
  		  return t > t1 ? t * t * t : t2 * (t - t0);
  		}

  		function lrgb2rgb(x) {
  		  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
  		}

  		function rgb2lrgb(x) {
  		  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
  		}

  		function hclConvert(o) {
  		  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
  		  if (!(o instanceof Lab)) o = labConvert(o);
  		  if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);
  		  var h = Math.atan2(o.b, o.a) * degrees;
  		  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
  		}

  		function lch(l, c, h, opacity) {
  		  return arguments.length === 1 ? hclConvert(l) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
  		}

  		function hcl(h, c, l, opacity) {
  		  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
  		}

  		function Hcl(h, c, l, opacity) {
  		  this.h = +h;
  		  this.c = +c;
  		  this.l = +l;
  		  this.opacity = +opacity;
  		}

  		function hcl2lab(o) {
  		  if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);
  		  var h = o.h * radians;
  		  return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
  		}

  		define(Hcl, hcl, extend(Color, {
  		  brighter: function(k) {
  		    return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);
  		  },
  		  darker: function(k) {
  		    return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);
  		  },
  		  rgb: function() {
  		    return hcl2lab(this).rgb();
  		  }
  		}));

  		var A = -0.14861,
  		    B = +1.78277,
  		    C = -0.29227,
  		    D = -0.90649,
  		    E = +1.97294,
  		    ED = E * D,
  		    EB = E * B,
  		    BC_DA = B * C - D * A;

  		function cubehelixConvert(o) {
  		  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
  		  if (!(o instanceof Rgb)) o = rgbConvert(o);
  		  var r = o.r / 255,
  		      g = o.g / 255,
  		      b = o.b / 255,
  		      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
  		      bl = b - l,
  		      k = (E * (g - l) - C * bl) / D,
  		      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1
  		      h = s ? Math.atan2(k, bl) * degrees - 120 : NaN;
  		  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
  		}

  		function cubehelix(h, s, l, opacity) {
  		  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
  		}

  		function Cubehelix(h, s, l, opacity) {
  		  this.h = +h;
  		  this.s = +s;
  		  this.l = +l;
  		  this.opacity = +opacity;
  		}

  		define(Cubehelix, cubehelix, extend(Color, {
  		  brighter: function(k) {
  		    k = k == null ? brighter : Math.pow(brighter, k);
  		    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  		  },
  		  darker: function(k) {
  		    k = k == null ? darker : Math.pow(darker, k);
  		    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  		  },
  		  rgb: function() {
  		    var h = isNaN(this.h) ? 0 : (this.h + 120) * radians,
  		        l = +this.l,
  		        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
  		        cosh = Math.cos(h),
  		        sinh = Math.sin(h);
  		    return new Rgb(
  		      255 * (l + a * (A * cosh + B * sinh)),
  		      255 * (l + a * (C * cosh + D * sinh)),
  		      255 * (l + a * (E * cosh)),
  		      this.opacity
  		    );
  		  }
  		}));

  		exports.color = color;
  		exports.cubehelix = cubehelix;
  		exports.gray = gray;
  		exports.hcl = hcl;
  		exports.hsl = hsl;
  		exports.lab = lab;
  		exports.lch = lch;
  		exports.rgb = rgb;

  		Object.defineProperty(exports, '__esModule', { value: true });

  		}));
  } (d3Color, d3Color.exports));
  	return d3Color.exports;
  }

  var hasRequiredD3Interpolate;

  function requireD3Interpolate () {
  	if (hasRequiredD3Interpolate) return d3Interpolate.exports;
  	hasRequiredD3Interpolate = 1;
  	(function (module, exports) {
  		// https://d3js.org/d3-interpolate/ v2.0.1 Copyright 2020 Mike Bostock
  		(function (global, factory) {
  		factory(exports, requireD3Color()) ;
  		}(commonjsGlobal, function (exports, d3Color) {
  		function basis(t1, v0, v1, v2, v3) {
  		  var t2 = t1 * t1, t3 = t2 * t1;
  		  return ((1 - 3 * t1 + 3 * t2 - t3) * v0
  		      + (4 - 6 * t2 + 3 * t3) * v1
  		      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2
  		      + t3 * v3) / 6;
  		}

  		function basis$1(values) {
  		  var n = values.length - 1;
  		  return function(t) {
  		    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
  		        v1 = values[i],
  		        v2 = values[i + 1],
  		        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
  		        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
  		    return basis((t - i / n) * n, v0, v1, v2, v3);
  		  };
  		}

  		function basisClosed(values) {
  		  var n = values.length;
  		  return function(t) {
  		    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
  		        v0 = values[(i + n - 1) % n],
  		        v1 = values[i % n],
  		        v2 = values[(i + 1) % n],
  		        v3 = values[(i + 2) % n];
  		    return basis((t - i / n) * n, v0, v1, v2, v3);
  		  };
  		}

  		var constant = x => () => x;

  		function linear(a, d) {
  		  return function(t) {
  		    return a + t * d;
  		  };
  		}

  		function exponential(a, b, y) {
  		  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
  		    return Math.pow(a + t * b, y);
  		  };
  		}

  		function hue(a, b) {
  		  var d = b - a;
  		  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant(isNaN(a) ? b : a);
  		}

  		function gamma(y) {
  		  return (y = +y) === 1 ? nogamma : function(a, b) {
  		    return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);
  		  };
  		}

  		function nogamma(a, b) {
  		  var d = b - a;
  		  return d ? linear(a, d) : constant(isNaN(a) ? b : a);
  		}

  		var rgb = (function rgbGamma(y) {
  		  var color = gamma(y);

  		  function rgb(start, end) {
  		    var r = color((start = d3Color.rgb(start)).r, (end = d3Color.rgb(end)).r),
  		        g = color(start.g, end.g),
  		        b = color(start.b, end.b),
  		        opacity = nogamma(start.opacity, end.opacity);
  		    return function(t) {
  		      start.r = r(t);
  		      start.g = g(t);
  		      start.b = b(t);
  		      start.opacity = opacity(t);
  		      return start + "";
  		    };
  		  }

  		  rgb.gamma = rgbGamma;

  		  return rgb;
  		})(1);

  		function rgbSpline(spline) {
  		  return function(colors) {
  		    var n = colors.length,
  		        r = new Array(n),
  		        g = new Array(n),
  		        b = new Array(n),
  		        i, color;
  		    for (i = 0; i < n; ++i) {
  		      color = d3Color.rgb(colors[i]);
  		      r[i] = color.r || 0;
  		      g[i] = color.g || 0;
  		      b[i] = color.b || 0;
  		    }
  		    r = spline(r);
  		    g = spline(g);
  		    b = spline(b);
  		    color.opacity = 1;
  		    return function(t) {
  		      color.r = r(t);
  		      color.g = g(t);
  		      color.b = b(t);
  		      return color + "";
  		    };
  		  };
  		}

  		var rgbBasis = rgbSpline(basis$1);
  		var rgbBasisClosed = rgbSpline(basisClosed);

  		function numberArray(a, b) {
  		  if (!b) b = [];
  		  var n = a ? Math.min(b.length, a.length) : 0,
  		      c = b.slice(),
  		      i;
  		  return function(t) {
  		    for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;
  		    return c;
  		  };
  		}

  		function isNumberArray(x) {
  		  return ArrayBuffer.isView(x) && !(x instanceof DataView);
  		}

  		function array(a, b) {
  		  return (isNumberArray(b) ? numberArray : genericArray)(a, b);
  		}

  		function genericArray(a, b) {
  		  var nb = b ? b.length : 0,
  		      na = a ? Math.min(nb, a.length) : 0,
  		      x = new Array(na),
  		      c = new Array(nb),
  		      i;

  		  for (i = 0; i < na; ++i) x[i] = value(a[i], b[i]);
  		  for (; i < nb; ++i) c[i] = b[i];

  		  return function(t) {
  		    for (i = 0; i < na; ++i) c[i] = x[i](t);
  		    return c;
  		  };
  		}

  		function date(a, b) {
  		  var d = new Date;
  		  return a = +a, b = +b, function(t) {
  		    return d.setTime(a * (1 - t) + b * t), d;
  		  };
  		}

  		function number(a, b) {
  		  return a = +a, b = +b, function(t) {
  		    return a * (1 - t) + b * t;
  		  };
  		}

  		function object(a, b) {
  		  var i = {},
  		      c = {},
  		      k;

  		  if (a === null || typeof a !== "object") a = {};
  		  if (b === null || typeof b !== "object") b = {};

  		  for (k in b) {
  		    if (k in a) {
  		      i[k] = value(a[k], b[k]);
  		    } else {
  		      c[k] = b[k];
  		    }
  		  }

  		  return function(t) {
  		    for (k in i) c[k] = i[k](t);
  		    return c;
  		  };
  		}

  		var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
  		    reB = new RegExp(reA.source, "g");

  		function zero(b) {
  		  return function() {
  		    return b;
  		  };
  		}

  		function one(b) {
  		  return function(t) {
  		    return b(t) + "";
  		  };
  		}

  		function string(a, b) {
  		  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
  		      am, // current match in a
  		      bm, // current match in b
  		      bs, // string preceding current number in b, if any
  		      i = -1, // index in s
  		      s = [], // string constants and placeholders
  		      q = []; // number interpolators

  		  // Coerce inputs to strings.
  		  a = a + "", b = b + "";

  		  // Interpolate pairs of numbers in a & b.
  		  while ((am = reA.exec(a))
  		      && (bm = reB.exec(b))) {
  		    if ((bs = bm.index) > bi) { // a string precedes the next number in b
  		      bs = b.slice(bi, bs);
  		      if (s[i]) s[i] += bs; // coalesce with previous string
  		      else s[++i] = bs;
  		    }
  		    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
  		      if (s[i]) s[i] += bm; // coalesce with previous string
  		      else s[++i] = bm;
  		    } else { // interpolate non-matching numbers
  		      s[++i] = null;
  		      q.push({i: i, x: number(am, bm)});
  		    }
  		    bi = reB.lastIndex;
  		  }

  		  // Add remains of b.
  		  if (bi < b.length) {
  		    bs = b.slice(bi);
  		    if (s[i]) s[i] += bs; // coalesce with previous string
  		    else s[++i] = bs;
  		  }

  		  // Special optimization for only a single match.
  		  // Otherwise, interpolate each of the numbers and rejoin the string.
  		  return s.length < 2 ? (q[0]
  		      ? one(q[0].x)
  		      : zero(b))
  		      : (b = q.length, function(t) {
  		          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
  		          return s.join("");
  		        });
  		}

  		function value(a, b) {
  		  var t = typeof b, c;
  		  return b == null || t === "boolean" ? constant(b)
  		      : (t === "number" ? number
  		      : t === "string" ? ((c = d3Color.color(b)) ? (b = c, rgb) : string)
  		      : b instanceof d3Color.color ? rgb
  		      : b instanceof Date ? date
  		      : isNumberArray(b) ? numberArray
  		      : Array.isArray(b) ? genericArray
  		      : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object
  		      : number)(a, b);
  		}

  		function discrete(range) {
  		  var n = range.length;
  		  return function(t) {
  		    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  		  };
  		}

  		function hue$1(a, b) {
  		  var i = hue(+a, +b);
  		  return function(t) {
  		    var x = i(t);
  		    return x - 360 * Math.floor(x / 360);
  		  };
  		}

  		function round(a, b) {
  		  return a = +a, b = +b, function(t) {
  		    return Math.round(a * (1 - t) + b * t);
  		  };
  		}

  		var degrees = 180 / Math.PI;

  		var identity = {
  		  translateX: 0,
  		  translateY: 0,
  		  rotate: 0,
  		  skewX: 0,
  		  scaleX: 1,
  		  scaleY: 1
  		};

  		function decompose(a, b, c, d, e, f) {
  		  var scaleX, scaleY, skewX;
  		  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
  		  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
  		  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
  		  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
  		  return {
  		    translateX: e,
  		    translateY: f,
  		    rotate: Math.atan2(b, a) * degrees,
  		    skewX: Math.atan(skewX) * degrees,
  		    scaleX: scaleX,
  		    scaleY: scaleY
  		  };
  		}

  		var svgNode;

  		/* eslint-disable no-undef */
  		function parseCss(value) {
  		  const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
  		  return m.isIdentity ? identity : decompose(m.a, m.b, m.c, m.d, m.e, m.f);
  		}

  		function parseSvg(value) {
  		  if (value == null) return identity;
  		  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  		  svgNode.setAttribute("transform", value);
  		  if (!(value = svgNode.transform.baseVal.consolidate())) return identity;
  		  value = value.matrix;
  		  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
  		}

  		function interpolateTransform(parse, pxComma, pxParen, degParen) {

  		  function pop(s) {
  		    return s.length ? s.pop() + " " : "";
  		  }

  		  function translate(xa, ya, xb, yb, s, q) {
  		    if (xa !== xb || ya !== yb) {
  		      var i = s.push("translate(", null, pxComma, null, pxParen);
  		      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});
  		    } else if (xb || yb) {
  		      s.push("translate(" + xb + pxComma + yb + pxParen);
  		    }
  		  }

  		  function rotate(a, b, s, q) {
  		    if (a !== b) {
  		      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path
  		      q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: number(a, b)});
  		    } else if (b) {
  		      s.push(pop(s) + "rotate(" + b + degParen);
  		    }
  		  }

  		  function skewX(a, b, s, q) {
  		    if (a !== b) {
  		      q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: number(a, b)});
  		    } else if (b) {
  		      s.push(pop(s) + "skewX(" + b + degParen);
  		    }
  		  }

  		  function scale(xa, ya, xb, yb, s, q) {
  		    if (xa !== xb || ya !== yb) {
  		      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
  		      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});
  		    } else if (xb !== 1 || yb !== 1) {
  		      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
  		    }
  		  }

  		  return function(a, b) {
  		    var s = [], // string constants and placeholders
  		        q = []; // number interpolators
  		    a = parse(a), b = parse(b);
  		    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
  		    rotate(a.rotate, b.rotate, s, q);
  		    skewX(a.skewX, b.skewX, s, q);
  		    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
  		    a = b = null; // gc
  		    return function(t) {
  		      var i = -1, n = q.length, o;
  		      while (++i < n) s[(o = q[i]).i] = o.x(t);
  		      return s.join("");
  		    };
  		  };
  		}

  		var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
  		var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

  		var epsilon2 = 1e-12;

  		function cosh(x) {
  		  return ((x = Math.exp(x)) + 1 / x) / 2;
  		}

  		function sinh(x) {
  		  return ((x = Math.exp(x)) - 1 / x) / 2;
  		}

  		function tanh(x) {
  		  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
  		}

  		var zoom = (function zoomRho(rho, rho2, rho4) {

  		  // p0 = [ux0, uy0, w0]
  		  // p1 = [ux1, uy1, w1]
  		  function zoom(p0, p1) {
  		    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],
  		        ux1 = p1[0], uy1 = p1[1], w1 = p1[2],
  		        dx = ux1 - ux0,
  		        dy = uy1 - uy0,
  		        d2 = dx * dx + dy * dy,
  		        i,
  		        S;

  		    // Special case for u0 ≅ u1.
  		    if (d2 < epsilon2) {
  		      S = Math.log(w1 / w0) / rho;
  		      i = function(t) {
  		        return [
  		          ux0 + t * dx,
  		          uy0 + t * dy,
  		          w0 * Math.exp(rho * t * S)
  		        ];
  		      };
  		    }

  		    // General case.
  		    else {
  		      var d1 = Math.sqrt(d2),
  		          b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
  		          b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
  		          r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
  		          r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
  		      S = (r1 - r0) / rho;
  		      i = function(t) {
  		        var s = t * S,
  		            coshr0 = cosh(r0),
  		            u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
  		        return [
  		          ux0 + u * dx,
  		          uy0 + u * dy,
  		          w0 * coshr0 / cosh(rho * s + r0)
  		        ];
  		      };
  		    }

  		    i.duration = S * 1000 * rho / Math.SQRT2;

  		    return i;
  		  }

  		  zoom.rho = function(_) {
  		    var _1 = Math.max(1e-3, +_), _2 = _1 * _1, _4 = _2 * _2;
  		    return zoomRho(_1, _2, _4);
  		  };

  		  return zoom;
  		})(Math.SQRT2, 2, 4);

  		function hsl(hue) {
  		  return function(start, end) {
  		    var h = hue((start = d3Color.hsl(start)).h, (end = d3Color.hsl(end)).h),
  		        s = nogamma(start.s, end.s),
  		        l = nogamma(start.l, end.l),
  		        opacity = nogamma(start.opacity, end.opacity);
  		    return function(t) {
  		      start.h = h(t);
  		      start.s = s(t);
  		      start.l = l(t);
  		      start.opacity = opacity(t);
  		      return start + "";
  		    };
  		  }
  		}

  		var hsl$1 = hsl(hue);
  		var hslLong = hsl(nogamma);

  		function lab(start, end) {
  		  var l = nogamma((start = d3Color.lab(start)).l, (end = d3Color.lab(end)).l),
  		      a = nogamma(start.a, end.a),
  		      b = nogamma(start.b, end.b),
  		      opacity = nogamma(start.opacity, end.opacity);
  		  return function(t) {
  		    start.l = l(t);
  		    start.a = a(t);
  		    start.b = b(t);
  		    start.opacity = opacity(t);
  		    return start + "";
  		  };
  		}

  		function hcl(hue) {
  		  return function(start, end) {
  		    var h = hue((start = d3Color.hcl(start)).h, (end = d3Color.hcl(end)).h),
  		        c = nogamma(start.c, end.c),
  		        l = nogamma(start.l, end.l),
  		        opacity = nogamma(start.opacity, end.opacity);
  		    return function(t) {
  		      start.h = h(t);
  		      start.c = c(t);
  		      start.l = l(t);
  		      start.opacity = opacity(t);
  		      return start + "";
  		    };
  		  }
  		}

  		var hcl$1 = hcl(hue);
  		var hclLong = hcl(nogamma);

  		function cubehelix(hue) {
  		  return (function cubehelixGamma(y) {
  		    y = +y;

  		    function cubehelix(start, end) {
  		      var h = hue((start = d3Color.cubehelix(start)).h, (end = d3Color.cubehelix(end)).h),
  		          s = nogamma(start.s, end.s),
  		          l = nogamma(start.l, end.l),
  		          opacity = nogamma(start.opacity, end.opacity);
  		      return function(t) {
  		        start.h = h(t);
  		        start.s = s(t);
  		        start.l = l(Math.pow(t, y));
  		        start.opacity = opacity(t);
  		        return start + "";
  		      };
  		    }

  		    cubehelix.gamma = cubehelixGamma;

  		    return cubehelix;
  		  })(1);
  		}

  		var cubehelix$1 = cubehelix(hue);
  		var cubehelixLong = cubehelix(nogamma);

  		function piecewise(interpolate, values) {
  		  if (values === undefined) values = interpolate, interpolate = value;
  		  var i = 0, n = values.length - 1, v = values[0], I = new Array(n < 0 ? 0 : n);
  		  while (i < n) I[i] = interpolate(v, v = values[++i]);
  		  return function(t) {
  		    var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
  		    return I[i](t - i);
  		  };
  		}

  		function quantize(interpolator, n) {
  		  var samples = new Array(n);
  		  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));
  		  return samples;
  		}

  		exports.interpolate = value;
  		exports.interpolateArray = array;
  		exports.interpolateBasis = basis$1;
  		exports.interpolateBasisClosed = basisClosed;
  		exports.interpolateCubehelix = cubehelix$1;
  		exports.interpolateCubehelixLong = cubehelixLong;
  		exports.interpolateDate = date;
  		exports.interpolateDiscrete = discrete;
  		exports.interpolateHcl = hcl$1;
  		exports.interpolateHclLong = hclLong;
  		exports.interpolateHsl = hsl$1;
  		exports.interpolateHslLong = hslLong;
  		exports.interpolateHue = hue$1;
  		exports.interpolateLab = lab;
  		exports.interpolateNumber = number;
  		exports.interpolateNumberArray = numberArray;
  		exports.interpolateObject = object;
  		exports.interpolateRgb = rgb;
  		exports.interpolateRgbBasis = rgbBasis;
  		exports.interpolateRgbBasisClosed = rgbBasisClosed;
  		exports.interpolateRound = round;
  		exports.interpolateString = string;
  		exports.interpolateTransformCss = interpolateTransformCss;
  		exports.interpolateTransformSvg = interpolateTransformSvg;
  		exports.interpolateZoom = zoom;
  		exports.piecewise = piecewise;
  		exports.quantize = quantize;

  		Object.defineProperty(exports, '__esModule', { value: true });

  		}));
  } (d3Interpolate, d3Interpolate.exports));
  	return d3Interpolate.exports;
  }

  var d3Format = {exports: {}};

  var hasRequiredD3Format;

  function requireD3Format () {
  	if (hasRequiredD3Format) return d3Format.exports;
  	hasRequiredD3Format = 1;
  	(function (module, exports) {
  		// https://d3js.org/d3-format/ v2.0.0 Copyright 2020 Mike Bostock
  		(function (global, factory) {
  		factory(exports) ;
  		}(commonjsGlobal, (function (exports) {
  		function formatDecimal(x) {
  		  return Math.abs(x = Math.round(x)) >= 1e21
  		      ? x.toLocaleString("en").replace(/,/g, "")
  		      : x.toString(10);
  		}

  		// Computes the decimal coefficient and exponent of the specified number x with
  		// significant digits p, where x is positive and p is in [1, 21] or undefined.
  		// For example, formatDecimalParts(1.23) returns ["123", 0].
  		function formatDecimalParts(x, p) {
  		  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
  		  var i, coefficient = x.slice(0, i);

  		  // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
  		  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
  		  return [
  		    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
  		    +x.slice(i + 1)
  		  ];
  		}

  		function exponent(x) {
  		  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
  		}

  		function formatGroup(grouping, thousands) {
  		  return function(value, width) {
  		    var i = value.length,
  		        t = [],
  		        j = 0,
  		        g = grouping[0],
  		        length = 0;

  		    while (i > 0 && g > 0) {
  		      if (length + g + 1 > width) g = Math.max(1, width - length);
  		      t.push(value.substring(i -= g, i + g));
  		      if ((length += g + 1) > width) break;
  		      g = grouping[j = (j + 1) % grouping.length];
  		    }

  		    return t.reverse().join(thousands);
  		  };
  		}

  		function formatNumerals(numerals) {
  		  return function(value) {
  		    return value.replace(/[0-9]/g, function(i) {
  		      return numerals[+i];
  		    });
  		  };
  		}

  		// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
  		var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

  		function formatSpecifier(specifier) {
  		  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  		  var match;
  		  return new FormatSpecifier({
  		    fill: match[1],
  		    align: match[2],
  		    sign: match[3],
  		    symbol: match[4],
  		    zero: match[5],
  		    width: match[6],
  		    comma: match[7],
  		    precision: match[8] && match[8].slice(1),
  		    trim: match[9],
  		    type: match[10]
  		  });
  		}

  		formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

  		function FormatSpecifier(specifier) {
  		  this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
  		  this.align = specifier.align === undefined ? ">" : specifier.align + "";
  		  this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
  		  this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
  		  this.zero = !!specifier.zero;
  		  this.width = specifier.width === undefined ? undefined : +specifier.width;
  		  this.comma = !!specifier.comma;
  		  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
  		  this.trim = !!specifier.trim;
  		  this.type = specifier.type === undefined ? "" : specifier.type + "";
  		}

  		FormatSpecifier.prototype.toString = function() {
  		  return this.fill
  		      + this.align
  		      + this.sign
  		      + this.symbol
  		      + (this.zero ? "0" : "")
  		      + (this.width === undefined ? "" : Math.max(1, this.width | 0))
  		      + (this.comma ? "," : "")
  		      + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0))
  		      + (this.trim ? "~" : "")
  		      + this.type;
  		};

  		// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
  		function formatTrim(s) {
  		  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
  		    switch (s[i]) {
  		      case ".": i0 = i1 = i; break;
  		      case "0": if (i0 === 0) i0 = i; i1 = i; break;
  		      default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;
  		    }
  		  }
  		  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
  		}

  		var prefixExponent;

  		function formatPrefixAuto(x, p) {
  		  var d = formatDecimalParts(x, p);
  		  if (!d) return x + "";
  		  var coefficient = d[0],
  		      exponent = d[1],
  		      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
  		      n = coefficient.length;
  		  return i === n ? coefficient
  		      : i > n ? coefficient + new Array(i - n + 1).join("0")
  		      : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
  		      : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!
  		}

  		function formatRounded(x, p) {
  		  var d = formatDecimalParts(x, p);
  		  if (!d) return x + "";
  		  var coefficient = d[0],
  		      exponent = d[1];
  		  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
  		      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
  		      : coefficient + new Array(exponent - coefficient.length + 2).join("0");
  		}

  		var formatTypes = {
  		  "%": (x, p) => (x * 100).toFixed(p),
  		  "b": (x) => Math.round(x).toString(2),
  		  "c": (x) => x + "",
  		  "d": formatDecimal,
  		  "e": (x, p) => x.toExponential(p),
  		  "f": (x, p) => x.toFixed(p),
  		  "g": (x, p) => x.toPrecision(p),
  		  "o": (x) => Math.round(x).toString(8),
  		  "p": (x, p) => formatRounded(x * 100, p),
  		  "r": formatRounded,
  		  "s": formatPrefixAuto,
  		  "X": (x) => Math.round(x).toString(16).toUpperCase(),
  		  "x": (x) => Math.round(x).toString(16)
  		};

  		function identity(x) {
  		  return x;
  		}

  		var map = Array.prototype.map,
  		    prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];

  		function formatLocale(locale) {
  		  var group = locale.grouping === undefined || locale.thousands === undefined ? identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + ""),
  		      currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
  		      currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
  		      decimal = locale.decimal === undefined ? "." : locale.decimal + "",
  		      numerals = locale.numerals === undefined ? identity : formatNumerals(map.call(locale.numerals, String)),
  		      percent = locale.percent === undefined ? "%" : locale.percent + "",
  		      minus = locale.minus === undefined ? "−" : locale.minus + "",
  		      nan = locale.nan === undefined ? "NaN" : locale.nan + "";

  		  function newFormat(specifier) {
  		    specifier = formatSpecifier(specifier);

  		    var fill = specifier.fill,
  		        align = specifier.align,
  		        sign = specifier.sign,
  		        symbol = specifier.symbol,
  		        zero = specifier.zero,
  		        width = specifier.width,
  		        comma = specifier.comma,
  		        precision = specifier.precision,
  		        trim = specifier.trim,
  		        type = specifier.type;

  		    // The "n" type is an alias for ",g".
  		    if (type === "n") comma = true, type = "g";

  		    // The "" type, and any invalid type, is an alias for ".12~g".
  		    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = "g";

  		    // If zero fill is specified, padding goes after sign and before digits.
  		    if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

  		    // Compute the prefix and suffix.
  		    // For SI-prefix, the suffix is lazily computed.
  		    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
  		        suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";

  		    // What format function should we use?
  		    // Is this an integer type?
  		    // Can this type generate exponential notation?
  		    var formatType = formatTypes[type],
  		        maybeSuffix = /[defgprs%]/.test(type);

  		    // Set the default precision if not specified,
  		    // or clamp the specified precision to the supported range.
  		    // For significant precision, it must be in [1, 21].
  		    // For fixed precision, it must be in [0, 20].
  		    precision = precision === undefined ? 6
  		        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
  		        : Math.max(0, Math.min(20, precision));

  		    function format(value) {
  		      var valuePrefix = prefix,
  		          valueSuffix = suffix,
  		          i, n, c;

  		      if (type === "c") {
  		        valueSuffix = formatType(value) + valueSuffix;
  		        value = "";
  		      } else {
  		        value = +value;

  		        // Determine the sign. -0 is not less than 0, but 1 / -0 is!
  		        var valueNegative = value < 0 || 1 / value < 0;

  		        // Perform the initial formatting.
  		        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);

  		        // Trim insignificant zeros.
  		        if (trim) value = formatTrim(value);

  		        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.
  		        if (valueNegative && +value === 0 && sign !== "+") valueNegative = false;

  		        // Compute the prefix and suffix.
  		        valuePrefix = (valueNegative ? (sign === "(" ? sign : minus) : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
  		        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");

  		        // Break the formatted value into the integer “value” part that can be
  		        // grouped, and fractional or exponential “suffix” part that is not.
  		        if (maybeSuffix) {
  		          i = -1, n = value.length;
  		          while (++i < n) {
  		            if (c = value.charCodeAt(i), 48 > c || c > 57) {
  		              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
  		              value = value.slice(0, i);
  		              break;
  		            }
  		          }
  		        }
  		      }

  		      // If the fill character is not "0", grouping is applied before padding.
  		      if (comma && !zero) value = group(value, Infinity);

  		      // Compute the padding.
  		      var length = valuePrefix.length + value.length + valueSuffix.length,
  		          padding = length < width ? new Array(width - length + 1).join(fill) : "";

  		      // If the fill character is "0", grouping is applied after padding.
  		      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

  		      // Reconstruct the final output based on the desired alignment.
  		      switch (align) {
  		        case "<": value = valuePrefix + value + valueSuffix + padding; break;
  		        case "=": value = valuePrefix + padding + value + valueSuffix; break;
  		        case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
  		        default: value = padding + valuePrefix + value + valueSuffix; break;
  		      }

  		      return numerals(value);
  		    }

  		    format.toString = function() {
  		      return specifier + "";
  		    };

  		    return format;
  		  }

  		  function formatPrefix(specifier, value) {
  		    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
  		        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
  		        k = Math.pow(10, -e),
  		        prefix = prefixes[8 + e / 3];
  		    return function(value) {
  		      return f(k * value) + prefix;
  		    };
  		  }

  		  return {
  		    format: newFormat,
  		    formatPrefix: formatPrefix
  		  };
  		}

  		var locale;

  		defaultLocale({
  		  thousands: ",",
  		  grouping: [3],
  		  currency: ["$", ""]
  		});

  		function defaultLocale(definition) {
  		  locale = formatLocale(definition);
  		  exports.format = locale.format;
  		  exports.formatPrefix = locale.formatPrefix;
  		  return locale;
  		}

  		function precisionFixed(step) {
  		  return Math.max(0, -exponent(Math.abs(step)));
  		}

  		function precisionPrefix(step, value) {
  		  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
  		}

  		function precisionRound(step, max) {
  		  step = Math.abs(step), max = Math.abs(max) - step;
  		  return Math.max(0, exponent(max) - exponent(step)) + 1;
  		}

  		exports.FormatSpecifier = FormatSpecifier;
  		exports.formatDefaultLocale = defaultLocale;
  		exports.formatLocale = formatLocale;
  		exports.formatSpecifier = formatSpecifier;
  		exports.precisionFixed = precisionFixed;
  		exports.precisionPrefix = precisionPrefix;
  		exports.precisionRound = precisionRound;

  		Object.defineProperty(exports, '__esModule', { value: true });

  		})));
  } (d3Format, d3Format.exports));
  	return d3Format.exports;
  }

  var d3Time = {exports: {}};

  (function (module, exports) {
  	// https://d3js.org/d3-time/ v2.1.1 Copyright 2021 Mike Bostock
  	(function (global, factory) {
  	factory(exports, d3Array.exports) ;
  	}(commonjsGlobal, (function (exports, d3Array) {
  	var t0 = new Date,
  	    t1 = new Date;

  	function newInterval(floori, offseti, count, field) {

  	  function interval(date) {
  	    return floori(date = arguments.length === 0 ? new Date : new Date(+date)), date;
  	  }

  	  interval.floor = function(date) {
  	    return floori(date = new Date(+date)), date;
  	  };

  	  interval.ceil = function(date) {
  	    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  	  };

  	  interval.round = function(date) {
  	    var d0 = interval(date),
  	        d1 = interval.ceil(date);
  	    return date - d0 < d1 - date ? d0 : d1;
  	  };

  	  interval.offset = function(date, step) {
  	    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
  	  };

  	  interval.range = function(start, stop, step) {
  	    var range = [], previous;
  	    start = interval.ceil(start);
  	    step = step == null ? 1 : Math.floor(step);
  	    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
  	    do range.push(previous = new Date(+start)), offseti(start, step), floori(start);
  	    while (previous < start && start < stop);
  	    return range;
  	  };

  	  interval.filter = function(test) {
  	    return newInterval(function(date) {
  	      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
  	    }, function(date, step) {
  	      if (date >= date) {
  	        if (step < 0) while (++step <= 0) {
  	          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty
  	        } else while (--step >= 0) {
  	          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty
  	        }
  	      }
  	    });
  	  };

  	  if (count) {
  	    interval.count = function(start, end) {
  	      t0.setTime(+start), t1.setTime(+end);
  	      floori(t0), floori(t1);
  	      return Math.floor(count(t0, t1));
  	    };

  	    interval.every = function(step) {
  	      step = Math.floor(step);
  	      return !isFinite(step) || !(step > 0) ? null
  	          : !(step > 1) ? interval
  	          : interval.filter(field
  	              ? function(d) { return field(d) % step === 0; }
  	              : function(d) { return interval.count(0, d) % step === 0; });
  	    };
  	  }

  	  return interval;
  	}

  	var millisecond = newInterval(function() {
  	  // noop
  	}, function(date, step) {
  	  date.setTime(+date + step);
  	}, function(start, end) {
  	  return end - start;
  	});

  	// An optimized implementation for this simple case.
  	millisecond.every = function(k) {
  	  k = Math.floor(k);
  	  if (!isFinite(k) || !(k > 0)) return null;
  	  if (!(k > 1)) return millisecond;
  	  return newInterval(function(date) {
  	    date.setTime(Math.floor(date / k) * k);
  	  }, function(date, step) {
  	    date.setTime(+date + step * k);
  	  }, function(start, end) {
  	    return (end - start) / k;
  	  });
  	};
  	var milliseconds = millisecond.range;

  	const durationSecond = 1000;
  	const durationMinute = durationSecond * 60;
  	const durationHour = durationMinute * 60;
  	const durationDay = durationHour * 24;
  	const durationWeek = durationDay * 7;
  	const durationMonth = durationDay * 30;
  	const durationYear = durationDay * 365;

  	var second = newInterval(function(date) {
  	  date.setTime(date - date.getMilliseconds());
  	}, function(date, step) {
  	  date.setTime(+date + step * durationSecond);
  	}, function(start, end) {
  	  return (end - start) / durationSecond;
  	}, function(date) {
  	  return date.getUTCSeconds();
  	});
  	var seconds = second.range;

  	var minute = newInterval(function(date) {
  	  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
  	}, function(date, step) {
  	  date.setTime(+date + step * durationMinute);
  	}, function(start, end) {
  	  return (end - start) / durationMinute;
  	}, function(date) {
  	  return date.getMinutes();
  	});
  	var minutes = minute.range;

  	var hour = newInterval(function(date) {
  	  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
  	}, function(date, step) {
  	  date.setTime(+date + step * durationHour);
  	}, function(start, end) {
  	  return (end - start) / durationHour;
  	}, function(date) {
  	  return date.getHours();
  	});
  	var hours = hour.range;

  	var day = newInterval(
  	  date => date.setHours(0, 0, 0, 0),
  	  (date, step) => date.setDate(date.getDate() + step),
  	  (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay,
  	  date => date.getDate() - 1
  	);
  	var days = day.range;

  	function weekday(i) {
  	  return newInterval(function(date) {
  	    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
  	    date.setHours(0, 0, 0, 0);
  	  }, function(date, step) {
  	    date.setDate(date.getDate() + step * 7);
  	  }, function(start, end) {
  	    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
  	  });
  	}

  	var sunday = weekday(0);
  	var monday = weekday(1);
  	var tuesday = weekday(2);
  	var wednesday = weekday(3);
  	var thursday = weekday(4);
  	var friday = weekday(5);
  	var saturday = weekday(6);

  	var sundays = sunday.range;
  	var mondays = monday.range;
  	var tuesdays = tuesday.range;
  	var wednesdays = wednesday.range;
  	var thursdays = thursday.range;
  	var fridays = friday.range;
  	var saturdays = saturday.range;

  	var month = newInterval(function(date) {
  	  date.setDate(1);
  	  date.setHours(0, 0, 0, 0);
  	}, function(date, step) {
  	  date.setMonth(date.getMonth() + step);
  	}, function(start, end) {
  	  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
  	}, function(date) {
  	  return date.getMonth();
  	});
  	var months = month.range;

  	var year = newInterval(function(date) {
  	  date.setMonth(0, 1);
  	  date.setHours(0, 0, 0, 0);
  	}, function(date, step) {
  	  date.setFullYear(date.getFullYear() + step);
  	}, function(start, end) {
  	  return end.getFullYear() - start.getFullYear();
  	}, function(date) {
  	  return date.getFullYear();
  	});

  	// An optimized implementation for this simple case.
  	year.every = function(k) {
  	  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
  	    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
  	    date.setMonth(0, 1);
  	    date.setHours(0, 0, 0, 0);
  	  }, function(date, step) {
  	    date.setFullYear(date.getFullYear() + step * k);
  	  });
  	};
  	var years = year.range;

  	var utcMinute = newInterval(function(date) {
  	  date.setUTCSeconds(0, 0);
  	}, function(date, step) {
  	  date.setTime(+date + step * durationMinute);
  	}, function(start, end) {
  	  return (end - start) / durationMinute;
  	}, function(date) {
  	  return date.getUTCMinutes();
  	});
  	var utcMinutes = utcMinute.range;

  	var utcHour = newInterval(function(date) {
  	  date.setUTCMinutes(0, 0, 0);
  	}, function(date, step) {
  	  date.setTime(+date + step * durationHour);
  	}, function(start, end) {
  	  return (end - start) / durationHour;
  	}, function(date) {
  	  return date.getUTCHours();
  	});
  	var utcHours = utcHour.range;

  	var utcDay = newInterval(function(date) {
  	  date.setUTCHours(0, 0, 0, 0);
  	}, function(date, step) {
  	  date.setUTCDate(date.getUTCDate() + step);
  	}, function(start, end) {
  	  return (end - start) / durationDay;
  	}, function(date) {
  	  return date.getUTCDate() - 1;
  	});
  	var utcDays = utcDay.range;

  	function utcWeekday(i) {
  	  return newInterval(function(date) {
  	    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
  	    date.setUTCHours(0, 0, 0, 0);
  	  }, function(date, step) {
  	    date.setUTCDate(date.getUTCDate() + step * 7);
  	  }, function(start, end) {
  	    return (end - start) / durationWeek;
  	  });
  	}

  	var utcSunday = utcWeekday(0);
  	var utcMonday = utcWeekday(1);
  	var utcTuesday = utcWeekday(2);
  	var utcWednesday = utcWeekday(3);
  	var utcThursday = utcWeekday(4);
  	var utcFriday = utcWeekday(5);
  	var utcSaturday = utcWeekday(6);

  	var utcSundays = utcSunday.range;
  	var utcMondays = utcMonday.range;
  	var utcTuesdays = utcTuesday.range;
  	var utcWednesdays = utcWednesday.range;
  	var utcThursdays = utcThursday.range;
  	var utcFridays = utcFriday.range;
  	var utcSaturdays = utcSaturday.range;

  	var utcMonth = newInterval(function(date) {
  	  date.setUTCDate(1);
  	  date.setUTCHours(0, 0, 0, 0);
  	}, function(date, step) {
  	  date.setUTCMonth(date.getUTCMonth() + step);
  	}, function(start, end) {
  	  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
  	}, function(date) {
  	  return date.getUTCMonth();
  	});
  	var utcMonths = utcMonth.range;

  	var utcYear = newInterval(function(date) {
  	  date.setUTCMonth(0, 1);
  	  date.setUTCHours(0, 0, 0, 0);
  	}, function(date, step) {
  	  date.setUTCFullYear(date.getUTCFullYear() + step);
  	}, function(start, end) {
  	  return end.getUTCFullYear() - start.getUTCFullYear();
  	}, function(date) {
  	  return date.getUTCFullYear();
  	});

  	// An optimized implementation for this simple case.
  	utcYear.every = function(k) {
  	  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
  	    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
  	    date.setUTCMonth(0, 1);
  	    date.setUTCHours(0, 0, 0, 0);
  	  }, function(date, step) {
  	    date.setUTCFullYear(date.getUTCFullYear() + step * k);
  	  });
  	};
  	var utcYears = utcYear.range;

  	function ticker(year, month, week, day, hour, minute) {

  	  const tickIntervals = [
  	    [second,  1,      durationSecond],
  	    [second,  5,  5 * durationSecond],
  	    [second, 15, 15 * durationSecond],
  	    [second, 30, 30 * durationSecond],
  	    [minute,  1,      durationMinute],
  	    [minute,  5,  5 * durationMinute],
  	    [minute, 15, 15 * durationMinute],
  	    [minute, 30, 30 * durationMinute],
  	    [  hour,  1,      durationHour  ],
  	    [  hour,  3,  3 * durationHour  ],
  	    [  hour,  6,  6 * durationHour  ],
  	    [  hour, 12, 12 * durationHour  ],
  	    [   day,  1,      durationDay   ],
  	    [   day,  2,  2 * durationDay   ],
  	    [  week,  1,      durationWeek  ],
  	    [ month,  1,      durationMonth ],
  	    [ month,  3,  3 * durationMonth ],
  	    [  year,  1,      durationYear  ]
  	  ];

  	  function ticks(start, stop, count) {
  	    const reverse = stop < start;
  	    if (reverse) [start, stop] = [stop, start];
  	    const interval = count && typeof count.range === "function" ? count : tickInterval(start, stop, count);
  	    const ticks = interval ? interval.range(start, +stop + 1) : []; // inclusive stop
  	    return reverse ? ticks.reverse() : ticks;
  	  }

  	  function tickInterval(start, stop, count) {
  	    const target = Math.abs(stop - start) / count;
  	    const i = d3Array.bisector(([,, step]) => step).right(tickIntervals, target);
  	    if (i === tickIntervals.length) return year.every(d3Array.tickStep(start / durationYear, stop / durationYear, count));
  	    if (i === 0) return millisecond.every(Math.max(d3Array.tickStep(start, stop, count), 1));
  	    const [t, step] = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
  	    return t.every(step);
  	  }

  	  return [ticks, tickInterval];
  	}

  	const [utcTicks, utcTickInterval] = ticker(utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute);
  	const [timeTicks, timeTickInterval] = ticker(year, month, sunday, day, hour, minute);

  	exports.timeDay = day;
  	exports.timeDays = days;
  	exports.timeFriday = friday;
  	exports.timeFridays = fridays;
  	exports.timeHour = hour;
  	exports.timeHours = hours;
  	exports.timeInterval = newInterval;
  	exports.timeMillisecond = millisecond;
  	exports.timeMilliseconds = milliseconds;
  	exports.timeMinute = minute;
  	exports.timeMinutes = minutes;
  	exports.timeMonday = monday;
  	exports.timeMondays = mondays;
  	exports.timeMonth = month;
  	exports.timeMonths = months;
  	exports.timeSaturday = saturday;
  	exports.timeSaturdays = saturdays;
  	exports.timeSecond = second;
  	exports.timeSeconds = seconds;
  	exports.timeSunday = sunday;
  	exports.timeSundays = sundays;
  	exports.timeThursday = thursday;
  	exports.timeThursdays = thursdays;
  	exports.timeTickInterval = timeTickInterval;
  	exports.timeTicks = timeTicks;
  	exports.timeTuesday = tuesday;
  	exports.timeTuesdays = tuesdays;
  	exports.timeWednesday = wednesday;
  	exports.timeWednesdays = wednesdays;
  	exports.timeWeek = sunday;
  	exports.timeWeeks = sundays;
  	exports.timeYear = year;
  	exports.timeYears = years;
  	exports.utcDay = utcDay;
  	exports.utcDays = utcDays;
  	exports.utcFriday = utcFriday;
  	exports.utcFridays = utcFridays;
  	exports.utcHour = utcHour;
  	exports.utcHours = utcHours;
  	exports.utcMillisecond = millisecond;
  	exports.utcMilliseconds = milliseconds;
  	exports.utcMinute = utcMinute;
  	exports.utcMinutes = utcMinutes;
  	exports.utcMonday = utcMonday;
  	exports.utcMondays = utcMondays;
  	exports.utcMonth = utcMonth;
  	exports.utcMonths = utcMonths;
  	exports.utcSaturday = utcSaturday;
  	exports.utcSaturdays = utcSaturdays;
  	exports.utcSecond = second;
  	exports.utcSeconds = seconds;
  	exports.utcSunday = utcSunday;
  	exports.utcSundays = utcSundays;
  	exports.utcThursday = utcThursday;
  	exports.utcThursdays = utcThursdays;
  	exports.utcTickInterval = utcTickInterval;
  	exports.utcTicks = utcTicks;
  	exports.utcTuesday = utcTuesday;
  	exports.utcTuesdays = utcTuesdays;
  	exports.utcWednesday = utcWednesday;
  	exports.utcWednesdays = utcWednesdays;
  	exports.utcWeek = utcSunday;
  	exports.utcWeeks = utcSundays;
  	exports.utcYear = utcYear;
  	exports.utcYears = utcYears;

  	Object.defineProperty(exports, '__esModule', { value: true });

  	})));
  } (d3Time, d3Time.exports));

  var d3TimeFormat = {exports: {}};

  var hasRequiredD3TimeFormat;

  function requireD3TimeFormat () {
  	if (hasRequiredD3TimeFormat) return d3TimeFormat.exports;
  	hasRequiredD3TimeFormat = 1;
  	(function (module, exports) {
  		// https://d3js.org/d3-time-format/ v3.0.0 Copyright 2020 Mike Bostock
  		(function (global, factory) {
  		factory(exports, d3Time.exports) ;
  		}(commonjsGlobal, function (exports, d3Time) {
  		function localDate(d) {
  		  if (0 <= d.y && d.y < 100) {
  		    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
  		    date.setFullYear(d.y);
  		    return date;
  		  }
  		  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
  		}

  		function utcDate(d) {
  		  if (0 <= d.y && d.y < 100) {
  		    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
  		    date.setUTCFullYear(d.y);
  		    return date;
  		  }
  		  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
  		}

  		function newDate(y, m, d) {
  		  return {y: y, m: m, d: d, H: 0, M: 0, S: 0, L: 0};
  		}

  		function formatLocale(locale) {
  		  var locale_dateTime = locale.dateTime,
  		      locale_date = locale.date,
  		      locale_time = locale.time,
  		      locale_periods = locale.periods,
  		      locale_weekdays = locale.days,
  		      locale_shortWeekdays = locale.shortDays,
  		      locale_months = locale.months,
  		      locale_shortMonths = locale.shortMonths;

  		  var periodRe = formatRe(locale_periods),
  		      periodLookup = formatLookup(locale_periods),
  		      weekdayRe = formatRe(locale_weekdays),
  		      weekdayLookup = formatLookup(locale_weekdays),
  		      shortWeekdayRe = formatRe(locale_shortWeekdays),
  		      shortWeekdayLookup = formatLookup(locale_shortWeekdays),
  		      monthRe = formatRe(locale_months),
  		      monthLookup = formatLookup(locale_months),
  		      shortMonthRe = formatRe(locale_shortMonths),
  		      shortMonthLookup = formatLookup(locale_shortMonths);

  		  var formats = {
  		    "a": formatShortWeekday,
  		    "A": formatWeekday,
  		    "b": formatShortMonth,
  		    "B": formatMonth,
  		    "c": null,
  		    "d": formatDayOfMonth,
  		    "e": formatDayOfMonth,
  		    "f": formatMicroseconds,
  		    "g": formatYearISO,
  		    "G": formatFullYearISO,
  		    "H": formatHour24,
  		    "I": formatHour12,
  		    "j": formatDayOfYear,
  		    "L": formatMilliseconds,
  		    "m": formatMonthNumber,
  		    "M": formatMinutes,
  		    "p": formatPeriod,
  		    "q": formatQuarter,
  		    "Q": formatUnixTimestamp,
  		    "s": formatUnixTimestampSeconds,
  		    "S": formatSeconds,
  		    "u": formatWeekdayNumberMonday,
  		    "U": formatWeekNumberSunday,
  		    "V": formatWeekNumberISO,
  		    "w": formatWeekdayNumberSunday,
  		    "W": formatWeekNumberMonday,
  		    "x": null,
  		    "X": null,
  		    "y": formatYear,
  		    "Y": formatFullYear,
  		    "Z": formatZone,
  		    "%": formatLiteralPercent
  		  };

  		  var utcFormats = {
  		    "a": formatUTCShortWeekday,
  		    "A": formatUTCWeekday,
  		    "b": formatUTCShortMonth,
  		    "B": formatUTCMonth,
  		    "c": null,
  		    "d": formatUTCDayOfMonth,
  		    "e": formatUTCDayOfMonth,
  		    "f": formatUTCMicroseconds,
  		    "g": formatUTCYearISO,
  		    "G": formatUTCFullYearISO,
  		    "H": formatUTCHour24,
  		    "I": formatUTCHour12,
  		    "j": formatUTCDayOfYear,
  		    "L": formatUTCMilliseconds,
  		    "m": formatUTCMonthNumber,
  		    "M": formatUTCMinutes,
  		    "p": formatUTCPeriod,
  		    "q": formatUTCQuarter,
  		    "Q": formatUnixTimestamp,
  		    "s": formatUnixTimestampSeconds,
  		    "S": formatUTCSeconds,
  		    "u": formatUTCWeekdayNumberMonday,
  		    "U": formatUTCWeekNumberSunday,
  		    "V": formatUTCWeekNumberISO,
  		    "w": formatUTCWeekdayNumberSunday,
  		    "W": formatUTCWeekNumberMonday,
  		    "x": null,
  		    "X": null,
  		    "y": formatUTCYear,
  		    "Y": formatUTCFullYear,
  		    "Z": formatUTCZone,
  		    "%": formatLiteralPercent
  		  };

  		  var parses = {
  		    "a": parseShortWeekday,
  		    "A": parseWeekday,
  		    "b": parseShortMonth,
  		    "B": parseMonth,
  		    "c": parseLocaleDateTime,
  		    "d": parseDayOfMonth,
  		    "e": parseDayOfMonth,
  		    "f": parseMicroseconds,
  		    "g": parseYear,
  		    "G": parseFullYear,
  		    "H": parseHour24,
  		    "I": parseHour24,
  		    "j": parseDayOfYear,
  		    "L": parseMilliseconds,
  		    "m": parseMonthNumber,
  		    "M": parseMinutes,
  		    "p": parsePeriod,
  		    "q": parseQuarter,
  		    "Q": parseUnixTimestamp,
  		    "s": parseUnixTimestampSeconds,
  		    "S": parseSeconds,
  		    "u": parseWeekdayNumberMonday,
  		    "U": parseWeekNumberSunday,
  		    "V": parseWeekNumberISO,
  		    "w": parseWeekdayNumberSunday,
  		    "W": parseWeekNumberMonday,
  		    "x": parseLocaleDate,
  		    "X": parseLocaleTime,
  		    "y": parseYear,
  		    "Y": parseFullYear,
  		    "Z": parseZone,
  		    "%": parseLiteralPercent
  		  };

  		  // These recursive directive definitions must be deferred.
  		  formats.x = newFormat(locale_date, formats);
  		  formats.X = newFormat(locale_time, formats);
  		  formats.c = newFormat(locale_dateTime, formats);
  		  utcFormats.x = newFormat(locale_date, utcFormats);
  		  utcFormats.X = newFormat(locale_time, utcFormats);
  		  utcFormats.c = newFormat(locale_dateTime, utcFormats);

  		  function newFormat(specifier, formats) {
  		    return function(date) {
  		      var string = [],
  		          i = -1,
  		          j = 0,
  		          n = specifier.length,
  		          c,
  		          pad,
  		          format;

  		      if (!(date instanceof Date)) date = new Date(+date);

  		      while (++i < n) {
  		        if (specifier.charCodeAt(i) === 37) {
  		          string.push(specifier.slice(j, i));
  		          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
  		          else pad = c === "e" ? " " : "0";
  		          if (format = formats[c]) c = format(date, pad);
  		          string.push(c);
  		          j = i + 1;
  		        }
  		      }

  		      string.push(specifier.slice(j, i));
  		      return string.join("");
  		    };
  		  }

  		  function newParse(specifier, Z) {
  		    return function(string) {
  		      var d = newDate(1900, undefined, 1),
  		          i = parseSpecifier(d, specifier, string += "", 0),
  		          week, day;
  		      if (i != string.length) return null;

  		      // If a UNIX timestamp is specified, return it.
  		      if ("Q" in d) return new Date(d.Q);
  		      if ("s" in d) return new Date(d.s * 1000 + ("L" in d ? d.L : 0));

  		      // If this is utcParse, never use the local timezone.
  		      if (Z && !("Z" in d)) d.Z = 0;

  		      // The am-pm flag is 0 for AM, and 1 for PM.
  		      if ("p" in d) d.H = d.H % 12 + d.p * 12;

  		      // If the month was not specified, inherit from the quarter.
  		      if (d.m === undefined) d.m = "q" in d ? d.q : 0;

  		      // Convert day-of-week and week-of-year to day-of-year.
  		      if ("V" in d) {
  		        if (d.V < 1 || d.V > 53) return null;
  		        if (!("w" in d)) d.w = 1;
  		        if ("Z" in d) {
  		          week = utcDate(newDate(d.y, 0, 1)), day = week.getUTCDay();
  		          week = day > 4 || day === 0 ? d3Time.utcMonday.ceil(week) : d3Time.utcMonday(week);
  		          week = d3Time.utcDay.offset(week, (d.V - 1) * 7);
  		          d.y = week.getUTCFullYear();
  		          d.m = week.getUTCMonth();
  		          d.d = week.getUTCDate() + (d.w + 6) % 7;
  		        } else {
  		          week = localDate(newDate(d.y, 0, 1)), day = week.getDay();
  		          week = day > 4 || day === 0 ? d3Time.timeMonday.ceil(week) : d3Time.timeMonday(week);
  		          week = d3Time.timeDay.offset(week, (d.V - 1) * 7);
  		          d.y = week.getFullYear();
  		          d.m = week.getMonth();
  		          d.d = week.getDate() + (d.w + 6) % 7;
  		        }
  		      } else if ("W" in d || "U" in d) {
  		        if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
  		        day = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
  		        d.m = 0;
  		        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
  		      }

  		      // If a time zone is specified, all fields are interpreted as UTC and then
  		      // offset according to the specified time zone.
  		      if ("Z" in d) {
  		        d.H += d.Z / 100 | 0;
  		        d.M += d.Z % 100;
  		        return utcDate(d);
  		      }

  		      // Otherwise, all fields are in local time.
  		      return localDate(d);
  		    };
  		  }

  		  function parseSpecifier(d, specifier, string, j) {
  		    var i = 0,
  		        n = specifier.length,
  		        m = string.length,
  		        c,
  		        parse;

  		    while (i < n) {
  		      if (j >= m) return -1;
  		      c = specifier.charCodeAt(i++);
  		      if (c === 37) {
  		        c = specifier.charAt(i++);
  		        parse = parses[c in pads ? specifier.charAt(i++) : c];
  		        if (!parse || ((j = parse(d, string, j)) < 0)) return -1;
  		      } else if (c != string.charCodeAt(j++)) {
  		        return -1;
  		      }
  		    }

  		    return j;
  		  }

  		  function parsePeriod(d, string, i) {
  		    var n = periodRe.exec(string.slice(i));
  		    return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  		  }

  		  function parseShortWeekday(d, string, i) {
  		    var n = shortWeekdayRe.exec(string.slice(i));
  		    return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  		  }

  		  function parseWeekday(d, string, i) {
  		    var n = weekdayRe.exec(string.slice(i));
  		    return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  		  }

  		  function parseShortMonth(d, string, i) {
  		    var n = shortMonthRe.exec(string.slice(i));
  		    return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  		  }

  		  function parseMonth(d, string, i) {
  		    var n = monthRe.exec(string.slice(i));
  		    return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  		  }

  		  function parseLocaleDateTime(d, string, i) {
  		    return parseSpecifier(d, locale_dateTime, string, i);
  		  }

  		  function parseLocaleDate(d, string, i) {
  		    return parseSpecifier(d, locale_date, string, i);
  		  }

  		  function parseLocaleTime(d, string, i) {
  		    return parseSpecifier(d, locale_time, string, i);
  		  }

  		  function formatShortWeekday(d) {
  		    return locale_shortWeekdays[d.getDay()];
  		  }

  		  function formatWeekday(d) {
  		    return locale_weekdays[d.getDay()];
  		  }

  		  function formatShortMonth(d) {
  		    return locale_shortMonths[d.getMonth()];
  		  }

  		  function formatMonth(d) {
  		    return locale_months[d.getMonth()];
  		  }

  		  function formatPeriod(d) {
  		    return locale_periods[+(d.getHours() >= 12)];
  		  }

  		  function formatQuarter(d) {
  		    return 1 + ~~(d.getMonth() / 3);
  		  }

  		  function formatUTCShortWeekday(d) {
  		    return locale_shortWeekdays[d.getUTCDay()];
  		  }

  		  function formatUTCWeekday(d) {
  		    return locale_weekdays[d.getUTCDay()];
  		  }

  		  function formatUTCShortMonth(d) {
  		    return locale_shortMonths[d.getUTCMonth()];
  		  }

  		  function formatUTCMonth(d) {
  		    return locale_months[d.getUTCMonth()];
  		  }

  		  function formatUTCPeriod(d) {
  		    return locale_periods[+(d.getUTCHours() >= 12)];
  		  }

  		  function formatUTCQuarter(d) {
  		    return 1 + ~~(d.getUTCMonth() / 3);
  		  }

  		  return {
  		    format: function(specifier) {
  		      var f = newFormat(specifier += "", formats);
  		      f.toString = function() { return specifier; };
  		      return f;
  		    },
  		    parse: function(specifier) {
  		      var p = newParse(specifier += "", false);
  		      p.toString = function() { return specifier; };
  		      return p;
  		    },
  		    utcFormat: function(specifier) {
  		      var f = newFormat(specifier += "", utcFormats);
  		      f.toString = function() { return specifier; };
  		      return f;
  		    },
  		    utcParse: function(specifier) {
  		      var p = newParse(specifier += "", true);
  		      p.toString = function() { return specifier; };
  		      return p;
  		    }
  		  };
  		}

  		var pads = {"-": "", "_": " ", "0": "0"},
  		    numberRe = /^\s*\d+/, // note: ignores next directive
  		    percentRe = /^%/,
  		    requoteRe = /[\\^$*+?|[\]().{}]/g;

  		function pad(value, fill, width) {
  		  var sign = value < 0 ? "-" : "",
  		      string = (sign ? -value : value) + "",
  		      length = string.length;
  		  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
  		}

  		function requote(s) {
  		  return s.replace(requoteRe, "\\$&");
  		}

  		function formatRe(names) {
  		  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
  		}

  		function formatLookup(names) {
  		  return new Map(names.map((name, i) => [name.toLowerCase(), i]));
  		}

  		function parseWeekdayNumberSunday(d, string, i) {
  		  var n = numberRe.exec(string.slice(i, i + 1));
  		  return n ? (d.w = +n[0], i + n[0].length) : -1;
  		}

  		function parseWeekdayNumberMonday(d, string, i) {
  		  var n = numberRe.exec(string.slice(i, i + 1));
  		  return n ? (d.u = +n[0], i + n[0].length) : -1;
  		}

  		function parseWeekNumberSunday(d, string, i) {
  		  var n = numberRe.exec(string.slice(i, i + 2));
  		  return n ? (d.U = +n[0], i + n[0].length) : -1;
  		}

  		function parseWeekNumberISO(d, string, i) {
  		  var n = numberRe.exec(string.slice(i, i + 2));
  		  return n ? (d.V = +n[0], i + n[0].length) : -1;
  		}

  		function parseWeekNumberMonday(d, string, i) {
  		  var n = numberRe.exec(string.slice(i, i + 2));
  		  return n ? (d.W = +n[0], i + n[0].length) : -1;
  		}

  		function parseFullYear(d, string, i) {
  		  var n = numberRe.exec(string.slice(i, i + 4));
  		  return n ? (d.y = +n[0], i + n[0].length) : -1;
  		}

  		function parseYear(d, string, i) {
  		  var n = numberRe.exec(string.slice(i, i + 2));
  		  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
  		}

  		function parseZone(d, string, i) {
  		  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
  		  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
  		}

  		function parseQuarter(d, string, i) {
  		  var n = numberRe.exec(string.slice(i, i + 1));
  		  return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
  		}

  		function parseMonthNumber(d, string, i) {
  		  var n = numberRe.exec(string.slice(i, i + 2));
  		  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
  		}

  		function parseDayOfMonth(d, string, i) {
  		  var n = numberRe.exec(string.slice(i, i + 2));
  		  return n ? (d.d = +n[0], i + n[0].length) : -1;
  		}

  		function parseDayOfYear(d, string, i) {
  		  var n = numberRe.exec(string.slice(i, i + 3));
  		  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
  		}

  		function parseHour24(d, string, i) {
  		  var n = numberRe.exec(string.slice(i, i + 2));
  		  return n ? (d.H = +n[0], i + n[0].length) : -1;
  		}

  		function parseMinutes(d, string, i) {
  		  var n = numberRe.exec(string.slice(i, i + 2));
  		  return n ? (d.M = +n[0], i + n[0].length) : -1;
  		}

  		function parseSeconds(d, string, i) {
  		  var n = numberRe.exec(string.slice(i, i + 2));
  		  return n ? (d.S = +n[0], i + n[0].length) : -1;
  		}

  		function parseMilliseconds(d, string, i) {
  		  var n = numberRe.exec(string.slice(i, i + 3));
  		  return n ? (d.L = +n[0], i + n[0].length) : -1;
  		}

  		function parseMicroseconds(d, string, i) {
  		  var n = numberRe.exec(string.slice(i, i + 6));
  		  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
  		}

  		function parseLiteralPercent(d, string, i) {
  		  var n = percentRe.exec(string.slice(i, i + 1));
  		  return n ? i + n[0].length : -1;
  		}

  		function parseUnixTimestamp(d, string, i) {
  		  var n = numberRe.exec(string.slice(i));
  		  return n ? (d.Q = +n[0], i + n[0].length) : -1;
  		}

  		function parseUnixTimestampSeconds(d, string, i) {
  		  var n = numberRe.exec(string.slice(i));
  		  return n ? (d.s = +n[0], i + n[0].length) : -1;
  		}

  		function formatDayOfMonth(d, p) {
  		  return pad(d.getDate(), p, 2);
  		}

  		function formatHour24(d, p) {
  		  return pad(d.getHours(), p, 2);
  		}

  		function formatHour12(d, p) {
  		  return pad(d.getHours() % 12 || 12, p, 2);
  		}

  		function formatDayOfYear(d, p) {
  		  return pad(1 + d3Time.timeDay.count(d3Time.timeYear(d), d), p, 3);
  		}

  		function formatMilliseconds(d, p) {
  		  return pad(d.getMilliseconds(), p, 3);
  		}

  		function formatMicroseconds(d, p) {
  		  return formatMilliseconds(d, p) + "000";
  		}

  		function formatMonthNumber(d, p) {
  		  return pad(d.getMonth() + 1, p, 2);
  		}

  		function formatMinutes(d, p) {
  		  return pad(d.getMinutes(), p, 2);
  		}

  		function formatSeconds(d, p) {
  		  return pad(d.getSeconds(), p, 2);
  		}

  		function formatWeekdayNumberMonday(d) {
  		  var day = d.getDay();
  		  return day === 0 ? 7 : day;
  		}

  		function formatWeekNumberSunday(d, p) {
  		  return pad(d3Time.timeSunday.count(d3Time.timeYear(d) - 1, d), p, 2);
  		}

  		function dISO(d) {
  		  var day = d.getDay();
  		  return (day >= 4 || day === 0) ? d3Time.timeThursday(d) : d3Time.timeThursday.ceil(d);
  		}

  		function formatWeekNumberISO(d, p) {
  		  d = dISO(d);
  		  return pad(d3Time.timeThursday.count(d3Time.timeYear(d), d) + (d3Time.timeYear(d).getDay() === 4), p, 2);
  		}

  		function formatWeekdayNumberSunday(d) {
  		  return d.getDay();
  		}

  		function formatWeekNumberMonday(d, p) {
  		  return pad(d3Time.timeMonday.count(d3Time.timeYear(d) - 1, d), p, 2);
  		}

  		function formatYear(d, p) {
  		  return pad(d.getFullYear() % 100, p, 2);
  		}

  		function formatYearISO(d, p) {
  		  d = dISO(d);
  		  return pad(d.getFullYear() % 100, p, 2);
  		}

  		function formatFullYear(d, p) {
  		  return pad(d.getFullYear() % 10000, p, 4);
  		}

  		function formatFullYearISO(d, p) {
  		  var day = d.getDay();
  		  d = (day >= 4 || day === 0) ? d3Time.timeThursday(d) : d3Time.timeThursday.ceil(d);
  		  return pad(d.getFullYear() % 10000, p, 4);
  		}

  		function formatZone(d) {
  		  var z = d.getTimezoneOffset();
  		  return (z > 0 ? "-" : (z *= -1, "+"))
  		      + pad(z / 60 | 0, "0", 2)
  		      + pad(z % 60, "0", 2);
  		}

  		function formatUTCDayOfMonth(d, p) {
  		  return pad(d.getUTCDate(), p, 2);
  		}

  		function formatUTCHour24(d, p) {
  		  return pad(d.getUTCHours(), p, 2);
  		}

  		function formatUTCHour12(d, p) {
  		  return pad(d.getUTCHours() % 12 || 12, p, 2);
  		}

  		function formatUTCDayOfYear(d, p) {
  		  return pad(1 + d3Time.utcDay.count(d3Time.utcYear(d), d), p, 3);
  		}

  		function formatUTCMilliseconds(d, p) {
  		  return pad(d.getUTCMilliseconds(), p, 3);
  		}

  		function formatUTCMicroseconds(d, p) {
  		  return formatUTCMilliseconds(d, p) + "000";
  		}

  		function formatUTCMonthNumber(d, p) {
  		  return pad(d.getUTCMonth() + 1, p, 2);
  		}

  		function formatUTCMinutes(d, p) {
  		  return pad(d.getUTCMinutes(), p, 2);
  		}

  		function formatUTCSeconds(d, p) {
  		  return pad(d.getUTCSeconds(), p, 2);
  		}

  		function formatUTCWeekdayNumberMonday(d) {
  		  var dow = d.getUTCDay();
  		  return dow === 0 ? 7 : dow;
  		}

  		function formatUTCWeekNumberSunday(d, p) {
  		  return pad(d3Time.utcSunday.count(d3Time.utcYear(d) - 1, d), p, 2);
  		}

  		function UTCdISO(d) {
  		  var day = d.getUTCDay();
  		  return (day >= 4 || day === 0) ? d3Time.utcThursday(d) : d3Time.utcThursday.ceil(d);
  		}

  		function formatUTCWeekNumberISO(d, p) {
  		  d = UTCdISO(d);
  		  return pad(d3Time.utcThursday.count(d3Time.utcYear(d), d) + (d3Time.utcYear(d).getUTCDay() === 4), p, 2);
  		}

  		function formatUTCWeekdayNumberSunday(d) {
  		  return d.getUTCDay();
  		}

  		function formatUTCWeekNumberMonday(d, p) {
  		  return pad(d3Time.utcMonday.count(d3Time.utcYear(d) - 1, d), p, 2);
  		}

  		function formatUTCYear(d, p) {
  		  return pad(d.getUTCFullYear() % 100, p, 2);
  		}

  		function formatUTCYearISO(d, p) {
  		  d = UTCdISO(d);
  		  return pad(d.getUTCFullYear() % 100, p, 2);
  		}

  		function formatUTCFullYear(d, p) {
  		  return pad(d.getUTCFullYear() % 10000, p, 4);
  		}

  		function formatUTCFullYearISO(d, p) {
  		  var day = d.getUTCDay();
  		  d = (day >= 4 || day === 0) ? d3Time.utcThursday(d) : d3Time.utcThursday.ceil(d);
  		  return pad(d.getUTCFullYear() % 10000, p, 4);
  		}

  		function formatUTCZone() {
  		  return "+0000";
  		}

  		function formatLiteralPercent() {
  		  return "%";
  		}

  		function formatUnixTimestamp(d) {
  		  return +d;
  		}

  		function formatUnixTimestampSeconds(d) {
  		  return Math.floor(+d / 1000);
  		}

  		var locale;

  		defaultLocale({
  		  dateTime: "%x, %X",
  		  date: "%-m/%-d/%Y",
  		  time: "%-I:%M:%S %p",
  		  periods: ["AM", "PM"],
  		  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  		  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  		  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  		  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
  		});

  		function defaultLocale(definition) {
  		  locale = formatLocale(definition);
  		  exports.timeFormat = locale.format;
  		  exports.timeParse = locale.parse;
  		  exports.utcFormat = locale.utcFormat;
  		  exports.utcParse = locale.utcParse;
  		  return locale;
  		}

  		var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";

  		function formatIsoNative(date) {
  		  return date.toISOString();
  		}

  		var formatIso = Date.prototype.toISOString
  		    ? formatIsoNative
  		    : exports.utcFormat(isoSpecifier);

  		function parseIsoNative(string) {
  		  var date = new Date(string);
  		  return isNaN(date) ? null : date;
  		}

  		var parseIso = +new Date("2000-01-01T00:00:00.000Z")
  		    ? parseIsoNative
  		    : exports.utcParse(isoSpecifier);

  		exports.isoFormat = formatIso;
  		exports.isoParse = parseIso;
  		exports.timeFormatDefaultLocale = defaultLocale;
  		exports.timeFormatLocale = formatLocale;

  		Object.defineProperty(exports, '__esModule', { value: true });

  		}));
  } (d3TimeFormat, d3TimeFormat.exports));
  	return d3TimeFormat.exports;
  }

  (function (module, exports) {
  	// https://d3js.org/d3-scale/ v3.3.0 Copyright 2021 Mike Bostock
  	(function (global, factory) {
  	factory(exports, d3Array.exports, requireD3Interpolate(), requireD3Format(), d3Time.exports, requireD3TimeFormat()) ;
  	}(commonjsGlobal, (function (exports, d3Array, d3Interpolate, d3Format, d3Time, d3TimeFormat) {
  	function initRange(domain, range) {
  	  switch (arguments.length) {
  	    case 0: break;
  	    case 1: this.range(domain); break;
  	    default: this.range(range).domain(domain); break;
  	  }
  	  return this;
  	}

  	function initInterpolator(domain, interpolator) {
  	  switch (arguments.length) {
  	    case 0: break;
  	    case 1: {
  	      if (typeof domain === "function") this.interpolator(domain);
  	      else this.range(domain);
  	      break;
  	    }
  	    default: {
  	      this.domain(domain);
  	      if (typeof interpolator === "function") this.interpolator(interpolator);
  	      else this.range(interpolator);
  	      break;
  	    }
  	  }
  	  return this;
  	}

  	const implicit = Symbol("implicit");

  	function ordinal() {
  	  var index = new Map(),
  	      domain = [],
  	      range = [],
  	      unknown = implicit;

  	  function scale(d) {
  	    var key = d + "", i = index.get(key);
  	    if (!i) {
  	      if (unknown !== implicit) return unknown;
  	      index.set(key, i = domain.push(d));
  	    }
  	    return range[(i - 1) % range.length];
  	  }

  	  scale.domain = function(_) {
  	    if (!arguments.length) return domain.slice();
  	    domain = [], index = new Map();
  	    for (const value of _) {
  	      const key = value + "";
  	      if (index.has(key)) continue;
  	      index.set(key, domain.push(value));
  	    }
  	    return scale;
  	  };

  	  scale.range = function(_) {
  	    return arguments.length ? (range = Array.from(_), scale) : range.slice();
  	  };

  	  scale.unknown = function(_) {
  	    return arguments.length ? (unknown = _, scale) : unknown;
  	  };

  	  scale.copy = function() {
  	    return ordinal(domain, range).unknown(unknown);
  	  };

  	  initRange.apply(scale, arguments);

  	  return scale;
  	}

  	function band() {
  	  var scale = ordinal().unknown(undefined),
  	      domain = scale.domain,
  	      ordinalRange = scale.range,
  	      r0 = 0,
  	      r1 = 1,
  	      step,
  	      bandwidth,
  	      round = false,
  	      paddingInner = 0,
  	      paddingOuter = 0,
  	      align = 0.5;

  	  delete scale.unknown;

  	  function rescale() {
  	    var n = domain().length,
  	        reverse = r1 < r0,
  	        start = reverse ? r1 : r0,
  	        stop = reverse ? r0 : r1;
  	    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
  	    if (round) step = Math.floor(step);
  	    start += (stop - start - step * (n - paddingInner)) * align;
  	    bandwidth = step * (1 - paddingInner);
  	    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
  	    var values = d3Array.range(n).map(function(i) { return start + step * i; });
  	    return ordinalRange(reverse ? values.reverse() : values);
  	  }

  	  scale.domain = function(_) {
  	    return arguments.length ? (domain(_), rescale()) : domain();
  	  };

  	  scale.range = function(_) {
  	    return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
  	  };

  	  scale.rangeRound = function(_) {
  	    return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();
  	  };

  	  scale.bandwidth = function() {
  	    return bandwidth;
  	  };

  	  scale.step = function() {
  	    return step;
  	  };

  	  scale.round = function(_) {
  	    return arguments.length ? (round = !!_, rescale()) : round;
  	  };

  	  scale.padding = function(_) {
  	    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
  	  };

  	  scale.paddingInner = function(_) {
  	    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
  	  };

  	  scale.paddingOuter = function(_) {
  	    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
  	  };

  	  scale.align = function(_) {
  	    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
  	  };

  	  scale.copy = function() {
  	    return band(domain(), [r0, r1])
  	        .round(round)
  	        .paddingInner(paddingInner)
  	        .paddingOuter(paddingOuter)
  	        .align(align);
  	  };

  	  return initRange.apply(rescale(), arguments);
  	}

  	function pointish(scale) {
  	  var copy = scale.copy;

  	  scale.padding = scale.paddingOuter;
  	  delete scale.paddingInner;
  	  delete scale.paddingOuter;

  	  scale.copy = function() {
  	    return pointish(copy());
  	  };

  	  return scale;
  	}

  	function point() {
  	  return pointish(band.apply(null, arguments).paddingInner(1));
  	}

  	function constants(x) {
  	  return function() {
  	    return x;
  	  };
  	}

  	function number$1(x) {
  	  return +x;
  	}

  	var unit = [0, 1];

  	function identity$1(x) {
  	  return x;
  	}

  	function normalize(a, b) {
  	  return (b -= (a = +a))
  	      ? function(x) { return (x - a) / b; }
  	      : constants(isNaN(b) ? NaN : 0.5);
  	}

  	function clamper(a, b) {
  	  var t;
  	  if (a > b) t = a, a = b, b = t;
  	  return function(x) { return Math.max(a, Math.min(b, x)); };
  	}

  	// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
  	// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].
  	function bimap(domain, range, interpolate) {
  	  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
  	  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
  	  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
  	  return function(x) { return r0(d0(x)); };
  	}

  	function polymap(domain, range, interpolate) {
  	  var j = Math.min(domain.length, range.length) - 1,
  	      d = new Array(j),
  	      r = new Array(j),
  	      i = -1;

  	  // Reverse descending domains.
  	  if (domain[j] < domain[0]) {
  	    domain = domain.slice().reverse();
  	    range = range.slice().reverse();
  	  }

  	  while (++i < j) {
  	    d[i] = normalize(domain[i], domain[i + 1]);
  	    r[i] = interpolate(range[i], range[i + 1]);
  	  }

  	  return function(x) {
  	    var i = d3Array.bisect(domain, x, 1, j) - 1;
  	    return r[i](d[i](x));
  	  };
  	}

  	function copy$1(source, target) {
  	  return target
  	      .domain(source.domain())
  	      .range(source.range())
  	      .interpolate(source.interpolate())
  	      .clamp(source.clamp())
  	      .unknown(source.unknown());
  	}

  	function transformer$2() {
  	  var domain = unit,
  	      range = unit,
  	      interpolate = d3Interpolate.interpolate,
  	      transform,
  	      untransform,
  	      unknown,
  	      clamp = identity$1,
  	      piecewise,
  	      output,
  	      input;

  	  function rescale() {
  	    var n = Math.min(domain.length, range.length);
  	    if (clamp !== identity$1) clamp = clamper(domain[0], domain[n - 1]);
  	    piecewise = n > 2 ? polymap : bimap;
  	    output = input = null;
  	    return scale;
  	  }

  	  function scale(x) {
  	    return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
  	  }

  	  scale.invert = function(y) {
  	    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), d3Interpolate.interpolateNumber)))(y)));
  	  };

  	  scale.domain = function(_) {
  	    return arguments.length ? (domain = Array.from(_, number$1), rescale()) : domain.slice();
  	  };

  	  scale.range = function(_) {
  	    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
  	  };

  	  scale.rangeRound = function(_) {
  	    return range = Array.from(_), interpolate = d3Interpolate.interpolateRound, rescale();
  	  };

  	  scale.clamp = function(_) {
  	    return arguments.length ? (clamp = _ ? true : identity$1, rescale()) : clamp !== identity$1;
  	  };

  	  scale.interpolate = function(_) {
  	    return arguments.length ? (interpolate = _, rescale()) : interpolate;
  	  };

  	  scale.unknown = function(_) {
  	    return arguments.length ? (unknown = _, scale) : unknown;
  	  };

  	  return function(t, u) {
  	    transform = t, untransform = u;
  	    return rescale();
  	  };
  	}

  	function continuous() {
  	  return transformer$2()(identity$1, identity$1);
  	}

  	function tickFormat(start, stop, count, specifier) {
  	  var step = d3Array.tickStep(start, stop, count),
  	      precision;
  	  specifier = d3Format.formatSpecifier(specifier == null ? ",f" : specifier);
  	  switch (specifier.type) {
  	    case "s": {
  	      var value = Math.max(Math.abs(start), Math.abs(stop));
  	      if (specifier.precision == null && !isNaN(precision = d3Format.precisionPrefix(step, value))) specifier.precision = precision;
  	      return d3Format.formatPrefix(specifier, value);
  	    }
  	    case "":
  	    case "e":
  	    case "g":
  	    case "p":
  	    case "r": {
  	      if (specifier.precision == null && !isNaN(precision = d3Format.precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
  	      break;
  	    }
  	    case "f":
  	    case "%": {
  	      if (specifier.precision == null && !isNaN(precision = d3Format.precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
  	      break;
  	    }
  	  }
  	  return d3Format.format(specifier);
  	}

  	function linearish(scale) {
  	  var domain = scale.domain;

  	  scale.ticks = function(count) {
  	    var d = domain();
  	    return d3Array.ticks(d[0], d[d.length - 1], count == null ? 10 : count);
  	  };

  	  scale.tickFormat = function(count, specifier) {
  	    var d = domain();
  	    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
  	  };

  	  scale.nice = function(count) {
  	    if (count == null) count = 10;

  	    var d = domain();
  	    var i0 = 0;
  	    var i1 = d.length - 1;
  	    var start = d[i0];
  	    var stop = d[i1];
  	    var prestep;
  	    var step;
  	    var maxIter = 10;

  	    if (stop < start) {
  	      step = start, start = stop, stop = step;
  	      step = i0, i0 = i1, i1 = step;
  	    }
  	    
  	    while (maxIter-- > 0) {
  	      step = d3Array.tickIncrement(start, stop, count);
  	      if (step === prestep) {
  	        d[i0] = start;
  	        d[i1] = stop;
  	        return domain(d);
  	      } else if (step > 0) {
  	        start = Math.floor(start / step) * step;
  	        stop = Math.ceil(stop / step) * step;
  	      } else if (step < 0) {
  	        start = Math.ceil(start * step) / step;
  	        stop = Math.floor(stop * step) / step;
  	      } else {
  	        break;
  	      }
  	      prestep = step;
  	    }

  	    return scale;
  	  };

  	  return scale;
  	}

  	function linear() {
  	  var scale = continuous();

  	  scale.copy = function() {
  	    return copy$1(scale, linear());
  	  };

  	  initRange.apply(scale, arguments);

  	  return linearish(scale);
  	}

  	function identity(domain) {
  	  var unknown;

  	  function scale(x) {
  	    return x == null || isNaN(x = +x) ? unknown : x;
  	  }

  	  scale.invert = scale;

  	  scale.domain = scale.range = function(_) {
  	    return arguments.length ? (domain = Array.from(_, number$1), scale) : domain.slice();
  	  };

  	  scale.unknown = function(_) {
  	    return arguments.length ? (unknown = _, scale) : unknown;
  	  };

  	  scale.copy = function() {
  	    return identity(domain).unknown(unknown);
  	  };

  	  domain = arguments.length ? Array.from(domain, number$1) : [0, 1];

  	  return linearish(scale);
  	}

  	function nice(domain, interval) {
  	  domain = domain.slice();

  	  var i0 = 0,
  	      i1 = domain.length - 1,
  	      x0 = domain[i0],
  	      x1 = domain[i1],
  	      t;

  	  if (x1 < x0) {
  	    t = i0, i0 = i1, i1 = t;
  	    t = x0, x0 = x1, x1 = t;
  	  }

  	  domain[i0] = interval.floor(x0);
  	  domain[i1] = interval.ceil(x1);
  	  return domain;
  	}

  	function transformLog(x) {
  	  return Math.log(x);
  	}

  	function transformExp(x) {
  	  return Math.exp(x);
  	}

  	function transformLogn(x) {
  	  return -Math.log(-x);
  	}

  	function transformExpn(x) {
  	  return -Math.exp(-x);
  	}

  	function pow10(x) {
  	  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
  	}

  	function powp(base) {
  	  return base === 10 ? pow10
  	      : base === Math.E ? Math.exp
  	      : function(x) { return Math.pow(base, x); };
  	}

  	function logp(base) {
  	  return base === Math.E ? Math.log
  	      : base === 10 && Math.log10
  	      || base === 2 && Math.log2
  	      || (base = Math.log(base), function(x) { return Math.log(x) / base; });
  	}

  	function reflect(f) {
  	  return function(x) {
  	    return -f(-x);
  	  };
  	}

  	function loggish(transform) {
  	  var scale = transform(transformLog, transformExp),
  	      domain = scale.domain,
  	      base = 10,
  	      logs,
  	      pows;

  	  function rescale() {
  	    logs = logp(base), pows = powp(base);
  	    if (domain()[0] < 0) {
  	      logs = reflect(logs), pows = reflect(pows);
  	      transform(transformLogn, transformExpn);
  	    } else {
  	      transform(transformLog, transformExp);
  	    }
  	    return scale;
  	  }

  	  scale.base = function(_) {
  	    return arguments.length ? (base = +_, rescale()) : base;
  	  };

  	  scale.domain = function(_) {
  	    return arguments.length ? (domain(_), rescale()) : domain();
  	  };

  	  scale.ticks = function(count) {
  	    var d = domain(),
  	        u = d[0],
  	        v = d[d.length - 1],
  	        r;

  	    if (r = v < u) i = u, u = v, v = i;

  	    var i = logs(u),
  	        j = logs(v),
  	        p,
  	        k,
  	        t,
  	        n = count == null ? 10 : +count,
  	        z = [];

  	    if (!(base % 1) && j - i < n) {
  	      i = Math.floor(i), j = Math.ceil(j);
  	      if (u > 0) for (; i <= j; ++i) {
  	        for (k = 1, p = pows(i); k < base; ++k) {
  	          t = p * k;
  	          if (t < u) continue;
  	          if (t > v) break;
  	          z.push(t);
  	        }
  	      } else for (; i <= j; ++i) {
  	        for (k = base - 1, p = pows(i); k >= 1; --k) {
  	          t = p * k;
  	          if (t < u) continue;
  	          if (t > v) break;
  	          z.push(t);
  	        }
  	      }
  	      if (z.length * 2 < n) z = d3Array.ticks(u, v, n);
  	    } else {
  	      z = d3Array.ticks(i, j, Math.min(j - i, n)).map(pows);
  	    }

  	    return r ? z.reverse() : z;
  	  };

  	  scale.tickFormat = function(count, specifier) {
  	    if (specifier == null) specifier = base === 10 ? ".0e" : ",";
  	    if (typeof specifier !== "function") specifier = d3Format.format(specifier);
  	    if (count === Infinity) return specifier;
  	    if (count == null) count = 10;
  	    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
  	    return function(d) {
  	      var i = d / pows(Math.round(logs(d)));
  	      if (i * base < base - 0.5) i *= base;
  	      return i <= k ? specifier(d) : "";
  	    };
  	  };

  	  scale.nice = function() {
  	    return domain(nice(domain(), {
  	      floor: function(x) { return pows(Math.floor(logs(x))); },
  	      ceil: function(x) { return pows(Math.ceil(logs(x))); }
  	    }));
  	  };

  	  return scale;
  	}

  	function log() {
  	  var scale = loggish(transformer$2()).domain([1, 10]);

  	  scale.copy = function() {
  	    return copy$1(scale, log()).base(scale.base());
  	  };

  	  initRange.apply(scale, arguments);

  	  return scale;
  	}

  	function transformSymlog(c) {
  	  return function(x) {
  	    return Math.sign(x) * Math.log1p(Math.abs(x / c));
  	  };
  	}

  	function transformSymexp(c) {
  	  return function(x) {
  	    return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
  	  };
  	}

  	function symlogish(transform) {
  	  var c = 1, scale = transform(transformSymlog(c), transformSymexp(c));

  	  scale.constant = function(_) {
  	    return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;
  	  };

  	  return linearish(scale);
  	}

  	function symlog() {
  	  var scale = symlogish(transformer$2());

  	  scale.copy = function() {
  	    return copy$1(scale, symlog()).constant(scale.constant());
  	  };

  	  return initRange.apply(scale, arguments);
  	}

  	function transformPow(exponent) {
  	  return function(x) {
  	    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
  	  };
  	}

  	function transformSqrt(x) {
  	  return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
  	}

  	function transformSquare(x) {
  	  return x < 0 ? -x * x : x * x;
  	}

  	function powish(transform) {
  	  var scale = transform(identity$1, identity$1),
  	      exponent = 1;

  	  function rescale() {
  	    return exponent === 1 ? transform(identity$1, identity$1)
  	        : exponent === 0.5 ? transform(transformSqrt, transformSquare)
  	        : transform(transformPow(exponent), transformPow(1 / exponent));
  	  }

  	  scale.exponent = function(_) {
  	    return arguments.length ? (exponent = +_, rescale()) : exponent;
  	  };

  	  return linearish(scale);
  	}

  	function pow() {
  	  var scale = powish(transformer$2());

  	  scale.copy = function() {
  	    return copy$1(scale, pow()).exponent(scale.exponent());
  	  };

  	  initRange.apply(scale, arguments);

  	  return scale;
  	}

  	function sqrt() {
  	  return pow.apply(null, arguments).exponent(0.5);
  	}

  	function square(x) {
  	  return Math.sign(x) * x * x;
  	}

  	function unsquare(x) {
  	  return Math.sign(x) * Math.sqrt(Math.abs(x));
  	}

  	function radial() {
  	  var squared = continuous(),
  	      range = [0, 1],
  	      round = false,
  	      unknown;

  	  function scale(x) {
  	    var y = unsquare(squared(x));
  	    return isNaN(y) ? unknown : round ? Math.round(y) : y;
  	  }

  	  scale.invert = function(y) {
  	    return squared.invert(square(y));
  	  };

  	  scale.domain = function(_) {
  	    return arguments.length ? (squared.domain(_), scale) : squared.domain();
  	  };

  	  scale.range = function(_) {
  	    return arguments.length ? (squared.range((range = Array.from(_, number$1)).map(square)), scale) : range.slice();
  	  };

  	  scale.rangeRound = function(_) {
  	    return scale.range(_).round(true);
  	  };

  	  scale.round = function(_) {
  	    return arguments.length ? (round = !!_, scale) : round;
  	  };

  	  scale.clamp = function(_) {
  	    return arguments.length ? (squared.clamp(_), scale) : squared.clamp();
  	  };

  	  scale.unknown = function(_) {
  	    return arguments.length ? (unknown = _, scale) : unknown;
  	  };

  	  scale.copy = function() {
  	    return radial(squared.domain(), range)
  	        .round(round)
  	        .clamp(squared.clamp())
  	        .unknown(unknown);
  	  };

  	  initRange.apply(scale, arguments);

  	  return linearish(scale);
  	}

  	function quantile() {
  	  var domain = [],
  	      range = [],
  	      thresholds = [],
  	      unknown;

  	  function rescale() {
  	    var i = 0, n = Math.max(1, range.length);
  	    thresholds = new Array(n - 1);
  	    while (++i < n) thresholds[i - 1] = d3Array.quantileSorted(domain, i / n);
  	    return scale;
  	  }

  	  function scale(x) {
  	    return x == null || isNaN(x = +x) ? unknown : range[d3Array.bisect(thresholds, x)];
  	  }

  	  scale.invertExtent = function(y) {
  	    var i = range.indexOf(y);
  	    return i < 0 ? [NaN, NaN] : [
  	      i > 0 ? thresholds[i - 1] : domain[0],
  	      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
  	    ];
  	  };

  	  scale.domain = function(_) {
  	    if (!arguments.length) return domain.slice();
  	    domain = [];
  	    for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);
  	    domain.sort(d3Array.ascending);
  	    return rescale();
  	  };

  	  scale.range = function(_) {
  	    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
  	  };

  	  scale.unknown = function(_) {
  	    return arguments.length ? (unknown = _, scale) : unknown;
  	  };

  	  scale.quantiles = function() {
  	    return thresholds.slice();
  	  };

  	  scale.copy = function() {
  	    return quantile()
  	        .domain(domain)
  	        .range(range)
  	        .unknown(unknown);
  	  };

  	  return initRange.apply(scale, arguments);
  	}

  	function quantize() {
  	  var x0 = 0,
  	      x1 = 1,
  	      n = 1,
  	      domain = [0.5],
  	      range = [0, 1],
  	      unknown;

  	  function scale(x) {
  	    return x != null && x <= x ? range[d3Array.bisect(domain, x, 0, n)] : unknown;
  	  }

  	  function rescale() {
  	    var i = -1;
  	    domain = new Array(n);
  	    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
  	    return scale;
  	  }

  	  scale.domain = function(_) {
  	    return arguments.length ? ([x0, x1] = _, x0 = +x0, x1 = +x1, rescale()) : [x0, x1];
  	  };

  	  scale.range = function(_) {
  	    return arguments.length ? (n = (range = Array.from(_)).length - 1, rescale()) : range.slice();
  	  };

  	  scale.invertExtent = function(y) {
  	    var i = range.indexOf(y);
  	    return i < 0 ? [NaN, NaN]
  	        : i < 1 ? [x0, domain[0]]
  	        : i >= n ? [domain[n - 1], x1]
  	        : [domain[i - 1], domain[i]];
  	  };

  	  scale.unknown = function(_) {
  	    return arguments.length ? (unknown = _, scale) : scale;
  	  };

  	  scale.thresholds = function() {
  	    return domain.slice();
  	  };

  	  scale.copy = function() {
  	    return quantize()
  	        .domain([x0, x1])
  	        .range(range)
  	        .unknown(unknown);
  	  };

  	  return initRange.apply(linearish(scale), arguments);
  	}

  	function threshold() {
  	  var domain = [0.5],
  	      range = [0, 1],
  	      unknown,
  	      n = 1;

  	  function scale(x) {
  	    return x != null && x <= x ? range[d3Array.bisect(domain, x, 0, n)] : unknown;
  	  }

  	  scale.domain = function(_) {
  	    return arguments.length ? (domain = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
  	  };

  	  scale.range = function(_) {
  	    return arguments.length ? (range = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
  	  };

  	  scale.invertExtent = function(y) {
  	    var i = range.indexOf(y);
  	    return [domain[i - 1], domain[i]];
  	  };

  	  scale.unknown = function(_) {
  	    return arguments.length ? (unknown = _, scale) : unknown;
  	  };

  	  scale.copy = function() {
  	    return threshold()
  	        .domain(domain)
  	        .range(range)
  	        .unknown(unknown);
  	  };

  	  return initRange.apply(scale, arguments);
  	}

  	function date(t) {
  	  return new Date(t);
  	}

  	function number(t) {
  	  return t instanceof Date ? +t : +new Date(+t);
  	}

  	function calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format) {
  	  var scale = continuous(),
  	      invert = scale.invert,
  	      domain = scale.domain;

  	  var formatMillisecond = format(".%L"),
  	      formatSecond = format(":%S"),
  	      formatMinute = format("%I:%M"),
  	      formatHour = format("%I %p"),
  	      formatDay = format("%a %d"),
  	      formatWeek = format("%b %d"),
  	      formatMonth = format("%B"),
  	      formatYear = format("%Y");

  	  function tickFormat(date) {
  	    return (second(date) < date ? formatMillisecond
  	        : minute(date) < date ? formatSecond
  	        : hour(date) < date ? formatMinute
  	        : day(date) < date ? formatHour
  	        : month(date) < date ? (week(date) < date ? formatDay : formatWeek)
  	        : year(date) < date ? formatMonth
  	        : formatYear)(date);
  	  }

  	  scale.invert = function(y) {
  	    return new Date(invert(y));
  	  };

  	  scale.domain = function(_) {
  	    return arguments.length ? domain(Array.from(_, number)) : domain().map(date);
  	  };

  	  scale.ticks = function(interval) {
  	    var d = domain();
  	    return ticks(d[0], d[d.length - 1], interval == null ? 10 : interval);
  	  };

  	  scale.tickFormat = function(count, specifier) {
  	    return specifier == null ? tickFormat : format(specifier);
  	  };

  	  scale.nice = function(interval) {
  	    var d = domain();
  	    if (!interval || typeof interval.range !== "function") interval = tickInterval(d[0], d[d.length - 1], interval == null ? 10 : interval);
  	    return interval ? domain(nice(d, interval)) : scale;
  	  };

  	  scale.copy = function() {
  	    return copy$1(scale, calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format));
  	  };

  	  return scale;
  	}

  	function time() {
  	  return initRange.apply(calendar(d3Time.timeTicks, d3Time.timeTickInterval, d3Time.timeYear, d3Time.timeMonth, d3Time.timeWeek, d3Time.timeDay, d3Time.timeHour, d3Time.timeMinute, d3Time.timeSecond, d3TimeFormat.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);
  	}

  	function utcTime() {
  	  return initRange.apply(calendar(d3Time.utcTicks, d3Time.utcTickInterval, d3Time.utcYear, d3Time.utcMonth, d3Time.utcWeek, d3Time.utcDay, d3Time.utcHour, d3Time.utcMinute, d3Time.utcSecond, d3TimeFormat.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);
  	}

  	function transformer$1() {
  	  var x0 = 0,
  	      x1 = 1,
  	      t0,
  	      t1,
  	      k10,
  	      transform,
  	      interpolator = identity$1,
  	      clamp = false,
  	      unknown;

  	  function scale(x) {
  	    return x == null || isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));
  	  }

  	  scale.domain = function(_) {
  	    return arguments.length ? ([x0, x1] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];
  	  };

  	  scale.clamp = function(_) {
  	    return arguments.length ? (clamp = !!_, scale) : clamp;
  	  };

  	  scale.interpolator = function(_) {
  	    return arguments.length ? (interpolator = _, scale) : interpolator;
  	  };

  	  function range(interpolate) {
  	    return function(_) {
  	      var r0, r1;
  	      return arguments.length ? ([r0, r1] = _, interpolator = interpolate(r0, r1), scale) : [interpolator(0), interpolator(1)];
  	    };
  	  }

  	  scale.range = range(d3Interpolate.interpolate);

  	  scale.rangeRound = range(d3Interpolate.interpolateRound);

  	  scale.unknown = function(_) {
  	    return arguments.length ? (unknown = _, scale) : unknown;
  	  };

  	  return function(t) {
  	    transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);
  	    return scale;
  	  };
  	}

  	function copy(source, target) {
  	  return target
  	      .domain(source.domain())
  	      .interpolator(source.interpolator())
  	      .clamp(source.clamp())
  	      .unknown(source.unknown());
  	}

  	function sequential() {
  	  var scale = linearish(transformer$1()(identity$1));

  	  scale.copy = function() {
  	    return copy(scale, sequential());
  	  };

  	  return initInterpolator.apply(scale, arguments);
  	}

  	function sequentialLog() {
  	  var scale = loggish(transformer$1()).domain([1, 10]);

  	  scale.copy = function() {
  	    return copy(scale, sequentialLog()).base(scale.base());
  	  };

  	  return initInterpolator.apply(scale, arguments);
  	}

  	function sequentialSymlog() {
  	  var scale = symlogish(transformer$1());

  	  scale.copy = function() {
  	    return copy(scale, sequentialSymlog()).constant(scale.constant());
  	  };

  	  return initInterpolator.apply(scale, arguments);
  	}

  	function sequentialPow() {
  	  var scale = powish(transformer$1());

  	  scale.copy = function() {
  	    return copy(scale, sequentialPow()).exponent(scale.exponent());
  	  };

  	  return initInterpolator.apply(scale, arguments);
  	}

  	function sequentialSqrt() {
  	  return sequentialPow.apply(null, arguments).exponent(0.5);
  	}

  	function sequentialQuantile() {
  	  var domain = [],
  	      interpolator = identity$1;

  	  function scale(x) {
  	    if (x != null && !isNaN(x = +x)) return interpolator((d3Array.bisect(domain, x, 1) - 1) / (domain.length - 1));
  	  }

  	  scale.domain = function(_) {
  	    if (!arguments.length) return domain.slice();
  	    domain = [];
  	    for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);
  	    domain.sort(d3Array.ascending);
  	    return scale;
  	  };

  	  scale.interpolator = function(_) {
  	    return arguments.length ? (interpolator = _, scale) : interpolator;
  	  };

  	  scale.range = function() {
  	    return domain.map((d, i) => interpolator(i / (domain.length - 1)));
  	  };

  	  scale.quantiles = function(n) {
  	    return Array.from({length: n + 1}, (_, i) => d3Array.quantile(domain, i / n));
  	  };

  	  scale.copy = function() {
  	    return sequentialQuantile(interpolator).domain(domain);
  	  };

  	  return initInterpolator.apply(scale, arguments);
  	}

  	function transformer() {
  	  var x0 = 0,
  	      x1 = 0.5,
  	      x2 = 1,
  	      s = 1,
  	      t0,
  	      t1,
  	      t2,
  	      k10,
  	      k21,
  	      interpolator = identity$1,
  	      transform,
  	      clamp = false,
  	      unknown;

  	  function scale(x) {
  	    return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (s * x < s * t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));
  	  }

  	  scale.domain = function(_) {
  	    return arguments.length ? ([x0, x1, x2] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), t2 = transform(x2 = +x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1, scale) : [x0, x1, x2];
  	  };

  	  scale.clamp = function(_) {
  	    return arguments.length ? (clamp = !!_, scale) : clamp;
  	  };

  	  scale.interpolator = function(_) {
  	    return arguments.length ? (interpolator = _, scale) : interpolator;
  	  };

  	  function range(interpolate) {
  	    return function(_) {
  	      var r0, r1, r2;
  	      return arguments.length ? ([r0, r1, r2] = _, interpolator = d3Interpolate.piecewise(interpolate, [r0, r1, r2]), scale) : [interpolator(0), interpolator(0.5), interpolator(1)];
  	    };
  	  }

  	  scale.range = range(d3Interpolate.interpolate);

  	  scale.rangeRound = range(d3Interpolate.interpolateRound);

  	  scale.unknown = function(_) {
  	    return arguments.length ? (unknown = _, scale) : unknown;
  	  };

  	  return function(t) {
  	    transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1;
  	    return scale;
  	  };
  	}

  	function diverging() {
  	  var scale = linearish(transformer()(identity$1));

  	  scale.copy = function() {
  	    return copy(scale, diverging());
  	  };

  	  return initInterpolator.apply(scale, arguments);
  	}

  	function divergingLog() {
  	  var scale = loggish(transformer()).domain([0.1, 1, 10]);

  	  scale.copy = function() {
  	    return copy(scale, divergingLog()).base(scale.base());
  	  };

  	  return initInterpolator.apply(scale, arguments);
  	}

  	function divergingSymlog() {
  	  var scale = symlogish(transformer());

  	  scale.copy = function() {
  	    return copy(scale, divergingSymlog()).constant(scale.constant());
  	  };

  	  return initInterpolator.apply(scale, arguments);
  	}

  	function divergingPow() {
  	  var scale = powish(transformer());

  	  scale.copy = function() {
  	    return copy(scale, divergingPow()).exponent(scale.exponent());
  	  };

  	  return initInterpolator.apply(scale, arguments);
  	}

  	function divergingSqrt() {
  	  return divergingPow.apply(null, arguments).exponent(0.5);
  	}

  	exports.scaleBand = band;
  	exports.scaleDiverging = diverging;
  	exports.scaleDivergingLog = divergingLog;
  	exports.scaleDivergingPow = divergingPow;
  	exports.scaleDivergingSqrt = divergingSqrt;
  	exports.scaleDivergingSymlog = divergingSymlog;
  	exports.scaleIdentity = identity;
  	exports.scaleImplicit = implicit;
  	exports.scaleLinear = linear;
  	exports.scaleLog = log;
  	exports.scaleOrdinal = ordinal;
  	exports.scalePoint = point;
  	exports.scalePow = pow;
  	exports.scaleQuantile = quantile;
  	exports.scaleQuantize = quantize;
  	exports.scaleRadial = radial;
  	exports.scaleSequential = sequential;
  	exports.scaleSequentialLog = sequentialLog;
  	exports.scaleSequentialPow = sequentialPow;
  	exports.scaleSequentialQuantile = sequentialQuantile;
  	exports.scaleSequentialSqrt = sequentialSqrt;
  	exports.scaleSequentialSymlog = sequentialSymlog;
  	exports.scaleSqrt = sqrt;
  	exports.scaleSymlog = symlog;
  	exports.scaleThreshold = threshold;
  	exports.scaleTime = time;
  	exports.scaleUtc = utcTime;
  	exports.tickFormat = tickFormat;

  	Object.defineProperty(exports, '__esModule', { value: true });

  	})));
  } (d3Scale, d3Scale.exports));

  const t0 = new Date, t1 = new Date;

  function timeInterval(floori, offseti, count, field) {

    function interval(date) {
      return floori(date = arguments.length === 0 ? new Date : new Date(+date)), date;
    }

    interval.floor = (date) => {
      return floori(date = new Date(+date)), date;
    };

    interval.ceil = (date) => {
      return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
    };

    interval.round = (date) => {
      const d0 = interval(date), d1 = interval.ceil(date);
      return date - d0 < d1 - date ? d0 : d1;
    };

    interval.offset = (date, step) => {
      return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
    };

    interval.range = (start, stop, step) => {
      const range = [];
      start = interval.ceil(start);
      step = step == null ? 1 : Math.floor(step);
      if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
      let previous;
      do range.push(previous = new Date(+start)), offseti(start, step), floori(start);
      while (previous < start && start < stop);
      return range;
    };

    interval.filter = (test) => {
      return timeInterval((date) => {
        if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
      }, (date, step) => {
        if (date >= date) {
          if (step < 0) while (++step <= 0) {
            while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty
          } else while (--step >= 0) {
            while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty
          }
        }
      });
    };

    if (count) {
      interval.count = (start, end) => {
        t0.setTime(+start), t1.setTime(+end);
        floori(t0), floori(t1);
        return Math.floor(count(t0, t1));
      };

      interval.every = (step) => {
        step = Math.floor(step);
        return !isFinite(step) || !(step > 0) ? null
            : !(step > 1) ? interval
            : interval.filter(field
                ? (d) => field(d) % step === 0
                : (d) => interval.count(0, d) % step === 0);
      };
    }

    return interval;
  }

  const millisecond = timeInterval(() => {
    // noop
  }, (date, step) => {
    date.setTime(+date + step);
  }, (start, end) => {
    return end - start;
  });

  // An optimized implementation for this simple case.
  millisecond.every = (k) => {
    k = Math.floor(k);
    if (!isFinite(k) || !(k > 0)) return null;
    if (!(k > 1)) return millisecond;
    return timeInterval((date) => {
      date.setTime(Math.floor(date / k) * k);
    }, (date, step) => {
      date.setTime(+date + step * k);
    }, (start, end) => {
      return (end - start) / k;
    });
  };

  millisecond.range;

  const durationSecond = 1000;
  const durationMinute = durationSecond * 60;
  const durationHour = durationMinute * 60;
  const durationDay = durationHour * 24;
  const durationWeek = durationDay * 7;

  const second = timeInterval((date) => {
    date.setTime(date - date.getMilliseconds());
  }, (date, step) => {
    date.setTime(+date + step * durationSecond);
  }, (start, end) => {
    return (end - start) / durationSecond;
  }, (date) => {
    return date.getUTCSeconds();
  });

  second.range;

  const timeMinute = timeInterval((date) => {
    date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
  }, (date, step) => {
    date.setTime(+date + step * durationMinute);
  }, (start, end) => {
    return (end - start) / durationMinute;
  }, (date) => {
    return date.getMinutes();
  });

  timeMinute.range;

  const utcMinute = timeInterval((date) => {
    date.setUTCSeconds(0, 0);
  }, (date, step) => {
    date.setTime(+date + step * durationMinute);
  }, (start, end) => {
    return (end - start) / durationMinute;
  }, (date) => {
    return date.getUTCMinutes();
  });

  utcMinute.range;

  const timeHour = timeInterval((date) => {
    date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
  }, (date, step) => {
    date.setTime(+date + step * durationHour);
  }, (start, end) => {
    return (end - start) / durationHour;
  }, (date) => {
    return date.getHours();
  });

  timeHour.range;

  const utcHour = timeInterval((date) => {
    date.setUTCMinutes(0, 0, 0);
  }, (date, step) => {
    date.setTime(+date + step * durationHour);
  }, (start, end) => {
    return (end - start) / durationHour;
  }, (date) => {
    return date.getUTCHours();
  });

  utcHour.range;

  const timeDay = timeInterval(
    date => date.setHours(0, 0, 0, 0),
    (date, step) => date.setDate(date.getDate() + step),
    (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay,
    date => date.getDate() - 1
  );

  timeDay.range;

  const utcDay = timeInterval((date) => {
    date.setUTCHours(0, 0, 0, 0);
  }, (date, step) => {
    date.setUTCDate(date.getUTCDate() + step);
  }, (start, end) => {
    return (end - start) / durationDay;
  }, (date) => {
    return date.getUTCDate() - 1;
  });

  utcDay.range;

  const unixDay = timeInterval((date) => {
    date.setUTCHours(0, 0, 0, 0);
  }, (date, step) => {
    date.setUTCDate(date.getUTCDate() + step);
  }, (start, end) => {
    return (end - start) / durationDay;
  }, (date) => {
    return Math.floor(date / durationDay);
  });

  unixDay.range;

  function timeWeekday(i) {
    return timeInterval((date) => {
      date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
      date.setHours(0, 0, 0, 0);
    }, (date, step) => {
      date.setDate(date.getDate() + step * 7);
    }, (start, end) => {
      return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
    });
  }

  const timeSunday = timeWeekday(0);
  const timeMonday = timeWeekday(1);
  const timeTuesday = timeWeekday(2);
  const timeWednesday = timeWeekday(3);
  const timeThursday = timeWeekday(4);
  const timeFriday = timeWeekday(5);
  const timeSaturday = timeWeekday(6);

  timeSunday.range;
  timeMonday.range;
  timeTuesday.range;
  timeWednesday.range;
  timeThursday.range;
  timeFriday.range;
  timeSaturday.range;

  function utcWeekday(i) {
    return timeInterval((date) => {
      date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
      date.setUTCHours(0, 0, 0, 0);
    }, (date, step) => {
      date.setUTCDate(date.getUTCDate() + step * 7);
    }, (start, end) => {
      return (end - start) / durationWeek;
    });
  }

  const utcSunday = utcWeekday(0);
  const utcMonday = utcWeekday(1);
  const utcTuesday = utcWeekday(2);
  const utcWednesday = utcWeekday(3);
  const utcThursday = utcWeekday(4);
  const utcFriday = utcWeekday(5);
  const utcSaturday = utcWeekday(6);

  utcSunday.range;
  utcMonday.range;
  utcTuesday.range;
  utcWednesday.range;
  utcThursday.range;
  utcFriday.range;
  utcSaturday.range;

  const timeMonth = timeInterval((date) => {
    date.setDate(1);
    date.setHours(0, 0, 0, 0);
  }, (date, step) => {
    date.setMonth(date.getMonth() + step);
  }, (start, end) => {
    return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
  }, (date) => {
    return date.getMonth();
  });

  timeMonth.range;

  const utcMonth = timeInterval((date) => {
    date.setUTCDate(1);
    date.setUTCHours(0, 0, 0, 0);
  }, (date, step) => {
    date.setUTCMonth(date.getUTCMonth() + step);
  }, (start, end) => {
    return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
  }, (date) => {
    return date.getUTCMonth();
  });

  utcMonth.range;

  const timeYear = timeInterval((date) => {
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, (date, step) => {
    date.setFullYear(date.getFullYear() + step);
  }, (start, end) => {
    return end.getFullYear() - start.getFullYear();
  }, (date) => {
    return date.getFullYear();
  });

  // An optimized implementation for this simple case.
  timeYear.every = (k) => {
    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : timeInterval((date) => {
      date.setFullYear(Math.floor(date.getFullYear() / k) * k);
      date.setMonth(0, 1);
      date.setHours(0, 0, 0, 0);
    }, (date, step) => {
      date.setFullYear(date.getFullYear() + step * k);
    });
  };

  timeYear.range;

  const utcYear = timeInterval((date) => {
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, (date, step) => {
    date.setUTCFullYear(date.getUTCFullYear() + step);
  }, (start, end) => {
    return end.getUTCFullYear() - start.getUTCFullYear();
  }, (date) => {
    return date.getUTCFullYear();
  });

  // An optimized implementation for this simple case.
  utcYear.every = (k) => {
    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : timeInterval((date) => {
      date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
      date.setUTCMonth(0, 1);
      date.setUTCHours(0, 0, 0, 0);
    }, (date, step) => {
      date.setUTCFullYear(date.getUTCFullYear() + step * k);
    });
  };

  utcYear.range;

  function ascending(a, b) {
    return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  }

  function descending(a, b) {
    return a == null || b == null ? NaN
      : b < a ? -1
      : b > a ? 1
      : b >= a ? 0
      : NaN;
  }

  function bisector(f) {
    let compare1, compare2, delta;

    // If an accessor is specified, promote it to a comparator. In this case we
    // can test whether the search value is (self-) comparable. We can’t do this
    // for a comparator (except for specific, known comparators) because we can’t
    // tell if the comparator is symmetric, and an asymmetric comparator can’t be
    // used to test whether a single value is comparable.
    if (f.length !== 2) {
      compare1 = ascending;
      compare2 = (d, x) => ascending(f(d), x);
      delta = (d, x) => f(d) - x;
    } else {
      compare1 = f === ascending || f === descending ? f : zero;
      compare2 = f;
      delta = f;
    }

    function left(a, x, lo = 0, hi = a.length) {
      if (lo < hi) {
        if (compare1(x, x) !== 0) return hi;
        do {
          const mid = (lo + hi) >>> 1;
          if (compare2(a[mid], x) < 0) lo = mid + 1;
          else hi = mid;
        } while (lo < hi);
      }
      return lo;
    }

    function right(a, x, lo = 0, hi = a.length) {
      if (lo < hi) {
        if (compare1(x, x) !== 0) return hi;
        do {
          const mid = (lo + hi) >>> 1;
          if (compare2(a[mid], x) <= 0) lo = mid + 1;
          else hi = mid;
        } while (lo < hi);
      }
      return lo;
    }

    function center(a, x, lo = 0, hi = a.length) {
      const i = left(a, x, lo, hi - 1);
      return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
    }

    return {left, center, right};
  }

  function zero() {
    return 0;
  }

  function number(x) {
    return x === null ? NaN : +x;
  }

  bisector(ascending);
  bisector(number).center;

  function localDate(d) {
    if (0 <= d.y && d.y < 100) {
      var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
      date.setFullYear(d.y);
      return date;
    }
    return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
  }

  function utcDate(d) {
    if (0 <= d.y && d.y < 100) {
      var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
      date.setUTCFullYear(d.y);
      return date;
    }
    return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
  }

  function newDate(y, m, d) {
    return {y: y, m: m, d: d, H: 0, M: 0, S: 0, L: 0};
  }

  function formatLocale(locale) {
    var locale_dateTime = locale.dateTime,
        locale_date = locale.date,
        locale_time = locale.time,
        locale_periods = locale.periods,
        locale_weekdays = locale.days,
        locale_shortWeekdays = locale.shortDays,
        locale_months = locale.months,
        locale_shortMonths = locale.shortMonths;

    var periodRe = formatRe(locale_periods),
        periodLookup = formatLookup(locale_periods),
        weekdayRe = formatRe(locale_weekdays),
        weekdayLookup = formatLookup(locale_weekdays),
        shortWeekdayRe = formatRe(locale_shortWeekdays),
        shortWeekdayLookup = formatLookup(locale_shortWeekdays),
        monthRe = formatRe(locale_months),
        monthLookup = formatLookup(locale_months),
        shortMonthRe = formatRe(locale_shortMonths),
        shortMonthLookup = formatLookup(locale_shortMonths);

    var formats = {
      "a": formatShortWeekday,
      "A": formatWeekday,
      "b": formatShortMonth,
      "B": formatMonth,
      "c": null,
      "d": formatDayOfMonth,
      "e": formatDayOfMonth,
      "f": formatMicroseconds,
      "g": formatYearISO,
      "G": formatFullYearISO,
      "H": formatHour24,
      "I": formatHour12,
      "j": formatDayOfYear,
      "L": formatMilliseconds,
      "m": formatMonthNumber,
      "M": formatMinutes,
      "p": formatPeriod,
      "q": formatQuarter,
      "Q": formatUnixTimestamp,
      "s": formatUnixTimestampSeconds,
      "S": formatSeconds,
      "u": formatWeekdayNumberMonday,
      "U": formatWeekNumberSunday,
      "V": formatWeekNumberISO,
      "w": formatWeekdayNumberSunday,
      "W": formatWeekNumberMonday,
      "x": null,
      "X": null,
      "y": formatYear,
      "Y": formatFullYear,
      "Z": formatZone,
      "%": formatLiteralPercent
    };

    var utcFormats = {
      "a": formatUTCShortWeekday,
      "A": formatUTCWeekday,
      "b": formatUTCShortMonth,
      "B": formatUTCMonth,
      "c": null,
      "d": formatUTCDayOfMonth,
      "e": formatUTCDayOfMonth,
      "f": formatUTCMicroseconds,
      "g": formatUTCYearISO,
      "G": formatUTCFullYearISO,
      "H": formatUTCHour24,
      "I": formatUTCHour12,
      "j": formatUTCDayOfYear,
      "L": formatUTCMilliseconds,
      "m": formatUTCMonthNumber,
      "M": formatUTCMinutes,
      "p": formatUTCPeriod,
      "q": formatUTCQuarter,
      "Q": formatUnixTimestamp,
      "s": formatUnixTimestampSeconds,
      "S": formatUTCSeconds,
      "u": formatUTCWeekdayNumberMonday,
      "U": formatUTCWeekNumberSunday,
      "V": formatUTCWeekNumberISO,
      "w": formatUTCWeekdayNumberSunday,
      "W": formatUTCWeekNumberMonday,
      "x": null,
      "X": null,
      "y": formatUTCYear,
      "Y": formatUTCFullYear,
      "Z": formatUTCZone,
      "%": formatLiteralPercent
    };

    var parses = {
      "a": parseShortWeekday,
      "A": parseWeekday,
      "b": parseShortMonth,
      "B": parseMonth,
      "c": parseLocaleDateTime,
      "d": parseDayOfMonth,
      "e": parseDayOfMonth,
      "f": parseMicroseconds,
      "g": parseYear,
      "G": parseFullYear,
      "H": parseHour24,
      "I": parseHour24,
      "j": parseDayOfYear,
      "L": parseMilliseconds,
      "m": parseMonthNumber,
      "M": parseMinutes,
      "p": parsePeriod,
      "q": parseQuarter,
      "Q": parseUnixTimestamp,
      "s": parseUnixTimestampSeconds,
      "S": parseSeconds,
      "u": parseWeekdayNumberMonday,
      "U": parseWeekNumberSunday,
      "V": parseWeekNumberISO,
      "w": parseWeekdayNumberSunday,
      "W": parseWeekNumberMonday,
      "x": parseLocaleDate,
      "X": parseLocaleTime,
      "y": parseYear,
      "Y": parseFullYear,
      "Z": parseZone,
      "%": parseLiteralPercent
    };

    // These recursive directive definitions must be deferred.
    formats.x = newFormat(locale_date, formats);
    formats.X = newFormat(locale_time, formats);
    formats.c = newFormat(locale_dateTime, formats);
    utcFormats.x = newFormat(locale_date, utcFormats);
    utcFormats.X = newFormat(locale_time, utcFormats);
    utcFormats.c = newFormat(locale_dateTime, utcFormats);

    function newFormat(specifier, formats) {
      return function(date) {
        var string = [],
            i = -1,
            j = 0,
            n = specifier.length,
            c,
            pad,
            format;

        if (!(date instanceof Date)) date = new Date(+date);

        while (++i < n) {
          if (specifier.charCodeAt(i) === 37) {
            string.push(specifier.slice(j, i));
            if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
            else pad = c === "e" ? " " : "0";
            if (format = formats[c]) c = format(date, pad);
            string.push(c);
            j = i + 1;
          }
        }

        string.push(specifier.slice(j, i));
        return string.join("");
      };
    }

    function newParse(specifier, Z) {
      return function(string) {
        var d = newDate(1900, undefined, 1),
            i = parseSpecifier(d, specifier, string += "", 0),
            week, day;
        if (i != string.length) return null;

        // If a UNIX timestamp is specified, return it.
        if ("Q" in d) return new Date(d.Q);
        if ("s" in d) return new Date(d.s * 1000 + ("L" in d ? d.L : 0));

        // If this is utcParse, never use the local timezone.
        if (Z && !("Z" in d)) d.Z = 0;

        // The am-pm flag is 0 for AM, and 1 for PM.
        if ("p" in d) d.H = d.H % 12 + d.p * 12;

        // If the month was not specified, inherit from the quarter.
        if (d.m === undefined) d.m = "q" in d ? d.q : 0;

        // Convert day-of-week and week-of-year to day-of-year.
        if ("V" in d) {
          if (d.V < 1 || d.V > 53) return null;
          if (!("w" in d)) d.w = 1;
          if ("Z" in d) {
            week = utcDate(newDate(d.y, 0, 1)), day = week.getUTCDay();
            week = day > 4 || day === 0 ? utcMonday.ceil(week) : utcMonday(week);
            week = utcDay.offset(week, (d.V - 1) * 7);
            d.y = week.getUTCFullYear();
            d.m = week.getUTCMonth();
            d.d = week.getUTCDate() + (d.w + 6) % 7;
          } else {
            week = localDate(newDate(d.y, 0, 1)), day = week.getDay();
            week = day > 4 || day === 0 ? timeMonday.ceil(week) : timeMonday(week);
            week = timeDay.offset(week, (d.V - 1) * 7);
            d.y = week.getFullYear();
            d.m = week.getMonth();
            d.d = week.getDate() + (d.w + 6) % 7;
          }
        } else if ("W" in d || "U" in d) {
          if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
          day = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
          d.m = 0;
          d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
        }

        // If a time zone is specified, all fields are interpreted as UTC and then
        // offset according to the specified time zone.
        if ("Z" in d) {
          d.H += d.Z / 100 | 0;
          d.M += d.Z % 100;
          return utcDate(d);
        }

        // Otherwise, all fields are in local time.
        return localDate(d);
      };
    }

    function parseSpecifier(d, specifier, string, j) {
      var i = 0,
          n = specifier.length,
          m = string.length,
          c,
          parse;

      while (i < n) {
        if (j >= m) return -1;
        c = specifier.charCodeAt(i++);
        if (c === 37) {
          c = specifier.charAt(i++);
          parse = parses[c in pads ? specifier.charAt(i++) : c];
          if (!parse || ((j = parse(d, string, j)) < 0)) return -1;
        } else if (c != string.charCodeAt(j++)) {
          return -1;
        }
      }

      return j;
    }

    function parsePeriod(d, string, i) {
      var n = periodRe.exec(string.slice(i));
      return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }

    function parseShortWeekday(d, string, i) {
      var n = shortWeekdayRe.exec(string.slice(i));
      return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }

    function parseWeekday(d, string, i) {
      var n = weekdayRe.exec(string.slice(i));
      return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }

    function parseShortMonth(d, string, i) {
      var n = shortMonthRe.exec(string.slice(i));
      return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }

    function parseMonth(d, string, i) {
      var n = monthRe.exec(string.slice(i));
      return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }

    function parseLocaleDateTime(d, string, i) {
      return parseSpecifier(d, locale_dateTime, string, i);
    }

    function parseLocaleDate(d, string, i) {
      return parseSpecifier(d, locale_date, string, i);
    }

    function parseLocaleTime(d, string, i) {
      return parseSpecifier(d, locale_time, string, i);
    }

    function formatShortWeekday(d) {
      return locale_shortWeekdays[d.getDay()];
    }

    function formatWeekday(d) {
      return locale_weekdays[d.getDay()];
    }

    function formatShortMonth(d) {
      return locale_shortMonths[d.getMonth()];
    }

    function formatMonth(d) {
      return locale_months[d.getMonth()];
    }

    function formatPeriod(d) {
      return locale_periods[+(d.getHours() >= 12)];
    }

    function formatQuarter(d) {
      return 1 + ~~(d.getMonth() / 3);
    }

    function formatUTCShortWeekday(d) {
      return locale_shortWeekdays[d.getUTCDay()];
    }

    function formatUTCWeekday(d) {
      return locale_weekdays[d.getUTCDay()];
    }

    function formatUTCShortMonth(d) {
      return locale_shortMonths[d.getUTCMonth()];
    }

    function formatUTCMonth(d) {
      return locale_months[d.getUTCMonth()];
    }

    function formatUTCPeriod(d) {
      return locale_periods[+(d.getUTCHours() >= 12)];
    }

    function formatUTCQuarter(d) {
      return 1 + ~~(d.getUTCMonth() / 3);
    }

    return {
      format: function(specifier) {
        var f = newFormat(specifier += "", formats);
        f.toString = function() { return specifier; };
        return f;
      },
      parse: function(specifier) {
        var p = newParse(specifier += "", false);
        p.toString = function() { return specifier; };
        return p;
      },
      utcFormat: function(specifier) {
        var f = newFormat(specifier += "", utcFormats);
        f.toString = function() { return specifier; };
        return f;
      },
      utcParse: function(specifier) {
        var p = newParse(specifier += "", true);
        p.toString = function() { return specifier; };
        return p;
      }
    };
  }

  var pads = {"-": "", "_": " ", "0": "0"},
      numberRe = /^\s*\d+/, // note: ignores next directive
      percentRe = /^%/,
      requoteRe = /[\\^$*+?|[\]().{}]/g;

  function pad(value, fill, width) {
    var sign = value < 0 ? "-" : "",
        string = (sign ? -value : value) + "",
        length = string.length;
    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
  }

  function requote(s) {
    return s.replace(requoteRe, "\\$&");
  }

  function formatRe(names) {
    return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
  }

  function formatLookup(names) {
    return new Map(names.map((name, i) => [name.toLowerCase(), i]));
  }

  function parseWeekdayNumberSunday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 1));
    return n ? (d.w = +n[0], i + n[0].length) : -1;
  }

  function parseWeekdayNumberMonday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 1));
    return n ? (d.u = +n[0], i + n[0].length) : -1;
  }

  function parseWeekNumberSunday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.U = +n[0], i + n[0].length) : -1;
  }

  function parseWeekNumberISO(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.V = +n[0], i + n[0].length) : -1;
  }

  function parseWeekNumberMonday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.W = +n[0], i + n[0].length) : -1;
  }

  function parseFullYear(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 4));
    return n ? (d.y = +n[0], i + n[0].length) : -1;
  }

  function parseYear(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
  }

  function parseZone(d, string, i) {
    var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
    return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
  }

  function parseQuarter(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 1));
    return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
  }

  function parseMonthNumber(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
  }

  function parseDayOfMonth(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.d = +n[0], i + n[0].length) : -1;
  }

  function parseDayOfYear(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 3));
    return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
  }

  function parseHour24(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.H = +n[0], i + n[0].length) : -1;
  }

  function parseMinutes(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.M = +n[0], i + n[0].length) : -1;
  }

  function parseSeconds(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.S = +n[0], i + n[0].length) : -1;
  }

  function parseMilliseconds(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 3));
    return n ? (d.L = +n[0], i + n[0].length) : -1;
  }

  function parseMicroseconds(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 6));
    return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
  }

  function parseLiteralPercent(d, string, i) {
    var n = percentRe.exec(string.slice(i, i + 1));
    return n ? i + n[0].length : -1;
  }

  function parseUnixTimestamp(d, string, i) {
    var n = numberRe.exec(string.slice(i));
    return n ? (d.Q = +n[0], i + n[0].length) : -1;
  }

  function parseUnixTimestampSeconds(d, string, i) {
    var n = numberRe.exec(string.slice(i));
    return n ? (d.s = +n[0], i + n[0].length) : -1;
  }

  function formatDayOfMonth(d, p) {
    return pad(d.getDate(), p, 2);
  }

  function formatHour24(d, p) {
    return pad(d.getHours(), p, 2);
  }

  function formatHour12(d, p) {
    return pad(d.getHours() % 12 || 12, p, 2);
  }

  function formatDayOfYear(d, p) {
    return pad(1 + timeDay.count(timeYear(d), d), p, 3);
  }

  function formatMilliseconds(d, p) {
    return pad(d.getMilliseconds(), p, 3);
  }

  function formatMicroseconds(d, p) {
    return formatMilliseconds(d, p) + "000";
  }

  function formatMonthNumber(d, p) {
    return pad(d.getMonth() + 1, p, 2);
  }

  function formatMinutes(d, p) {
    return pad(d.getMinutes(), p, 2);
  }

  function formatSeconds(d, p) {
    return pad(d.getSeconds(), p, 2);
  }

  function formatWeekdayNumberMonday(d) {
    var day = d.getDay();
    return day === 0 ? 7 : day;
  }

  function formatWeekNumberSunday(d, p) {
    return pad(timeSunday.count(timeYear(d) - 1, d), p, 2);
  }

  function dISO(d) {
    var day = d.getDay();
    return (day >= 4 || day === 0) ? timeThursday(d) : timeThursday.ceil(d);
  }

  function formatWeekNumberISO(d, p) {
    d = dISO(d);
    return pad(timeThursday.count(timeYear(d), d) + (timeYear(d).getDay() === 4), p, 2);
  }

  function formatWeekdayNumberSunday(d) {
    return d.getDay();
  }

  function formatWeekNumberMonday(d, p) {
    return pad(timeMonday.count(timeYear(d) - 1, d), p, 2);
  }

  function formatYear(d, p) {
    return pad(d.getFullYear() % 100, p, 2);
  }

  function formatYearISO(d, p) {
    d = dISO(d);
    return pad(d.getFullYear() % 100, p, 2);
  }

  function formatFullYear(d, p) {
    return pad(d.getFullYear() % 10000, p, 4);
  }

  function formatFullYearISO(d, p) {
    var day = d.getDay();
    d = (day >= 4 || day === 0) ? timeThursday(d) : timeThursday.ceil(d);
    return pad(d.getFullYear() % 10000, p, 4);
  }

  function formatZone(d) {
    var z = d.getTimezoneOffset();
    return (z > 0 ? "-" : (z *= -1, "+"))
        + pad(z / 60 | 0, "0", 2)
        + pad(z % 60, "0", 2);
  }

  function formatUTCDayOfMonth(d, p) {
    return pad(d.getUTCDate(), p, 2);
  }

  function formatUTCHour24(d, p) {
    return pad(d.getUTCHours(), p, 2);
  }

  function formatUTCHour12(d, p) {
    return pad(d.getUTCHours() % 12 || 12, p, 2);
  }

  function formatUTCDayOfYear(d, p) {
    return pad(1 + utcDay.count(utcYear(d), d), p, 3);
  }

  function formatUTCMilliseconds(d, p) {
    return pad(d.getUTCMilliseconds(), p, 3);
  }

  function formatUTCMicroseconds(d, p) {
    return formatUTCMilliseconds(d, p) + "000";
  }

  function formatUTCMonthNumber(d, p) {
    return pad(d.getUTCMonth() + 1, p, 2);
  }

  function formatUTCMinutes(d, p) {
    return pad(d.getUTCMinutes(), p, 2);
  }

  function formatUTCSeconds(d, p) {
    return pad(d.getUTCSeconds(), p, 2);
  }

  function formatUTCWeekdayNumberMonday(d) {
    var dow = d.getUTCDay();
    return dow === 0 ? 7 : dow;
  }

  function formatUTCWeekNumberSunday(d, p) {
    return pad(utcSunday.count(utcYear(d) - 1, d), p, 2);
  }

  function UTCdISO(d) {
    var day = d.getUTCDay();
    return (day >= 4 || day === 0) ? utcThursday(d) : utcThursday.ceil(d);
  }

  function formatUTCWeekNumberISO(d, p) {
    d = UTCdISO(d);
    return pad(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);
  }

  function formatUTCWeekdayNumberSunday(d) {
    return d.getUTCDay();
  }

  function formatUTCWeekNumberMonday(d, p) {
    return pad(utcMonday.count(utcYear(d) - 1, d), p, 2);
  }

  function formatUTCYear(d, p) {
    return pad(d.getUTCFullYear() % 100, p, 2);
  }

  function formatUTCYearISO(d, p) {
    d = UTCdISO(d);
    return pad(d.getUTCFullYear() % 100, p, 2);
  }

  function formatUTCFullYear(d, p) {
    return pad(d.getUTCFullYear() % 10000, p, 4);
  }

  function formatUTCFullYearISO(d, p) {
    var day = d.getUTCDay();
    d = (day >= 4 || day === 0) ? utcThursday(d) : utcThursday.ceil(d);
    return pad(d.getUTCFullYear() % 10000, p, 4);
  }

  function formatUTCZone() {
    return "+0000";
  }

  function formatLiteralPercent() {
    return "%";
  }

  function formatUnixTimestamp(d) {
    return +d;
  }

  function formatUnixTimestampSeconds(d) {
    return Math.floor(+d / 1000);
  }

  var locale;
  var timeFormat;
  var timeParse;
  var utcFormat;
  var utcParse;

  defaultLocale({
    dateTime: "%x, %X",
    date: "%-m/%-d/%Y",
    time: "%-I:%M:%S %p",
    periods: ["AM", "PM"],
    days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
    shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
    shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
  });

  function defaultLocale(definition) {
    locale = formatLocale(definition);
    timeFormat = locale.format;
    timeParse = locale.parse;
    utcFormat = locale.utcFormat;
    utcParse = locale.utcParse;
    return locale;
  }

  var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";

  function formatIsoNative(date) {
    return date.toISOString();
  }

  var formatIso = Date.prototype.toISOString
      ? formatIsoNative
      : utcFormat(isoSpecifier);

  var formatIso$1 = formatIso;

  function parseIsoNative(string) {
    var date = new Date(string);
    return isNaN(date) ? null : date;
  }

  var parseIso = +new Date("2000-01-01T00:00:00.000Z")
      ? parseIsoNative
      : utcParse(isoSpecifier);

  var parseIso$1 = parseIso;

  var src = /*#__PURE__*/Object.freeze({
    __proto__: null,
    timeFormatDefaultLocale: defaultLocale,
    get timeFormat () { return timeFormat; },
    get timeParse () { return timeParse; },
    get utcFormat () { return utcFormat; },
    get utcParse () { return utcParse; },
    timeFormatLocale: formatLocale,
    isoFormat: formatIso$1,
    isoParse: parseIso$1
  });

  var require$$6 = /*@__PURE__*/getAugmentedNamespace(src);

  (function (exports) {

  	var _interopRequireDefault = interopRequireDefault.exports["default"];

  	exports.__esModule = true;
  	exports["default"] = buildAxisLinear;

  	var _extends2 = _interopRequireDefault(_extends$2.exports);

  	var _d3Array = d3Array.exports;

  	var _d3Shape = d3Shape.exports;

  	var _d3Scale = d3Scale.exports;

  	var _d3Time = d3Time.exports;

  	var _d3TimeFormat = require$$6;

  	function defaultAxisOptions(options) {
  	  var _options$elementType, _options$minTickPaddi, _options$tickLabelRot, _options$innerBandPad, _options$outerBandPad, _options$innerSeriesB, _options$outerSeriesB, _options$show, _options$stacked, _options$shouldNice;

  	  return (0, _extends2["default"])({}, options, {
  	    elementType: (_options$elementType = options.elementType) != null ? _options$elementType : 'line',
  	    minTickPaddingForRotation: (_options$minTickPaddi = options.minTickPaddingForRotation) != null ? _options$minTickPaddi : 10,
  	    tickLabelRotationDeg: (_options$tickLabelRot = options.tickLabelRotationDeg) != null ? _options$tickLabelRot : 60,
  	    innerBandPadding: (_options$innerBandPad = options.innerBandPadding) != null ? _options$innerBandPad : 0.5,
  	    outerBandPadding: (_options$outerBandPad = options.outerBandPadding) != null ? _options$outerBandPad : 0.2,
  	    innerSeriesBandPadding: (_options$innerSeriesB = options.innerSeriesBandPadding) != null ? _options$innerSeriesB : 0.2,
  	    outerSeriesBandPadding: (_options$outerSeriesB = options.outerSeriesBandPadding) != null ? _options$outerSeriesB : 0,
  	    show: (_options$show = options.show) != null ? _options$show : true,
  	    stacked: (_options$stacked = options.stacked) != null ? _options$stacked : false,
  	    shouldNice: (_options$shouldNice = options.shouldNice) != null ? _options$shouldNice : true
  	  });
  	}

  	function buildAxisLinear(isPrimary, userOptions, series, allDatums, gridDimensions, width, height) {
  	  var options = defaultAxisOptions(userOptions);

  	  if (!options.position) {
  	    throw new Error("Chart axes must have a valid 'position' property");
  	  }

  	  var isVertical = ['left', 'right'].indexOf(options.position) > -1; // Now we need to figure out the range

  	  var range = isVertical ? [gridDimensions.height, 0] : [0, gridDimensions.width];
  	  var outerRange = isVertical ? [height, 0] : [0, width]; // Give the scale a home

  	  return options.scaleType === 'time' || options.scaleType === 'localTime' ? buildTimeAxis(isPrimary, options, series, allDatums, isVertical, range, outerRange) : options.scaleType === 'linear' || options.scaleType === 'log' ? buildLinearAxis(isPrimary, options, series, allDatums, isVertical, range, outerRange) : options.scaleType === 'band' ? buildBandAxis(isPrimary, options, series, isVertical, range, outerRange) : function () {
  	    throw new Error('Invalid scale type');
  	  }();
  	}

  	function buildTimeAxis(isPrimary, options, series, allDatums, isVertical, range, outerRange) {
  	  var isLocal = options.scaleType === 'localTime';
  	  var scaleFn = isLocal ? _d3Scale.scaleTime : _d3Scale.scaleUtc;
  	  var isInvalid = false;
  	  series = isPrimary ? series : series.filter(function (s) {
  	    return s.secondaryAxisId === options.id;
  	  });
  	  allDatums = isPrimary ? allDatums : allDatums.filter(function (d) {
  	    return d.secondaryAxisId === options.id;
  	  }); // Now set the range

  	  var scale = scaleFn(range);

  	  var _extent = (0, _d3Array.extent)(allDatums, function (datum) {
  	    var value = options.getValue(datum.originalDatum);
  	    datum[isPrimary ? 'primaryValue' : 'secondaryValue'] = value;
  	    return value;
  	  }),
  	      minValue = _extent[0],
  	      maxValue = _extent[1]; // Here, we find the maximum context (in descending order from year
  	  // down to millisecond) needed to understand the
  	  // dates in this dataset. If the min/max dates span multiples of
  	  // any of the time units OR if the max date resides in a different
  	  // unit boundary than today's, we use that unit as context.


  	  var autoFormatStr;
  	  var units = isLocal ? {
  	    year: _d3Time.timeYear,
  	    month: _d3Time.timeMonth,
  	    day: _d3Time.timeDay,
  	    hour: _d3Time.timeHour,
  	    minute: _d3Time.timeMinute,
  	    second: _d3Time.timeSecond
  	  } : {
  	    year: _d3Time.utcYear,
  	    month: _d3Time.utcMonth,
  	    day: _d3Time.utcDay,
  	    hour: _d3Time.utcHour,
  	    minute: _d3Time.utcMinute,
  	    second: _d3Time.utcSecond
  	  };

  	  if (minValue && maxValue) {
  	    if (units.year.count(minValue, maxValue) > 0 || units.year.floor(maxValue) < units.year()) {
  	      autoFormatStr = '%b %-d, %Y %-I:%M:%S.%L %p';
  	    } else if (units.month.count(minValue, maxValue) > 0 || units.month.floor(maxValue) < units.month()) {
  	      autoFormatStr = '%b %-d, %-I:%M:%S.%L %p';
  	    } else if (units.day.count(minValue, maxValue) > 0 || units.day.floor(maxValue) < units.day()) {
  	      autoFormatStr = '%b %-d, %-I:%M:%S.%L %p';
  	    } else if (units.hour.count(minValue, maxValue) > 0 || units.hour.floor(maxValue) < units.hour()) {
  	      autoFormatStr = '%-I:%M:%S.%L %p';
  	    } else if (units.minute.count(minValue, maxValue) > 0 || units.minute.floor(maxValue) < units.minute()) {
  	      autoFormatStr = '%-I:%M:%S.%L';
  	    } else if (units.second.count(minValue, maxValue) > 0 || units.second.floor(maxValue) < units.second()) {
  	      autoFormatStr = '%L';
  	    }
  	  }

  	  var resolvedTimeFormat = isLocal ? _d3TimeFormat.timeFormat : _d3TimeFormat.utcFormat;

  	  var trimFormat = function trimFormat(str) {
  	    return str.trim().replace(/(,$|^,)/, '');
  	  };

  	  var contextFormat = function contextFormat(format, date) {
  	    if (units.second(date) < date) {
  	      // milliseconds - Do not remove any context
  	      return resolvedTimeFormat(format)(date);
  	    }

  	    if (units.minute(date) < date) {
  	      // seconds - remove potential milliseconds
  	      return resolvedTimeFormat(trimFormat(format.replace(/\.%L.*?(\s|$)/, '')))(date);
  	    }

  	    if (units.hour(date) < date) {
  	      // minutes - remove potential seconds and milliseconds
  	      return resolvedTimeFormat(trimFormat(format.replace(/:%S.*?(\s|$)/, '')))(date);
  	    }

  	    if (units.day(date) < date) {
  	      // hours - remove potential minutes and seconds and milliseconds
  	      return resolvedTimeFormat(trimFormat(format.replace(/:%M.*?(\s|$)/, '')))(date);
  	    }

  	    if (units.month(date) < date) {
  	      // days  - remove potential hours, minutes, seconds and milliseconds
  	      return resolvedTimeFormat(trimFormat(format.replace(/%-I.*/, '')))(date);
  	    }

  	    if (units.year(date) < date) {
  	      // months - remove potential days, hours, minutes, seconds and milliseconds
  	      return resolvedTimeFormat(trimFormat(format.replace(/%-d.*/, '')))(date);
  	    } // years


  	    return resolvedTimeFormat('%Y')(date);
  	  };

  	  var shouldNice = options.shouldNice; // see https://stackoverflow.com/a/2831422

  	  if (Object.prototype.toString.call(options.min) === '[object Date]') {
  	    minValue = (0, _d3Array.min)([options.min, minValue]);
  	    shouldNice = false;
  	  }

  	  if (Object.prototype.toString.call(options.max) === '[object Date]') {
  	    maxValue = (0, _d3Array.max)([options.max, maxValue]);
  	    shouldNice = false;
  	  }

  	  if (Object.prototype.toString.call(options.hardMin) === '[object Date]') {
  	    minValue = options.hardMin;
  	    shouldNice = false;
  	  }

  	  if (Object.prototype.toString.call(options.hardMax) === '[object Date]') {
  	    maxValue = options.hardMax;
  	    shouldNice = false;
  	  }

  	  if (minValue === undefined || maxValue === undefined) {
  	    console.info('Invalid scale min/max', {
  	      options: options,
  	      series: series,
  	      range: range,
  	      values: allDatums.map(function (d) {
  	        return isPrimary ? d.primaryValue : d.secondaryValue;
  	      })
  	    });
  	    isInvalid = true;
  	  } // Set the domain


  	  scale.domain([minValue, maxValue]);

  	  if (options.invert) {
  	    scale.domain(Array.from(scale.domain()).reverse());
  	  }

  	  if (shouldNice) {
  	    scale.nice();
  	  }

  	  var outerScale = scale.copy().range(outerRange); // Supplementary band scale

  	  var primaryBandScale = isPrimary ? buildPrimaryBandScale(options, scale, series, range) : undefined;
  	  var seriesBandScale = primaryBandScale ? buildSeriesBandScale(options, primaryBandScale, series) : undefined;
  	  var primaryBandWidth = primaryBandScale == null ? void 0 : primaryBandScale.bandwidth();

  	  if (options.padBandRange && primaryBandWidth) {
  	    var bandStart = scale.invert(0);
  	    var bandEnd = scale.invert(primaryBandWidth);
  	    var diff = bandEnd.valueOf() - bandStart.valueOf();
  	    scale.domain([new Date(scale.domain()[0].valueOf() - diff / 2), new Date(scale.domain()[1].valueOf() + diff / 2)]);
  	  }

  	  var formatters = {};
  	  var defaultFormat = scale.tickFormat();

  	  var scaleFormat = function scaleFormat(value) {
  	    var _options$formatters$s, _options$formatters;

  	    return (_options$formatters$s = (_options$formatters = options.formatters) == null ? void 0 : _options$formatters.scale == null ? void 0 : _options$formatters.scale(value, (0, _extends2["default"])({}, formatters, {
  	      scale: undefined
  	    }))) != null ? _options$formatters$s : contextFormat(autoFormatStr, value);
  	  };

  	  var tooltipFormat = function tooltipFormat(value) {
  	    var _options$formatters$t, _options$formatters2;

  	    return (_options$formatters$t = (_options$formatters2 = options.formatters) == null ? void 0 : _options$formatters2.tooltip == null ? void 0 : _options$formatters2.tooltip(value, (0, _extends2["default"])({}, formatters, {
  	      tooltip: undefined
  	    }))) != null ? _options$formatters$t : scaleFormat(value);
  	  };

  	  var cursorFormat = function cursorFormat(value) {
  	    var _options$formatters$c, _options$formatters3;

  	    return (_options$formatters$c = (_options$formatters3 = options.formatters) == null ? void 0 : _options$formatters3.cursor == null ? void 0 : _options$formatters3.cursor(value, (0, _extends2["default"])({}, formatters, {
  	      cursor: undefined
  	    }))) != null ? _options$formatters$c : scaleFormat(value);
  	  };

  	  Object.assign(formatters, {
  	    "default": defaultFormat,
  	    scale: scaleFormat,
  	    tooltip: tooltipFormat,
  	    cursor: cursorFormat
  	  });
  	  return (0, _extends2["default"])({}, options, {
  	    isInvalid: isInvalid,
  	    axisFamily: 'time',
  	    isVertical: isVertical,
  	    scale: scale,
  	    range: range,
  	    outerScale: outerScale,
  	    primaryBandScale: primaryBandScale,
  	    seriesBandScale: seriesBandScale,
  	    formatters: formatters
  	  });
  	}

  	function buildLinearAxis(isPrimary, options, series, allDatums, isVertical, range, outerRange) {
  	  var scale = options.scaleType === 'log' ? (0, _d3Scale.scaleLog)() : (0, _d3Scale.scaleLinear)();
  	  var isInvalid = false;
  	  series = isPrimary ? series : series.filter(function (s) {
  	    return s.secondaryAxisId === options.id;
  	  });
  	  allDatums = isPrimary ? allDatums : allDatums.filter(function (d) {
  	    return d.secondaryAxisId === options.id;
  	  });

  	  if (options.stacked) {
  	    stackSeries(series, options);
  	  }

  	  var _ref = options.stacked ? (0, _d3Array.extent)(series.map(function (s) {
  	    return s.datums.map(function (datum) {
  	      var _datum$stackData;

  	      var value = options.getValue(datum.originalDatum);
  	      datum[isPrimary ? 'primaryValue' : 'secondaryValue'] = value;
  	      return (_datum$stackData = datum.stackData) != null ? _datum$stackData : [];
  	    });
  	  }).flat(2)) : (0, _d3Array.extent)(allDatums, function (datum) {
  	    var value = options.getValue(datum.originalDatum);
  	    datum[isPrimary ? 'primaryValue' : 'secondaryValue'] = value;
  	    return value;
  	  }),
  	      minValue = _ref[0],
  	      maxValue = _ref[1];

  	  var shouldNice = options.shouldNice;

  	  if (typeof options.min === 'number') {
  	    minValue = (0, _d3Array.min)([options.min, minValue]);
  	    shouldNice = false;
  	  }

  	  if (typeof options.max === 'number') {
  	    maxValue = (0, _d3Array.max)([options.max, maxValue]);
  	    shouldNice = false;
  	  }

  	  if (typeof options.minDomainLength === 'number' && !(minValue === undefined || maxValue === undefined)) {
  	    var mid = (0, _d3Array.median)([minValue, maxValue]);
  	    var top = mid + options.minDomainLength / 2;
  	    var bottom = mid - options.minDomainLength / 2;
  	    maxValue = Math.max(top, maxValue);
  	    minValue = Math.min(bottom, minValue);
  	  }

  	  if (typeof options.hardMin === 'number') {
  	    minValue = options.hardMin;
  	    shouldNice = false;
  	  }

  	  if (typeof options.hardMax === 'number') {
  	    maxValue = options.hardMax;
  	    shouldNice = false;
  	  }

  	  if (minValue === undefined || maxValue === undefined) {
  	    var _minValue, _maxValue;

  	    isInvalid = true;
  	    console.info('Invalid scale min/max', {
  	      options: options,
  	      series: series,
  	      range: range,
  	      values: allDatums.map(function (d) {
  	        return isPrimary ? d.primaryValue : d.secondaryValue;
  	      })
  	    });
  	    minValue = (_minValue = minValue) != null ? _minValue : 0;
  	    maxValue = (_maxValue = maxValue) != null ? _maxValue : 0; // throw new Error('Invalid scale min/max'
  	  } // Set the domain


  	  scale.domain([minValue, maxValue]);

  	  if (options.invert) {
  	    scale.domain(Array.from(scale.domain()).reverse());
  	  }

  	  scale.range(range);

  	  if (shouldNice) {
  	    scale.nice();
  	  }

  	  var outerScale = scale.copy().range(outerRange);
  	  var primaryBandScale = isPrimary ? buildPrimaryBandScale(options, scale, series, range) : undefined;
  	  var seriesBandScale = primaryBandScale ? buildSeriesBandScale(options, primaryBandScale, series) : undefined;
  	  var defaultFormat = scale.tickFormat();
  	  var formatters = {};

  	  var scaleFormat = function scaleFormat(value) {
  	    var _options$formatters$s2, _options$formatters4;

  	    return (_options$formatters$s2 = (_options$formatters4 = options.formatters) == null ? void 0 : _options$formatters4.scale == null ? void 0 : _options$formatters4.scale(value, (0, _extends2["default"])({}, formatters, {
  	      scale: undefined
  	    }))) != null ? _options$formatters$s2 : defaultFormat(value);
  	  };

  	  var tooltipFormat = function tooltipFormat(value) {
  	    var _options$formatters$t2, _options$formatters5;

  	    return (_options$formatters$t2 = (_options$formatters5 = options.formatters) == null ? void 0 : _options$formatters5.tooltip == null ? void 0 : _options$formatters5.tooltip(value, (0, _extends2["default"])({}, formatters, {
  	      tooltip: undefined
  	    }))) != null ? _options$formatters$t2 : scaleFormat(value);
  	  };

  	  var cursorFormat = function cursorFormat(value) {
  	    var _options$formatters$c2, _options$formatters6;

  	    return (_options$formatters$c2 = (_options$formatters6 = options.formatters) == null ? void 0 : _options$formatters6.cursor == null ? void 0 : _options$formatters6.cursor(value, (0, _extends2["default"])({}, formatters, {
  	      cursor: undefined
  	    }))) != null ? _options$formatters$c2 : tooltipFormat(value);
  	  };

  	  Object.assign(formatters, {
  	    "default": defaultFormat,
  	    scale: scaleFormat,
  	    tooltip: tooltipFormat,
  	    cursor: cursorFormat
  	  });
  	  return (0, _extends2["default"])({}, options, {
  	    isInvalid: isInvalid,
  	    axisFamily: 'linear',
  	    isVertical: isVertical,
  	    scale: scale,
  	    range: range,
  	    outerScale: outerScale,
  	    primaryBandScale: primaryBandScale,
  	    seriesBandScale: seriesBandScale,
  	    formatters: formatters
  	  });
  	}

  	function buildBandAxis(isPrimary, options, series, isVertical, range, outerRange) {
  	  var _options$outerBandPad2, _options$innerBandPad2;

  	  series = series.filter(function (d) {
  	    return d.secondaryAxisId === options.id;
  	  });
  	  var isInvalid = false;
  	  var domain = Array.from(new Set(series.map(function (d) {
  	    return d.datums;
  	  }).flat().map(function (datum) {
  	    var value = options.getValue(datum.originalDatum);
  	    datum[isPrimary ? 'primaryValue' : 'secondaryValue'] = value;
  	    return value;
  	  })));
  	  var scale = (0, _d3Scale.scaleBand)(domain, range).round(false).paddingOuter((_options$outerBandPad2 = options.outerBandPadding) != null ? _options$outerBandPad2 : 0).paddingInner((_options$innerBandPad2 = options.innerBandPadding) != null ? _options$innerBandPad2 : 0); // Invert if necessary

  	  if (options.invert) {
  	    scale.domain(Array.from(scale.domain()).reverse());
  	  }

  	  var outerScale = scale.copy().range(outerRange);
  	  var primaryBandScale = scale;
  	  var seriesBandScale = buildSeriesBandScale(options, primaryBandScale, series);

  	  var defaultFormat = function defaultFormat(d) {
  	    return d;
  	  };

  	  var formatters = {};

  	  var scaleFormat = function scaleFormat(value) {
  	    var _options$formatters$s3, _options$formatters7;

  	    return (_options$formatters$s3 = (_options$formatters7 = options.formatters) == null ? void 0 : _options$formatters7.scale == null ? void 0 : _options$formatters7.scale(value, (0, _extends2["default"])({}, formatters, {
  	      scale: undefined
  	    }))) != null ? _options$formatters$s3 : defaultFormat(value);
  	  };

  	  var tooltipFormat = function tooltipFormat(value) {
  	    var _options$formatters$t3, _options$formatters8;

  	    return (_options$formatters$t3 = (_options$formatters8 = options.formatters) == null ? void 0 : _options$formatters8.tooltip == null ? void 0 : _options$formatters8.tooltip(value, (0, _extends2["default"])({}, formatters, {
  	      tooltip: undefined
  	    }))) != null ? _options$formatters$t3 : scaleFormat(value);
  	  };

  	  var cursorFormat = function cursorFormat(value) {
  	    var _options$formatters$c3, _options$formatters9;

  	    return (_options$formatters$c3 = (_options$formatters9 = options.formatters) == null ? void 0 : _options$formatters9.cursor == null ? void 0 : _options$formatters9.cursor(value, (0, _extends2["default"])({}, formatters, {
  	      cursor: undefined
  	    }))) != null ? _options$formatters$c3 : tooltipFormat(value);
  	  };

  	  Object.assign(formatters, {
  	    "default": defaultFormat,
  	    scale: scaleFormat,
  	    tooltip: tooltipFormat,
  	    cursor: cursorFormat
  	  });
  	  return (0, _extends2["default"])({}, options, {
  	    isInvalid: isInvalid,
  	    axisFamily: 'band',
  	    isVertical: isVertical,
  	    scale: scale,
  	    range: range,
  	    outerScale: outerScale,
  	    formatters: formatters,
  	    primaryBandScale: primaryBandScale,
  	    seriesBandScale: seriesBandScale
  	  });
  	} //


  	function stackSeries(series, axisOptions) {
  	  var _axisOptions$stackOff;

  	  var seriesIndices = Object.keys(series);
  	  var stacker = (0, _d3Shape.stack)().keys(seriesIndices).value(function (_, seriesIndex, index) {
  	    var _series$Number, _series$Number$datums;

  	    var originalDatum = (_series$Number = series[Number(seriesIndex)]) == null ? void 0 : (_series$Number$datums = _series$Number.datums[index]) == null ? void 0 : _series$Number$datums.originalDatum;
  	    var val = typeof originalDatum !== 'undefined' ? axisOptions.getValue(originalDatum) : 0;

  	    if (typeof val === 'undefined' || val === null) {
  	      return 0;
  	    }

  	    return val;
  	  }).offset((_axisOptions$stackOff = axisOptions.stackOffset) != null ? _axisOptions$stackOff : _d3Shape.stackOffsetNone);
  	  var stacked = stacker(Array.from({
  	    length: series.sort(function (a, b) {
  	      return b.datums.length - a.datums.length;
  	    })[0].datums.length
  	  }));

  	  for (var sIndex = 0; sIndex < stacked.length; sIndex++) {
  	    var s = stacked[sIndex];

  	    for (var i = 0; i < s.length; i++) {
  	      var datum = s[i];

  	      if (series[sIndex].datums[i]) {
  	        // @ts-ignore
  	        datum.data = series[sIndex].datums[i];
  	        series[sIndex].datums[i].stackData = datum;
  	      }
  	    }
  	  }
  	}

  	function buildPrimaryBandScale(options, scale, series, range) {
  	  var _options$outerBandPad3, _options$innerBandPad3;

  	  // Find the two closest points along axis
  	  var impliedBandWidth = Math.max.apply(Math, range);

  	  for (var i = 0; i < series.length; i++) {
  	    var serie = series[i];

  	    for (var j = 0; j < serie.datums.length; j++) {
  	      var _d1$primaryValue;

  	      var d1 = serie.datums[j];
  	      var one = scale((_d1$primaryValue = d1.primaryValue) != null ? _d1$primaryValue : NaN);

  	      for (var k = 0; k < serie.datums.length; k++) {
  	        var _d2$primaryValue;

  	        var d2 = serie.datums[k];
  	        var two = scale((_d2$primaryValue = d2.primaryValue) != null ? _d2$primaryValue : NaN);

  	        if (one === two) {
  	          continue;
  	        }

  	        var diff = Math.abs(Math.max(one, two) - Math.min(one, two));

  	        if (diff < impliedBandWidth) {
  	          impliedBandWidth = diff;
  	        }
  	      }
  	    }
  	  }

  	  var bandRange = Math.max.apply(Math, range);
  	  var bandDomain = (0, _d3Array.range)(bandRange / impliedBandWidth);
  	  var primaryBandScale = (0, _d3Scale.scaleBand)(bandDomain, range).round(false).paddingOuter((_options$outerBandPad3 = options.outerBandPadding) != null ? _options$outerBandPad3 : 0).paddingInner((_options$innerBandPad3 = options.innerBandPadding) != null ? _options$innerBandPad3 : 0);
  	  return primaryBandScale;
  	}

  	function buildSeriesBandScale(options, primaryBandScale, series) {
  	  var _options$outerSeriesB2, _options$innerSeriesB2;

  	  var bandDomain = (0, _d3Array.range)(series.length);
  	  var seriesBandScale = (0, _d3Scale.scaleBand)(bandDomain, [0, primaryBandScale.bandwidth()]).round(false).paddingOuter((_options$outerSeriesB2 = options.outerSeriesBandPadding) != null ? _options$outerSeriesB2 : options.outerBandPadding ? options.outerBandPadding / 2 : 0).paddingInner((_options$innerSeriesB2 = options.innerSeriesBandPadding) != null ? _options$innerSeriesB2 : options.innerBandPadding ? options.innerBandPadding / 2 : 0);

  	  var scale = function scale(seriesIndex) {
  	    var _series$find;

  	    return seriesBandScale((_series$find = series.find(function (d) {
  	      return d.index === seriesIndex;
  	    })) == null ? void 0 : _series$find.indexPerAxis);
  	  };

  	  return Object.assign(scale, seriesBandScale);
  	}
  } (buildAxis_linear));

  var AxisLinear = {};

  var AxisLinear_useMeasure = {};

  (function (exports) {

  	var _interopRequireDefault = interopRequireDefault.exports["default"];

  	exports.__esModule = true;
  	exports["default"] = useMeasure;

  	var _extends5 = _interopRequireDefault(_extends$2.exports);

  	var _react = _interopRequireDefault(React__default["default"]);

  	var _useIsomorphicLayoutEffect = _interopRequireDefault(useIsomorphicLayoutEffect);

  	var _chartContext = _interopRequireDefault(chartContext);

  	var getElBox = function getElBox(el) {
  	  var rect = el.getBoundingClientRect();
  	  return {
  	    top: Math.round(rect.top),
  	    right: Math.round(rect.right),
  	    bottom: Math.round(rect.bottom),
  	    left: Math.round(rect.left),
  	    width: Math.round(rect.width),
  	    height: Math.round(rect.height),
  	    x: Math.round(rect.x),
  	    y: Math.round(rect.y)
  	  };
  	};

  	function useMeasure(_ref) {
  	  var axis = _ref.axis,
  	      elRef = _ref.elRef,
  	      gridDimensions = _ref.gridDimensions,
  	      setShowRotated = _ref.setShowRotated;

  	  var _useChartContext = (0, _chartContext["default"])(),
  	      axisDimensionsState = _useChartContext.axisDimensionsState;

  	  var axisDimensions = axisDimensionsState[0],
  	      setAxisDimensions = axisDimensionsState[1];

  	  var axisDimension = _react["default"].useMemo(function () {
  	    var _axisDimensions;

  	    return (_axisDimensions = axisDimensions[axis.position]) == null ? void 0 : _axisDimensions[axis.id];
  	  }, [axisDimensions, axis.position, axis.id]); // const isLooping = useIsLooping()


  	  var measureRotation = _react["default"].useCallback(function () {
  	    var _widestLabel2;

  	    if (!elRef.current) {
  	      return;
  	    }

  	    var gridSize = !axis.isVertical ? gridDimensions.width : gridDimensions.height;
  	    var staticLabelDims = Array.from(elRef.current.querySelectorAll('.Axis-Group.outer .tickLabel')).map(function (el) {
  	      return getElBox(el);
  	    }); // Determine the largest labels on the axis

  	    var widestLabel;
  	    staticLabelDims.forEach(function (label) {
  	      var _widestLabel;

  	      var resolvedLabel = (_widestLabel = widestLabel) != null ? _widestLabel : {
  	        width: 0
  	      };

  	      if (label.width > 0 && label.width > resolvedLabel.width) {
  	        widestLabel = label;
  	      }
  	    });
  	    var smallestTickGap = gridSize;

  	    if (staticLabelDims.length > 1) {
  	      staticLabelDims.forEach(function (current, i) {
  	        var prev = staticLabelDims[i - 1];

  	        if (prev) {
  	          smallestTickGap = Math.min(smallestTickGap, axis.isVertical ? current.top - prev.top : current.left - prev.left);
  	        }
  	      });
  	    }

  	    var shouldRotate = (((_widestLabel2 = widestLabel) == null ? void 0 : _widestLabel2.width) || 0) + axis.minTickPaddingForRotation > smallestTickGap; // if (!isLooping) {
  	    // Rotate ticks for non-time horizontal axes

  	    if (!axis.isVertical) {
  	      setShowRotated(shouldRotate);
  	    } // }

  	  }, [elRef, axis.isVertical, axis.minTickPaddingForRotation, gridDimensions.width, gridDimensions.height, setShowRotated]);

  	  var measureDimensions = _react["default"].useCallback(function () {
  	    if (!elRef.current) {
  	      if (axisDimension) {
  	        // If the entire axis is hidden, then we need to remove the axis dimensions
  	        setAxisDimensions(function (old) {
  	          var _old$axis$position, _extends2;

  	          var newAxes = (0, _extends5["default"])({}, (_old$axis$position = old[axis.position]) != null ? _old$axis$position : {});
  	          delete newAxes[axis.id];
  	          return (0, _extends5["default"])({}, old, (_extends2 = {}, _extends2[axis.position] = newAxes, _extends2));
  	        });
  	      }

  	      return;
  	    }

  	    var newDimensions = {
  	      width: 0,
  	      height: 0,
  	      paddingTop: 0,
  	      paddingBottom: 0,
  	      paddingLeft: 0,
  	      paddingRight: 0
  	    };
  	    var currentEl = elRef.current;
  	    var axisEl = currentEl.querySelector(".Axis-Group.inner .domainAndTicks");
  	    var domainEl = currentEl.querySelector(".Axis-Group.inner .domain");

  	    if (!axisEl || !domainEl) {
  	      return;
  	    }

  	    var axisDims = getElBox(axisEl);
  	    var domainDims = getElBox(domainEl);

  	    if (!axisDims || !domainDims) {
  	      return;
  	    } // Axis overflow measurements


  	    if (!axis.isVertical) {
  	      newDimensions.paddingLeft = Math.round(Math.max(0, domainDims.left - (axisDims == null ? void 0 : axisDims.left)));
  	      newDimensions.paddingRight = Math.round(Math.max(0, (axisDims == null ? void 0 : axisDims.right) - domainDims.right));
  	      newDimensions.height = axisDims == null ? void 0 : axisDims.height;
  	    } else {
  	      newDimensions.paddingTop = Math.round(Math.max(0, domainDims.top - (axisDims == null ? void 0 : axisDims.top)));
  	      newDimensions.paddingBottom = Math.round(Math.max(0, (axisDims == null ? void 0 : axisDims.bottom) - domainDims.bottom));
  	      newDimensions.width = axisDims == null ? void 0 : axisDims.width;
  	    } // Only update the axisDimensions if something has changed


  	    if ( // !isLooping &&
  	    !axisDimensions || !axisDimension || Object.keys(newDimensions).some(function (key) {
  	      // @ts-ignore
  	      return newDimensions[key] !== axisDimension[key];
  	    })) {
  	      setAxisDimensions(function (old) {
  	        var _old$axis$position2, _extends3, _extends4;

  	        return (0, _extends5["default"])({}, old, (_extends4 = {}, _extends4[axis.position] = (0, _extends5["default"])({}, (_old$axis$position2 = old[axis.position]) != null ? _old$axis$position2 : {}, (_extends3 = {}, _extends3[axis.id] = newDimensions, _extends3)), _extends4));
  	      });
  	    }
  	  }, [axis.id, axis.isVertical, axis.position, axisDimension, axisDimensions, elRef, setAxisDimensions]); // Measure after if needed


  	  (0, _useIsomorphicLayoutEffect["default"])(function () {
  	    // setTimeout(() => {
  	    window.requestAnimationFrame(function () {
  	      measureRotation();
  	      measureDimensions();
  	    });
  	  }, [measureRotation]); // useIsomorphicLayoutEffect(() => {
  	  //   // setTimeout(() => {
  	  //   window.requestAnimationFrame(() => {
  	  //   })
  	  // }, [measureRotation])
  	}
  } (AxisLinear_useMeasure));

  (function (exports) {

  	var _interopRequireDefault = interopRequireDefault.exports["default"];

  	exports.__esModule = true;
  	exports["default"] = AxisLinearComp;

  	var _extends2 = _interopRequireDefault(_extends$2.exports);

  	var _react = _interopRequireDefault(React__default["default"]);

  	var _Utils = Utils;

  	var _chartContext = _interopRequireDefault(chartContext);

  	var _AxisLinear = _interopRequireDefault(AxisLinear_useMeasure);

  	//
  	function AxisLinearComp(axis) {
  	  var _React$useState = _react["default"].useState(false),
  	      showRotated = _React$useState[0],
  	      setShowRotated = _React$useState[1];

  	  var _useChartContext = (0, _chartContext["default"])(),
  	      getOptions = _useChartContext.getOptions,
  	      gridDimensions = _useChartContext.gridDimensions,
  	      width = _useChartContext.width,
  	      height = _useChartContext.height;

  	  var _getOptions = getOptions(),
  	      dark = _getOptions.dark,
  	      showDebugAxes = _getOptions.showDebugAxes;

  	  var elRef = _react["default"].useRef(null);

  	  (0, _AxisLinear["default"])({
  	    axis: axis,
  	    elRef: elRef,
  	    gridDimensions: gridDimensions,
  	    showRotated: showRotated,
  	    setShowRotated: setShowRotated
  	  });

  	  var renderAxis = function renderAxis(isOuter) {
  	    var isRotated = !isOuter && showRotated;
  	    var scale = isOuter ? axis.outerScale : axis.scale;

  	    var _scale$range = scale.range(),
  	        rangeStart = _scale$range[0],
  	        rangeEnd = _scale$range[1];

  	    var getTicks = function getTicks() {
  	      var anyAxis = axis;

  	      if (anyAxis.outerScale.ticks) {
  	        if (typeof anyAxis.tickCount === 'number') {
  	          return anyAxis.outerScale.ticks(anyAxis.tickCount);
  	        }

  	        var autoSpacing = anyAxis.isVertical ? 40 : 80;
  	        var range = anyAxis.outerScale.range();
  	        var num = Math.abs(range[1] - range[0]) / autoSpacing;
  	        return anyAxis.outerScale.ticks(num);
  	      }

  	      return anyAxis.outerScale.domain();
  	    };

  	    var resolvedHeight = isOuter ? height : gridDimensions.height;
  	    var resolvedWidth = isOuter ? width : gridDimensions.width;

  	    var _ref = axis.position === 'left' ? [{
  	      x: 0,
  	      y: rangeStart
  	    }, {
  	      x: 0,
  	      y: rangeEnd
  	    }] : axis.position === 'right' ? [{
  	      x: resolvedWidth,
  	      y: rangeStart
  	    }, {
  	      x: resolvedWidth,
  	      y: rangeEnd
  	    }] : axis.position === 'top' ? [{
  	      x: rangeStart,
  	      y: 0
  	    }, {
  	      x: rangeEnd,
  	      y: 0
  	    }] : [{
  	      x: rangeStart,
  	      y: resolvedHeight
  	    }, {
  	      x: rangeEnd,
  	      y: resolvedHeight
  	    }],
  	        lineFrom = _ref[0],
  	        lineTo = _ref[1];

  	    var ticks = getTicks().map(function (tick) {
  	      var px = getTickPx(scale, tick);

  	      var _ref2 = axis.position === 'left' ? [{
  	        x: 0,
  	        y: px
  	      }, {
  	        x: -8,
  	        y: px
  	      }, {
  	        x: resolvedWidth,
  	        y: px
  	      }] : axis.position === 'right' ? [{
  	        x: resolvedWidth,
  	        y: px
  	      }, {
  	        x: resolvedWidth + 8,
  	        y: px
  	      }, {
  	        x: 0,
  	        y: px
  	      }] : axis.position === 'top' ? [{
  	        x: px,
  	        y: 0
  	      }, {
  	        x: px,
  	        y: -8
  	      }, {
  	        x: px,
  	        y: resolvedHeight
  	      }] : [{
  	        x: px,
  	        y: resolvedHeight
  	      }, {
  	        x: px,
  	        y: resolvedHeight + 8
  	      }, {
  	        x: px,
  	        y: 0
  	      }],
  	          from = _ref2[0],
  	          to = _ref2[1],
  	          gridTo = _ref2[2];

  	      return {
  	        value: tick,
  	        from: from,
  	        to: to,
  	        gridTo: gridTo
  	      };
  	    });
  	    return /*#__PURE__*/_react["default"].createElement("g", {
  	      key: "Axis-Group " + (isOuter ? 'outer' : 'inner'),
  	      className: "Axis-Group " + (isOuter ? 'outer' : 'inner'),
  	      style: {
  	        transform: isOuter ? undefined : (0, _Utils.translate)(gridDimensions.left, gridDimensions.top)
  	      }
  	    }, /*#__PURE__*/_react["default"].createElement("g", {
  	      className: "Axis",
  	      style: (0, _extends2["default"])({}, isOuter ? {
  	        opacity: showDebugAxes ? 0.5 : 0,
  	        pointerEvents: 'none'
  	      } : {
  	        opacity: 1,
  	        pointerEvents: 'all'
  	      })
  	    }, /*#__PURE__*/_react["default"].createElement("g", {
  	      className: "domainAndTicks"
  	    }, /*#__PURE__*/_react["default"].createElement("line", {
  	      className: "domain",
  	      x1: lineFrom.x,
  	      y1: lineFrom.y,
  	      x2: lineTo.x,
  	      y2: lineTo.y,
  	      stroke: dark ? 'rgba(255,255,255, .2)' : 'rgba(0,0,0, .2)'
  	    }), ticks.map(function (tick, i) {
  	      var _tick$to = tick.to,
  	          tickLabelX = _tick$to.x,
  	          tickLabelY = _tick$to.y;

  	      if (axis.position === 'top') {
  	        tickLabelY -= 5;
  	      } else if (axis.position === 'bottom') {
  	        tickLabelY += 5;
  	      } else if (axis.position === 'left') {
  	        tickLabelX -= 5;
  	      } else if (axis.position === 'right') {
  	        tickLabelX += 5;
  	      }

  	      return /*#__PURE__*/_react["default"].createElement("g", {
  	        key: "vx-tick-" + tick + "-" + i,
  	        className: 'tick'
  	      }, !isOuter ? /*#__PURE__*/_react["default"].createElement("line", {
  	        x1: tick.from.x,
  	        y1: tick.from.y,
  	        x2: tick.to.x,
  	        y2: tick.to.y,
  	        stroke: dark ? 'rgba(255,255,255, .2)' : 'rgba(0,0,0, .2)'
  	      }) : null, /*#__PURE__*/_react["default"].createElement("text", {
  	        className: "tickLabel",
  	        style: {
  	          fontSize: 10,
  	          fill: dark ? 'rgba(255,255,255, .7)' : 'rgba(0,0,0, .7)',
  	          dominantBaseline: isRotated ? 'central' : axis.position === 'bottom' ? 'hanging' : axis.position === 'top' ? 'alphabetic' : 'central',
  	          textAnchor: isRotated ? 'end' : axis.position === 'right' ? 'start' : axis.position === 'left' ? 'end' : 'middle'
  	        },
  	        transform: "translate(" + tickLabelX + ", " + tickLabelY + ") rotate(" + (isRotated ? axis.position === 'top' ? 60 : -60 : 0) + ")"
  	      }, axis.formatters.scale(tick.value)));
  	    })), /*#__PURE__*/_react["default"].createElement("g", {
  	      className: "grid"
  	    }, ticks.map(function (tick, i) {
  	      var _axis$showGrid;

  	      return /*#__PURE__*/_react["default"].createElement("g", {
  	        key: "vx-tick-" + tick + "-" + i,
  	        className: 'tick'
  	      }, ((_axis$showGrid = axis.showGrid) != null ? _axis$showGrid : true) && !isOuter ? /*#__PURE__*/_react["default"].createElement("line", {
  	        x1: tick.from.x,
  	        y1: tick.from.y,
  	        x2: tick.gridTo.x,
  	        y2: tick.gridTo.y,
  	        stroke: dark ? 'rgba(255,255,255, .05)' : 'rgba(0,0,0, .05)'
  	      }) : null);
  	    }))));
  	  };

  	  return axis.show ? /*#__PURE__*/_react["default"].createElement("g", {
  	    ref: elRef
  	  }, renderAxis(false), renderAxis(true)) : null;
  	}

  	function getTickPx(scale, value) {
  	  var _scale;

  	  var px = (_scale = scale(value)) != null ? _scale : NaN; // @ts-ignore

  	  if (scale.bandwidth) {
  	    // @ts-ignore
  	    return px + scale.bandwidth() / 2;
  	  }

  	  return px;
  	}
  } (AxisLinear));

  var Cursors = {};

  var usePrevious = {};

  (function (exports) {

  	var _interopRequireDefault = interopRequireDefault.exports["default"];

  	exports.__esModule = true;
  	exports["default"] = usePrevious;

  	var _react = _interopRequireDefault(React__default["default"]);

  	var _useIsomorphicLayoutEffect = _interopRequireDefault(useIsomorphicLayoutEffect);

  	function usePrevious(val) {
  	  var ref = _react["default"].useRef();

  	  (0, _useIsomorphicLayoutEffect["default"])(function () {
  	    ref.current = val;
  	  }, [val]);
  	  return ref.current;
  	}
  } (usePrevious));

  var useLatestWhen = {};

  (function (exports) {

  	var _interopRequireDefault = interopRequireDefault.exports["default"];

  	exports.__esModule = true;
  	exports["default"] = useLatestWhen;

  	var _react = _interopRequireDefault(React__default["default"]);

  	function useLatestWhen(obj, when) {
  	  if (when === void 0) {
  	    when = true;
  	  }

  	  var ref = _react["default"].useRef(when ? obj : null);

  	  if (when) {
  	    ref.current = obj;
  	  }

  	  return ref.current;
  	}
  } (useLatestWhen));

  var usePortalElement = {};

  (function (exports) {

  	var _interopRequireDefault = interopRequireDefault.exports["default"];

  	var _interopRequireWildcard = interopRequireWildcard.exports["default"];

  	exports.__esModule = true;
  	exports["default"] = usePortalElement;

  	var React = _interopRequireWildcard(React__default["default"]);

  	var _useIsomorphicLayoutEffect = _interopRequireDefault(useIsomorphicLayoutEffect);

  	function usePortalElement() {
  	  var _React$useState = React.useState(),
  	      portalEl = _React$useState[0],
  	      setPortalEl = _React$useState[1];

  	  (0, _useIsomorphicLayoutEffect["default"])(function () {
  	    if (!portalEl) {
  	      var element = document.getElementById('react-charts-portal');

  	      if (!element) {
  	        element = document.createElement('div');
  	        element.setAttribute('id', 'react-charts-portal');
  	        Object.assign(element.style, {
  	          pointerEvents: 'none',
  	          position: 'fixed',
  	          left: 0,
  	          right: 0,
  	          top: 0,
  	          bottom: 0,
  	          'z-index': 99999999999
  	        });
  	        document.body.append(element);
  	      }

  	      setPortalEl(element);
  	    }
  	  });
  	  return portalEl;
  	}
  } (usePortalElement));

  var useRect = {};

  (function (exports) {

  	var _interopRequireDefault = interopRequireDefault.exports["default"];

  	exports.__esModule = true;
  	exports["default"] = useRect;

  	var _react = _interopRequireDefault(React__default["default"]);

  	function useRect(element, enabled) {
  	  var rerender = _react["default"].useReducer(function () {
  	    return {};
  	  }, [])[1];

  	  var rectRef = _react["default"].useRef({
  	    width: 0,
  	    height: 0,
  	    x: 0,
  	    y: 0,
  	    left: 0,
  	    top: 0,
  	    right: 0,
  	    bottom: 0
  	  });

  	  var measure = _react["default"].useCallback(function () {
  	    if (element) {
  	      rectRef.current = element.getBoundingClientRect();
  	    }
  	  }, [element]);

  	  if (!rectRef.current) {
  	    measure();
  	  }

  	  _react["default"].useEffect(function () {
  	    if (!element || !enabled) {
  	      return;
  	    }

  	    var cb = function cb() {
  	      measure();
  	      rerender();
  	    };

  	    document.addEventListener('scroll', cb, true);
  	    return function () {
  	      document.removeEventListener('scroll', cb, true);
  	    };
  	  }, [element, enabled, measure, rerender]);

  	  _react["default"].useEffect(function () {
  	    if (!element || !enabled) {
  	      return;
  	    }

  	    measure();
  	    rerender();
  	    var observer = new ResizeObserver(function () {
  	      measure();
  	      rerender();
  	    });
  	    observer.observe(element);
  	    return function () {
  	      observer.unobserve(element);
  	    };
  	  }, [element, enabled, measure, rerender]);

  	  return rectRef.current;
  	}
  } (useRect));

  var useSpring$1 = {};

  var construct = {exports: {}};

  var setPrototypeOf = {exports: {}};

  (function (module) {
  	function _setPrototypeOf(o, p) {
  	  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
  	    o.__proto__ = p;
  	    return o;
  	  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  	  return _setPrototypeOf(o, p);
  	}
  	module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
  } (setPrototypeOf));

  var isNativeReflectConstruct = {exports: {}};

  (function (module) {
  	function _isNativeReflectConstruct() {
  	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  	  if (Reflect.construct.sham) return false;
  	  if (typeof Proxy === "function") return true;
  	  try {
  	    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
  	    return true;
  	  } catch (e) {
  	    return false;
  	  }
  	}
  	module.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports["default"] = module.exports;
  } (isNativeReflectConstruct));

  (function (module) {
  	var setPrototypeOf$1 = setPrototypeOf.exports;
  	var isNativeReflectConstruct$1 = isNativeReflectConstruct.exports;
  	function _construct(Parent, args, Class) {
  	  if (isNativeReflectConstruct$1()) {
  	    module.exports = _construct = Reflect.construct.bind(), module.exports.__esModule = true, module.exports["default"] = module.exports;
  	  } else {
  	    module.exports = _construct = function _construct(Parent, args, Class) {
  	      var a = [null];
  	      a.push.apply(a, args);
  	      var Constructor = Function.bind.apply(Parent, a);
  	      var instance = new Constructor();
  	      if (Class) setPrototypeOf$1(instance, Class.prototype);
  	      return instance;
  	    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  	  }
  	  return _construct.apply(null, arguments);
  	}
  	module.exports = _construct, module.exports.__esModule = true, module.exports["default"] = module.exports;
  } (construct));

  var spring = {};

  spring.__esModule = true;
  spring.Spring = void 0;
  // Super fast physics simulations for JavaScript
  // Copyright 2014 Ralph Thomas
  // Licensed under the Apache License, Version 2.0
  // https://github.com/iamralpht/gravitas.js
  // Adapted to TypeScript and customized by Tanner Linsley (@tannerlinsley)
  var epsilon = 0.001;

  function almostEqual(a, b) {
    if (Number.isNaN(a) && Number.isNaN(b)) {
      return true;
    }

    return a > b - epsilon && a < b + epsilon;
  }

  function almostZero(a) {
    return almostEqual(a, 0);
  }

  var Spring = /*#__PURE__*/function () {
    function Spring(init, mass, springConstant, damping) {
      this._m = mass;
      this._k = springConstant;
      this._c = damping;
      this._solution = null;
      this.endPosition = init;
      this._startTime = 0;
    }

    var _proto = Spring.prototype;

    _proto.x = function x(dt) {
      if (dt === undefined) {
        dt = (new Date().getTime() - this._startTime) / 1000.0;
      }

      return this._solution ? this.endPosition + this._solution.x(dt) : this.endPosition;
    };

    _proto.dx = function dx(dt) {
      if (dt === undefined) {
        dt = (new Date().getTime() - this._startTime) / 1000.0;
      }

      return this._solution ? this._solution.dx(dt) : 0;
    };

    _proto.setEnd = function setEnd(x) {
      var t = new Date().getTime();
      var velocity = 0;
      var position = this.endPosition;

      if (this._solution) {
        // Don't whack incoming velocity.
        if (almostZero(velocity)) velocity = this._solution.dx((t - this._startTime) / 1000.0);
        position = this._solution.x((t - this._startTime) / 1000.0);
        if (almostZero(velocity)) velocity = 0;
        if (almostZero(position)) position = 0;
        position += this.endPosition;
      }

      if (this._solution && almostZero(position - x) && almostZero(velocity)) {
        return;
      }

      this.endPosition = x;
      this._solution = this._solve(position - this.endPosition, velocity);
      this._startTime = t;
    };

    _proto.snap = function snap(x) {
      this._startTime = new Date().getTime();
      this.endPosition = x;
      this._solution = {
        x: function x() {
          return 0;
        },
        dx: function dx() {
          return 0;
        }
      };
    };

    _proto.done = function done() {
      return almostEqual(this.x(), this.endPosition) && almostZero(this.dx());
    } // reconfigure(mass: number, springConstant: number, damping: number) {
    //   this._m = mass
    //   this._k = springConstant
    //   this._c = damping
    //   if (this.done()) {
    //     return
    //   }
    //   this._solution = this._solve(this.x() - this.endPosition, this.dx())
    //   this._startTime = new Date().getTime()
    // }
    // springConstant() {
    //   return this._k
    // }
    // damping() {
    //   return this._c
    // }
    ;

    _proto._solve = function _solve(initial, velocity) {
      var c = this._c;
      var m = this._m;
      var k = this._k; // Solve the quadratic equation; root = (-c +/- sqrt(c^2 - 4mk)) / 2m.

      var cmk = c * c - 4 * m * k;

      if (cmk === 0) {
        // The spring is critically damped.
        // x = (c1 + c2*t) * e ^(-c/2m)*t
        var r = -c / (2 * m);
        var c1 = initial;
        var c2 = velocity / (r * initial);
        return {
          x: function x(t) {
            return (c1 + c2 * t) * Math.pow(Math.E, r * t);
          },
          dx: function dx(t) {
            var pow = Math.pow(Math.E, r * t);
            return r * (c1 + c2 * t) * pow + c2 * pow;
          }
        };
      } else if (cmk > 0) {
        // The spring is overdamped; no bounces.
        // x = c1*e^(r1*t) + c2*e^(r2t)
        // Need to find r1 and r2, the roots, then solve c1 and c2.
        var r1 = (-c - Math.sqrt(cmk)) / (2 * m);
        var r2 = (-c + Math.sqrt(cmk)) / (2 * m);

        var _c = (velocity - r1 * initial) / (r2 - r1);

        var _c2 = initial - _c;

        return {
          x: function x(t) {
            return _c2 * Math.pow(Math.E, r1 * t) + _c * Math.pow(Math.E, r2 * t);
          },
          dx: function dx(t) {
            return _c2 * r1 * Math.pow(Math.E, r1 * t) + _c * r2 * Math.pow(Math.E, r2 * t);
          }
        };
      } else {
        // The spring is underdamped, it has imaginary roots.
        // r = -(c / 2*m) +- w*i
        // w = sqrt(4mk - c^2) / 2m
        // x = (e^-(c/2m)t) * (c1 * cos(wt) + c2 * sin(wt))
        var w = Math.sqrt(4 * m * k - c * c) / (2 * m);

        var _r = -(c / 2 * m);

        var _c3 = initial;

        var _c4 = (velocity - _r * initial) / w;

        return {
          x: function x(t) {
            return Math.pow(Math.E, _r * t) * (_c3 * Math.cos(w * t) + _c4 * Math.sin(w * t));
          },
          dx: function dx(t) {
            var power = Math.pow(Math.E, _r * t);
            var cos = Math.cos(w * t);
            var sin = Math.sin(w * t);
            return power * (_c4 * w * cos - _c3 * w * sin) + _r * power * (_c4 * sin + _c3 * cos);
          }
        };
      }
    };

    return Spring;
  }();

  spring.Spring = Spring;

  var _interopRequireDefault$6 = interopRequireDefault.exports["default"];

  useSpring$1.__esModule = true;
  useSpring$1.useSpring = useSpring;
  useSpring$1.useRaf = useRaf;

  var _construct2 = _interopRequireDefault$6(construct.exports);

  var _react$3 = _interopRequireDefault$6(React__default["default"]);

  var _spring = spring;

  var _useGetLatest$1 = _interopRequireDefault$6(useGetLatest);

  function useSpring(value, config, cb, immediate, debug) {
    var springRef = _react$3["default"].useRef((0, _construct2["default"])(_spring.Spring, [value].concat(config)));

    var getValue = (0, _useGetLatest$1["default"])(value);

    var _useRaf = useRaf(function () {
      cb(springRef.current.x());
      return springRef.current.done();
    }),
        startRaf = _useRaf[0],
        stopRaf = _useRaf[1]; // Immediate


    _react$3["default"].useEffect(function () {
      if (immediate) {
        springRef.current.snap(getValue());
        startRaf();
        return;
      }

      springRef.current.setEnd(value);
      startRaf();
    }, [debug, getValue, immediate, startRaf, stopRaf, value]);

    _react$3["default"].useEffect(function () {
      return function () {
        stopRaf();
      };
    }, [stopRaf]);

    return springRef.current;
  }

  function useRaf(callback) {
    var raf = _react$3["default"].useRef(null);

    var rafCallback = _react$3["default"].useRef(callback);

    rafCallback.current = callback;

    var tick = _react$3["default"].useCallback(function () {
      if (rafCallback.current()) return;
      raf.current = requestAnimationFrame(tick);
    }, []);

    return [_react$3["default"].useMemo(function () {
      return tick;
    }, [tick]), _react$3["default"].useMemo(function () {
      return function () {
        return raf.current && cancelAnimationFrame(raf.current);
      };
    }, [])];
  }

  (function (exports) {

  	var _interopRequireDefault = interopRequireDefault.exports["default"];

  	exports.__esModule = true;
  	exports["default"] = Cursors;

  	var _extends2 = _interopRequireDefault(_extends$2.exports);

  	var _react = _interopRequireDefault(React__default["default"]);

  	var _reactDom = _interopRequireDefault(require$$2__default["default"]);

  	var _usePrevious = _interopRequireDefault(usePrevious);

  	var _useLatestWhen = _interopRequireDefault(useLatestWhen);

  	var _usePortalElement = _interopRequireDefault(usePortalElement);

  	var _Utils = Utils;

  	var _chartContext = _interopRequireDefault(chartContext);

  	var _useRect = _interopRequireDefault(useRect);

  	var _useSpring = useSpring$1;

  	var _useGetLatest = _interopRequireDefault(useGetLatest);

  	//
  	//
  	var getLineBackgroundColor = function getLineBackgroundColor(dark, bandWidth) {
  	  return dark ? "rgba(255,255,255," + (bandWidth > 4 ? 0.15 : 0.3) + ")" : "rgba(0, 26, 39, " + (bandWidth > 4 ? 0.15 : 0.3) + ")";
  	};

  	var getBackgroundColor = function getBackgroundColor(dark) {
  	  return dark ? 'rgba(255,255,255,.9)' : 'rgba(0, 26, 39, 0.9)';
  	};

  	function defaultCursor(options) {
  	  var _options$show, _options$showLine, _options$showLabel;

  	  return (0, _extends2["default"])({}, options, {
  	    show: (_options$show = options.show) != null ? _options$show : true,
  	    showLine: (_options$showLine = options.showLine) != null ? _options$showLine : true,
  	    showLabel: (_options$showLabel = options.showLabel) != null ? _options$showLabel : true
  	  });
  	}

  	function Cursors() {
  	  var _getOptions$primaryCu, _getOptions$secondary;

  	  var _useChartContext = (0, _chartContext["default"])(),
  	      getOptions = _useChartContext.getOptions;

  	  var primaryOptions = (_getOptions$primaryCu = getOptions().primaryCursor) != null ? _getOptions$primaryCu : true;
  	  var secondaryOptions = (_getOptions$secondary = getOptions().secondaryCursor) != null ? _getOptions$secondary : true;

  	  var resolvedPrimaryOptions = _react["default"].useMemo(function () {
  	    return defaultCursor(!primaryOptions ? {
  	      show: false
  	    } : typeof primaryOptions === 'boolean' ? {} : primaryOptions);
  	  }, [primaryOptions]);

  	  var resolvedSecondaryOptions = _react["default"].useMemo(function () {
  	    return defaultCursor(!secondaryOptions ? {
  	      show: false
  	    } : typeof secondaryOptions === 'boolean' ? {} : secondaryOptions);
  	  }, [secondaryOptions]);

  	  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, resolvedPrimaryOptions.show && /*#__PURE__*/_react["default"].createElement(Cursor, {
  	    primary: true,
  	    options: resolvedPrimaryOptions
  	  }), resolvedSecondaryOptions.show && /*#__PURE__*/_react["default"].createElement(Cursor, {
  	    options: resolvedSecondaryOptions
  	  }));
  	}

  	function Cursor(props) {
  	  var _secondaryAxes$find, _props$options$value, _ref, _ref2, _ref3, _ref4, _getOptions$dark;

  	  var _useChartContext2 = (0, _chartContext["default"])(),
  	      getOptions = _useChartContext2.getOptions,
  	      svgRef = _useChartContext2.svgRef,
  	      gridDimensions = _useChartContext2.gridDimensions,
  	      focusedDatumState = _useChartContext2.focusedDatumState,
  	      primaryAxis = _useChartContext2.primaryAxis,
  	      secondaryAxes = _useChartContext2.secondaryAxes;

  	  var getTooltipOptions = (0, _useGetLatest["default"])(props.options);
  	  var focusedDatum = focusedDatumState[0];
  	  var latestFocusedDatum = (0, _useLatestWhen["default"])(focusedDatum, !!focusedDatum);
  	  var secondaryAxis = (_secondaryAxes$find = secondaryAxes.find(function (d) {
  	    return d.id === (latestFocusedDatum == null ? void 0 : latestFocusedDatum.secondaryAxisId);
  	  })) != null ? _secondaryAxes$find : secondaryAxes[0];
  	  var axis = props.primary ? primaryAxis : secondaryAxis;
  	  var siblingAxis = props.primary ? secondaryAxis : primaryAxis;

  	  var resolveValue = function resolveValue(d) {
  	    var _d$stackData;

  	    return d ? axis.stacked ? (_d$stackData = d.stackData) == null ? void 0 : _d$stackData[1] : props.primary ? d.primaryValue : d.secondaryValue : undefined;
  	  };

  	  var datumValue = resolveValue(focusedDatum);

  	  _react["default"].useEffect(function () {
  	    var _getTooltipOptions;

  	    (_getTooltipOptions = getTooltipOptions()) == null ? void 0 : _getTooltipOptions.onChange == null ? void 0 : _getTooltipOptions.onChange(datumValue);
  	  }, [getTooltipOptions, datumValue]);

  	  var value = (_props$options$value = props.options.value) != null ? _props$options$value : datumValue;
  	  var latestPropsValue = (0, _useLatestWhen["default"])(props.options.value, props.options.value != null);
  	  var latestDatumValue = (0, _useLatestWhen["default"])(resolveValue(latestFocusedDatum), resolveValue(latestFocusedDatum) != null);
  	  var latestValue = latestPropsValue != null ? latestPropsValue : latestDatumValue; // Get the sibling range

  	  var siblingRange = siblingAxis.scale.range();
  	  var x;
  	  var y;
  	  var x1;
  	  var x2;
  	  var y1;
  	  var y2;
  	  var alignPctX;
  	  var alignPctY;
  	  var bandWidth = axis.axisFamily === 'band' ? axis.scale.bandwidth() : 1;
  	  var show = typeof value !== 'undefined' && !Number.isNaN(value);
  	  var px = axis.scale(value); // Vertical alignment

  	  if (axis.isVertical) {
  	    var _y, _y2;

  	    y = px;
  	    y1 = ((_y = y) != null ? _y : 0) - 1;
  	    y2 = ((_y2 = y) != null ? _y2 : 0) + bandWidth;

  	    if (axis.position === 'left') {
  	      x1 = siblingRange[0];
  	      x2 = siblingRange[1];
  	    } else {
  	      x1 = siblingRange[1];
  	      x2 = siblingRange[0];
  	    }
  	  } else {
  	    var _x, _x2;

  	    x = px;
  	    x1 = ((_x = x) != null ? _x : 0) - 1;
  	    x2 = ((_x2 = x) != null ? _x2 : 0) + bandWidth;

  	    if (axis.position === 'top') {
  	      y1 = siblingRange[0];
  	      y2 = siblingRange[1];
  	    } else {
  	      y1 = siblingRange[1];
  	      y2 = siblingRange[0];
  	    }
  	  }

  	  var lineStartX = Math.min(x1, x2);
  	  var lineStartY = Math.min(y1, y2);
  	  var lineEndX = Math.max(x1, x2);
  	  var lineEndY = Math.max(y1, y2);
  	  var lineHeight = Math.max(lineEndY - lineStartY, 0);
  	  var lineWidth = Math.max(lineEndX - lineStartX, 0);
  	  var bubbleX;
  	  var bubbleY; // Bubble placement

  	  if (axis.isVertical) {
  	    if (axis.position === 'left') {
  	      bubbleX = lineStartX;
  	    } else {
  	      bubbleX = lineEndX;
  	    }

  	    bubbleY = lineStartY + lineHeight / 2;
  	  } else {
  	    if (axis.position === 'top') {
  	      bubbleY = lineStartY;
  	    } else {
  	      bubbleY = lineEndY;
  	    }

  	    bubbleX = lineStartX + lineWidth / 2;
  	  } // Bubble anchoring


  	  if (axis.isVertical) {
  	    alignPctY = -50;

  	    if (axis.position === 'left') {
  	      alignPctX = -100;
  	    } else {
  	      alignPctX = 0;
  	    }
  	  } else {
  	    alignPctX = -50;

  	    if (axis.position === 'top') {
  	      alignPctY = -100;
  	    } else {
  	      alignPctY = 0;
  	    }
  	  }

  	  var formattedValue = axis.formatters.cursor(latestValue);
  	  var svgRect = (0, _useRect["default"])(svgRef.current, show);

  	  var lineRef = _react["default"].useRef(null);

  	  var bubbleRef = _react["default"].useRef(null);

  	  var latestLineStartX = (0, _useLatestWhen["default"])(lineStartX, px != null);
  	  var latestLineStartY = (0, _useLatestWhen["default"])(lineStartY, px != null);
  	  var latestBubbleX = (0, _useLatestWhen["default"])(bubbleX, px != null);
  	  var latestBubbleY = (0, _useLatestWhen["default"])(bubbleY, px != null);
  	  var previousTruePx = (0, _usePrevious["default"])(px);
  	  var immediate = previousTruePx == null && px !== null;
  	  lineStartX = (_ref = px != null ? lineStartX : latestLineStartX) != null ? _ref : NaN;
  	  lineStartY = (_ref2 = px != null ? lineStartY : latestLineStartY) != null ? _ref2 : NaN;
  	  bubbleX = (_ref3 = px != null ? bubbleX : latestBubbleX) != null ? _ref3 : NaN;
  	  bubbleY = (_ref4 = px != null ? bubbleY : latestBubbleY) != null ? _ref4 : NaN;
  	  var lineXSpring = (0, _useSpring.useSpring)(lineStartX, [1, 210, 20], function () {
  	    if (lineRef.current) {
  	      lineRef.current.style.transform = "translate(" + lineXSpring.x() + "px, " + lineYSpring.x() + "px)";
  	    }
  	  }, immediate);
  	  var lineYSpring = (0, _useSpring.useSpring)(lineStartY, [1, 210, 20], function () {
  	    if (lineRef.current) {
  	      lineRef.current.style.transform = "translate(" + lineXSpring.x() + "px, " + lineYSpring.x() + "px)";
  	    }
  	  }, immediate);
  	  var bubbleXSpring = (0, _useSpring.useSpring)(bubbleX, [1, 210, 20], function () {
  	    if (bubbleRef.current) {
  	      bubbleRef.current.style.transform = "translate(" + bubbleXSpring.x() + "px, " + bubbleYSpring.x() + "px)";
  	    }
  	  }, immediate);
  	  var bubbleYSpring = (0, _useSpring.useSpring)(bubbleY, [1, 210, 20], function () {
  	    if (bubbleRef.current) {
  	      bubbleRef.current.style.transform = "translate(" + bubbleXSpring.x() + "px, " + bubbleYSpring.x() + "px)";
  	    }
  	  }, immediate);
  	  var portalEl = (0, _usePortalElement["default"])();
  	  return portalEl ? /*#__PURE__*/_reactDom["default"].createPortal( /*#__PURE__*/_react["default"].createElement("div", {
  	    style: {
  	      fontFamily: 'sans-serif',
  	      pointerEvents: 'none',
  	      position: 'absolute',
  	      top: 0,
  	      left: 0,
  	      transform: (0, _Utils.translate)(svgRect.left + gridDimensions.left, svgRect.top + gridDimensions.top),
  	      opacity: show ? 1 : 0,
  	      transition: 'opacity .3s ease'
  	    },
  	    className: "Cursor"
  	  }, props.options.showLine ? /*#__PURE__*/_react["default"].createElement("div", {
  	    ref: lineRef,
  	    style: {
  	      width: lineWidth + "px",
  	      height: lineHeight + "px",
  	      position: 'absolute',
  	      top: 0,
  	      left: 0,
  	      background: getLineBackgroundColor((_getOptions$dark = getOptions().dark) != null ? _getOptions$dark : false, bandWidth)
  	    }
  	  }) : null, props.options.showLabel ? /*#__PURE__*/_react["default"].createElement("div", {
  	    ref: bubbleRef,
  	    style: {
  	      position: 'absolute',
  	      top: 0,
  	      left: 0
  	    }
  	  }, /*#__PURE__*/_react["default"].createElement("div", {
  	    style: {
  	      padding: '5px',
  	      fontSize: '10px',
  	      background: getBackgroundColor(getOptions().dark),
  	      color: getBackgroundColor(!getOptions().dark),
  	      borderRadius: '3px',
  	      position: 'relative',
  	      transform: "translate3d(" + alignPctX + "%, " + alignPctY + "%, 0)",
  	      whiteSpace: 'nowrap'
  	    }
  	  }, formattedValue)) : null), portalEl) : null;
  	}
  } (Cursors));

  var Tooltip = {};

  var useAnchor$1 = {};

  var _interopRequireDefault$5 = interopRequireDefault.exports["default"];

  useAnchor$1.__esModule = true;
  useAnchor$1.useAnchor = useAnchor;

  var _extends2$1 = _interopRequireDefault$5(_extends$2.exports);

  var _react$2 = _interopRequireDefault$5(React__default["default"]);

  var _useRect = _interopRequireDefault$5(useRect);

  // These are the keys used internally to look up and measure
  // different sides of a bounding box within another
  var sideSchemas = {
    left: {
      side: 'left',
      startKey: 'left',
      lengthKey: 'width',
      crossStartKey: 'top',
      crossLengthKey: 'height',
      fromEnd: false
    },
    right: {
      side: 'right',
      startKey: 'left',
      lengthKey: 'width',
      crossStartKey: 'top',
      crossLengthKey: 'height',
      fromEnd: true
    },
    top: {
      side: 'top',
      startKey: 'top',
      lengthKey: 'height',
      crossStartKey: 'left',
      crossLengthKey: 'width',
      fromEnd: false
    },
    bottom: {
      side: 'bottom',
      startKey: 'top',
      lengthKey: 'height',
      crossStartKey: 'left',
      crossLengthKey: 'width',
      fromEnd: true
    }
  }; // This is the final Tootlip component. It's a render prop
  // that lets you attach handlers to elements, and render a tooltip
  // anchored to them in relation to the parent portal container (either the only
  // one defined or the one referenced by Id).

  function useAnchor(options) {
    var portalDims = (0, _useRect["default"])(options.portalEl, options.show);
    var anchorDims = (0, _useRect["default"])(options.anchorEl, options.show);
    var tooltipDims = (0, _useRect["default"])(options.tooltipEl, options.show);

    var sides = _react$2["default"].useMemo(function () {
      var preSides = Array.isArray(options.side) ? options.side : [options.side];
      return preSides.map(function (alignStr) {
        var _ref = alignStr.split(' '),
            side = _ref[0],
            _ref$ = _ref[1],
            align = _ref$ === void 0 ? 'center' : _ref$;

        var incompatibleSide = !['top', 'right', 'bottom', 'left'].find(function (d) {
          return side === d;
        });

        if (incompatibleSide) {
          throw new Error("react-sticker: \"" + side + "\" is not a valid side! Must be one of ['top', 'right', 'bottom', 'left'].");
        }

        var incompatibleAlign = !['center', 'start', 'end', 'top', 'right', 'bottom', 'left'].find(function (d) {
          return align === d;
        });

        if (incompatibleAlign) {
          throw new Error("react-sticker: \"" + align + "\" is not a valid side-alignment! Must be one of ['center', 'start', 'end', 'top', 'right', 'bottom', 'left'].");
        }

        return [side, align];
      }); // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [JSON.stringify(options.side)]); // IF we have all of the dimensions needed to calculate
    // fits, then calculate the fit


    var ready = portalDims && tooltipDims && anchorDims;

    var fit = _react$2["default"].useMemo(function () {
      return ready && options.show ? fitOnBestSide({
        portalDims: portalDims,
        tooltipDims: tooltipDims,
        anchorDims: anchorDims,
        sides: sides,
        useLargest: options.useLargest
      }) : null;
    }, [anchorDims, options.show, options.useLargest, portalDims, ready, sides, tooltipDims]);

    return {
      fit: fit,
      style: (0, _extends2$1["default"])({
        position: 'absolute',
        visibility: ready ? 'visible' : 'hidden'
      }, fit == null ? void 0 : fit.style)
    };
  } // This function selects the best side for the tooltip by using
  // the ranked fits.


  function fitOnBestSide(_ref2) {
    var portalDims = _ref2.portalDims,
        tooltipDims = _ref2.tooltipDims,
        anchorDims = _ref2.anchorDims,
        sides = _ref2.sides,
        useLargest = _ref2.useLargest;
    var fits = sides.map(function (_ref3) {
      var side = _ref3[0],
          align = _ref3[1];
      return measureFit((0, _extends2$1["default"])({}, sideSchemas[side], {
        align: align,
        portalDims: portalDims,
        tooltipDims: tooltipDims,
        anchorDims: anchorDims
      }));
    });

    if (useLargest) {
      fits.sort(function (a, b) {
        return b.fitRatio - a.fitRatio;
      });
      return fits[0];
    }

    return fits.find(function (fit) {
      return fit.fitRatio >= 1;
    }) || fits[0];
  } // This function takes a side and bunch of calculated dimensions from
  // the portal, tooltip and target. Then it returns
  // the percentage fit and the style to achieve this specific fit


  function measureFit(_ref4) {
    var _style;

    var side = _ref4.side,
        align = _ref4.align,
        startKey = _ref4.startKey,
        lengthKey = _ref4.lengthKey,
        crossStartKey = _ref4.crossStartKey,
        crossLengthKey = _ref4.crossLengthKey,
        fromEnd = _ref4.fromEnd,
        portalDims = _ref4.portalDims,
        tooltipDims = _ref4.tooltipDims,
        anchorDims = _ref4.anchorDims;
    var parentStart = portalDims[startKey];
    var parentLength = portalDims[lengthKey];
    var crossParentStart = portalDims[crossStartKey];
    var crossParentLength = portalDims[crossLengthKey];
    var anchorStart = anchorDims[startKey] - portalDims[startKey];
    var anchorLength = anchorDims[lengthKey];
    var crossAnchorStart = anchorDims[crossStartKey];
    var crossAnchorLength = anchorDims[crossLengthKey];
    var crossAnchorWidth = anchorDims[crossLengthKey];
    var targetLength = tooltipDims[lengthKey];
    var crossTargetLength = tooltipDims[crossLengthKey];
    var targetStart;
    var fitRatio;

    if (!fromEnd) {
      targetStart = anchorStart - targetLength;
      fitRatio = Math.min(anchorStart / targetLength);
    } else {
      targetStart = anchorStart + anchorLength;
      fitRatio = (parentLength - (anchorStart + anchorLength)) / targetLength;
    }

    targetStart = Math.max(parentStart, Math.min(targetStart, parentLength));
    var crossTargetStart;

    if (startKey === 'left') {
      if (align === 'top') {
        align = 'start';
      } else if (align === 'bottom') {
        align = 'end';
      }
    } else {
      if (align === 'left') {
        align = 'start';
      } else if (align === 'right') {
        align = 'end';
      }
    }

    if (!['start', 'center', 'end'].includes(align)) {
      align = 'center';
    }

    if (align === 'start') {
      crossTargetStart = crossAnchorStart;
    } else if (align === 'end') {
      crossTargetStart = crossAnchorStart + crossAnchorWidth - crossTargetLength;
    } else {
      crossTargetStart = crossAnchorStart + crossAnchorLength / 2 - crossTargetLength / 2;
    }

    crossTargetStart = Math.max(crossParentStart, Math.min(crossTargetStart, crossParentLength - crossTargetLength));
    return {
      side: side,
      align: align,
      startKey: startKey,
      lengthKey: lengthKey,
      crossStartKey: crossStartKey,
      crossLengthKey: crossLengthKey,
      fromEnd: fromEnd,
      portalDims: portalDims,
      tooltipDims: tooltipDims,
      anchorDims: anchorDims,
      fitRatio: fitRatio,
      style: (_style = {}, _style[startKey] = targetStart, _style[crossStartKey] = crossTargetStart, _style)
    };
  }

  var TooltipRenderer = {};

  (function (exports) {

  	var _interopRequireDefault = interopRequireDefault.exports["default"];

  	exports.__esModule = true;
  	exports["default"] = tooltipRenderer;

  	var _extends2 = _interopRequireDefault(_extends$2.exports);

  	var _d3Array = d3Array.exports;

  	var _react = _interopRequireDefault(React__default["default"]);

  	var _useLatestWhen = _interopRequireDefault(useLatestWhen);

  	//
  	//
  	var showCount = 10;
  	var triangleSize = 7;

  	var getBackgroundColor = function getBackgroundColor(dark) {
  	  return dark ? 'rgba(255,255,255,.9)' : 'rgba(0, 26, 39, 0.9)';
  	};

  	function tooltipRenderer(props) {
  	  return /*#__PURE__*/_react["default"].createElement(TooltipRenderer, props);
  	}

  	function TooltipRenderer(props) {
  	  var _props$focusedDatum$t, _props$focusedDatum, _focusedDatum$tooltip;

  	  var latestFit = (0, _useLatestWhen["default"])(props.anchor.fit, !!props.anchor.fit);

  	  if (!props.focusedDatum) {
  	    return null;
  	  }

  	  var primaryAxis = props.primaryAxis,
  	      secondaryAxis = props.secondaryAxis,
  	      getDatumStyle = props.getDatumStyle,
  	      focusedDatum = props.focusedDatum,
  	      secondaryAxes = props.secondaryAxes;

  	  var _props$getOptions = props.getOptions(),
  	      tooltip = _props$getOptions.tooltip,
  	      dark = _props$getOptions.dark;

  	  var groupDatums = (_props$focusedDatum$t = (_props$focusedDatum = props.focusedDatum) == null ? void 0 : _props$focusedDatum.tooltipGroup) != null ? _props$focusedDatum$t : [];
  	  var resolvedShowCount = showCount ;
  	  var length = groupDatums.length; // Get the focused series' index

  	  var activeIndex = groupDatums.findIndex(function (d) {
  	    return d === focusedDatum;
  	  }); // Get the start by going back half of the showCount

  	  var start = activeIndex > -1 ? activeIndex - resolvedShowCount / 2 : 0; // Make sure it's at least 0

  	  start = Math.max(start, 0); // Use the start and add the showCount to get the end

  	  var end = activeIndex > -1 ? start + resolvedShowCount : length; // Don't let the end go passed the length

  	  end = Math.min(end, length); // Double check we aren't clipping the start

  	  start = Math.max(end - resolvedShowCount, 0); // Slice the datums by start and end

  	  var visibleSortedGroupDatums = groupDatums.slice(start, end); // Detect if we have previous items

  	  var hasPrevious = start > 0; // Or next items

  	  var hasNext = end < length;
  	  var finalAlign = (latestFit == null ? void 0 : latestFit.side) + "-" + (latestFit == null ? void 0 : latestFit.align);
  	  var arrowPosition;
  	  var triangleStyles;

  	  if (!arrowPosition) {
  	    if (finalAlign === 'left-center') {
  	      arrowPosition = 'right';
  	    } else if (finalAlign === 'right-center') {
  	      arrowPosition = 'left';
  	    } else if (finalAlign === 'top-center') {
  	      arrowPosition = 'bottom';
  	    } else if (finalAlign === 'bottom-center') {
  	      arrowPosition = 'top';
  	    } else if (finalAlign === 'right-start') {
  	      arrowPosition = 'bottomLeft';
  	    } else if (finalAlign === 'right-end') {
  	      arrowPosition = 'topLeft';
  	    } else if (finalAlign === 'left-start') {
  	      arrowPosition = 'bottomRight';
  	    } else if (finalAlign === 'left-end') {
  	      arrowPosition = 'topRight';
  	    }
  	  }

  	  var backgroundColor = getBackgroundColor(dark);

  	  if (arrowPosition === 'bottom') {
  	    triangleStyles = {
  	      top: '100%',
  	      left: '50%',
  	      transform: 'translate3d(-50%, 0%, 0)',
  	      borderLeft: triangleSize * 0.8 + "px solid transparent",
  	      borderRight: triangleSize * 0.8 + "px solid transparent",
  	      borderTop: triangleSize + "px solid " + backgroundColor
  	    };
  	  } else if (arrowPosition === 'top') {
  	    triangleStyles = {
  	      top: '0%',
  	      left: '50%',
  	      transform: 'translate3d(-50%, -100%, 0)',
  	      borderLeft: triangleSize * 0.8 + "px solid transparent",
  	      borderRight: triangleSize * 0.8 + "px solid transparent",
  	      borderBottom: triangleSize + "px solid " + backgroundColor
  	    };
  	  } else if (arrowPosition === 'right') {
  	    triangleStyles = {
  	      top: '50%',
  	      left: '100%',
  	      transform: 'translate3d(0%, -50%, 0)',
  	      borderTop: triangleSize * 0.8 + "px solid transparent",
  	      borderBottom: triangleSize * 0.8 + "px solid transparent",
  	      borderLeft: triangleSize + "px solid " + backgroundColor
  	    };
  	  } else if (arrowPosition === 'left') {
  	    triangleStyles = {
  	      top: '50%',
  	      left: '0%',
  	      transform: 'translate3d(-100%, -50%, 0)',
  	      borderTop: triangleSize * 0.8 + "px solid transparent",
  	      borderBottom: triangleSize * 0.8 + "px solid transparent",
  	      borderRight: triangleSize + "px solid " + backgroundColor
  	    };
  	  } else if (arrowPosition === 'topRight') {
  	    triangleStyles = {
  	      top: '0%',
  	      left: '100%',
  	      transform: 'translate3d(-50%, -50%, 0) rotate(-45deg)',
  	      borderTop: triangleSize * 0.8 + "px solid transparent",
  	      borderBottom: triangleSize * 0.8 + "px solid transparent",
  	      borderLeft: triangleSize * 2 + "px solid " + backgroundColor
  	    };
  	  } else if (arrowPosition === 'bottomRight') {
  	    triangleStyles = {
  	      top: '100%',
  	      left: '100%',
  	      transform: 'translate3d(-50%, -50%, 0) rotate(45deg)',
  	      borderTop: triangleSize * 0.8 + "px solid transparent",
  	      borderBottom: triangleSize * 0.8 + "px solid transparent",
  	      borderLeft: triangleSize * 2 + "px solid " + backgroundColor
  	    };
  	  } else if (arrowPosition === 'topLeft') {
  	    triangleStyles = {
  	      top: '0%',
  	      left: '0%',
  	      transform: 'translate3d(-50%, -50%, 0) rotate(45deg)',
  	      borderTop: triangleSize * 0.8 + "px solid transparent",
  	      borderBottom: triangleSize * 0.8 + "px solid transparent",
  	      borderRight: triangleSize * 2 + "px solid " + backgroundColor
  	    };
  	  } else if (arrowPosition === 'bottomLeft') {
  	    triangleStyles = {
  	      top: '100%',
  	      left: '0%',
  	      transform: 'translate3d(-50%, -50%, 0) rotate(-45deg)',
  	      borderTop: triangleSize * 0.8 + "px solid transparent",
  	      borderBottom: triangleSize * 0.8 + "px solid transparent",
  	      borderRight: triangleSize * 2 + "px solid " + backgroundColor
  	    };
  	  } else {
  	    triangleStyles = {
  	      opacity: 0
  	    };
  	  }

  	  return /*#__PURE__*/_react["default"].createElement("div", {
  	    style: {
  	      position: 'relative',
  	      fontSize: '10px',
  	      padding: '5px',
  	      background: getBackgroundColor(dark),
  	      color: dark ? 'black' : 'white',
  	      borderRadius: '3px'
  	    }
  	  }, /*#__PURE__*/_react["default"].createElement("div", {
  	    style: (0, _extends2["default"])({
  	      position: 'absolute',
  	      width: 0,
  	      height: 0
  	    }, triangleStyles)
  	  }), /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement("div", {
  	    style: {
  	      marginBottom: '3px',
  	      textAlign: 'center'
  	    }
  	  }, tooltip.groupingMode === 'series' ? /*#__PURE__*/_react["default"].createElement("strong", null, focusedDatum.seriesLabel) : tooltip.groupingMode === 'secondary' ? /*#__PURE__*/_react["default"].createElement("strong", null, secondaryAxis.formatters.tooltip(focusedDatum.secondaryValue)) : /*#__PURE__*/_react["default"].createElement("strong", null, primaryAxis.formatters.tooltip(focusedDatum.primaryValue))), /*#__PURE__*/_react["default"].createElement("table", {
  	    style: {
  	      whiteSpace: 'nowrap'
  	    }
  	  }, /*#__PURE__*/_react["default"].createElement("tbody", null, hasPrevious ? /*#__PURE__*/_react["default"].createElement("tr", {
  	    style: {
  	      opacity: 0.8
  	    }
  	  }, /*#__PURE__*/_react["default"].createElement("td", null), /*#__PURE__*/_react["default"].createElement("td", null, "..."), /*#__PURE__*/_react["default"].createElement("td", null)) : null, visibleSortedGroupDatums.map(function (sortedDatum, i) {
  	    var active = sortedDatum === focusedDatum;
  	    var datumSecondaryAxis = secondaryAxes.find(function (d) {
  	      return d.id === sortedDatum.secondaryAxisId;
  	    });
  	    return /*#__PURE__*/_react["default"].createElement("tr", {
  	      key: i,
  	      style: {
  	        opacity: active ? 1 : 0.8,
  	        fontWeight: active ? 'bold' : undefined
  	      }
  	    }, /*#__PURE__*/_react["default"].createElement("td", {
  	      style: {
  	        display: 'flex',
  	        alignItems: 'center',
  	        justifyContent: 'center'
  	      }
  	    }, /*#__PURE__*/_react["default"].createElement("svg", {
  	      width: "14",
  	      height: "14"
  	    }, /*#__PURE__*/_react["default"].createElement("circle", {
  	      cx: "7",
  	      cy: "7",
  	      r: "5",
  	      style: (0, _extends2["default"])({}, getDatumStyle(sortedDatum), {
  	        stroke: dark ? 'black' : 'white',
  	        strokeWidth: active ? 2 : 1
  	      })
  	    }))), tooltip.groupingMode === 'series' ? /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("td", null, primaryAxis.formatters.tooltip(sortedDatum.primaryValue), ": \xA0"), /*#__PURE__*/_react["default"].createElement("td", {
  	      style: {
  	        textAlign: 'right'
  	      }
  	    }, datumSecondaryAxis.formatters.tooltip(sortedDatum.secondaryValue))) : tooltip.groupingMode === 'secondary' ? /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("td", null, sortedDatum.seriesLabel, ": \xA0"), /*#__PURE__*/_react["default"].createElement("td", {
  	      style: {
  	        textAlign: 'right'
  	      }
  	    }, primaryAxis.formatters.tooltip(sortedDatum.primaryValue))) : /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("td", null, sortedDatum.seriesLabel, ": \xA0"), /*#__PURE__*/_react["default"].createElement("td", {
  	      style: {
  	        textAlign: 'right'
  	      }
  	    }, datumSecondaryAxis.formatters.tooltip(sortedDatum.secondaryValue))));
  	  }), hasNext ? /*#__PURE__*/_react["default"].createElement("tr", {
  	    style: {
  	      opacity: 0.8
  	    }
  	  }, /*#__PURE__*/_react["default"].createElement("td", null), /*#__PURE__*/_react["default"].createElement("td", null, "..."), /*#__PURE__*/_react["default"].createElement("td", null)) : null, ((_focusedDatum$tooltip = focusedDatum.tooltipGroup) != null ? _focusedDatum$tooltip : []).length > 1 ? props.secondaryAxes.filter(function (d) {
  	    return d.stacked;
  	  }).map(function (secondaryAxis, i) {
  	    var _secondaryAxis$id, _focusedDatum$tooltip2;

  	    return /*#__PURE__*/_react["default"].createElement("tr", {
  	      key: secondaryAxis.id + "_" + i
  	    }, /*#__PURE__*/_react["default"].createElement("td", {
  	      style: {
  	        paddingTop: '5px'
  	      }
  	    }, /*#__PURE__*/_react["default"].createElement("div", {
  	      style: {
  	        width: '12px',
  	        height: '12px',
  	        backgroundColor: dark ? 'rgba(0, 26, 39, 0.3)' : 'rgba(255,255,255,.2)',
  	        borderRadius: '50px'
  	      }
  	    })), /*#__PURE__*/_react["default"].createElement("td", {
  	      style: {
  	        paddingTop: '5px'
  	      }
  	    }, props.secondaryAxes.length > 1 ? (_secondaryAxis$id = secondaryAxis.id) != null ? _secondaryAxis$id : "Axis " + (i + 1) + " " : '', "Total: \xA0"), /*#__PURE__*/_react["default"].createElement("td", {
  	      style: {
  	        paddingTop: '5px'
  	      }
  	    }, secondaryAxis.formatters.scale((0, _d3Array.sum)((_focusedDatum$tooltip2 = focusedDatum.tooltipGroup) != null ? _focusedDatum$tooltip2 : [], function (d) {
  	      return d.secondaryValue;
  	    }))));
  	  }) : null))));
  	}
  } (TooltipRenderer));

  (function (exports) {

  	var _interopRequireDefault = interopRequireDefault.exports["default"];

  	exports.__esModule = true;
  	exports.defaultTooltip = defaultTooltip;
  	exports["default"] = Tooltip;

  	var _objectWithoutPropertiesLoose2 = _interopRequireDefault(objectWithoutPropertiesLoose.exports);

  	var _extends2 = _interopRequireDefault(_extends$2.exports);

  	var _react = _interopRequireDefault(React__default["default"]);

  	var _reactDom = _interopRequireDefault(require$$2__default["default"]);

  	var _useAnchor = useAnchor$1;

  	var _useLatestWhen2 = _interopRequireDefault(useLatestWhen);

  	var _usePortalElement = _interopRequireDefault(usePortalElement);

  	var _usePrevious = _interopRequireDefault(usePrevious);

  	var _chartContext = _interopRequireDefault(chartContext);

  	var _TooltipRenderer = _interopRequireDefault(TooltipRenderer);

  	var _useRect = _interopRequireDefault(useRect);

  	var _useSpring = useSpring$1;

  	var _excluded = ["visibility"];

  	//
  	function defaultTooltip(options) {
  	  var _options$align, _options$alignPriorit, _options$padding, _options$arrowPadding, _options$render;

  	  if (options === void 0) {
  	    options = {};
  	  }

  	  if (options === true) {
  	    options = {
  	      show: true
  	    };
  	  } else if (options === false) {
  	    options = {
  	      show: false
  	    };
  	  }

  	  return (0, _extends2["default"])({
  	    show: true
  	  }, options, {
  	    align: (_options$align = options.align) != null ? _options$align : 'auto',
  	    alignPriority: (_options$alignPriorit = options.alignPriority) != null ? _options$alignPriorit : ['right', 'topRight', 'bottomRight', 'left', 'topLeft', 'bottomLeft', 'top', 'bottom'],
  	    padding: (_options$padding = options.padding) != null ? _options$padding : 5,
  	    arrowPadding: (_options$arrowPadding = options.arrowPadding) != null ? _options$arrowPadding : 7,
  	    // anchor: options.anchor ?? 'closest',
  	    render: (_options$render = options.render) != null ? _options$render : _TooltipRenderer["default"]
  	  });
  	}

  	function Tooltip() {
  	  var _secondaryAxes$find, _useLatestWhen;

  	  var _useChartContext = (0, _chartContext["default"])(),
  	      focusedDatumState = _useChartContext.focusedDatumState,
  	      getOptions = _useChartContext.getOptions,
  	      primaryAxis = _useChartContext.primaryAxis,
  	      secondaryAxes = _useChartContext.secondaryAxes,
  	      getDatumStatusStyle = _useChartContext.getDatumStatusStyle,
  	      svgRef = _useChartContext.svgRef;

  	  var focusedDatum = focusedDatumState[0];
  	  var latestFocusedDatum = (0, _useLatestWhen2["default"])(focusedDatum, !!focusedDatum);
  	  var secondaryAxis = (_secondaryAxes$find = secondaryAxes.find(function (d) {
  	    return d.id === (latestFocusedDatum == null ? void 0 : latestFocusedDatum.secondaryAxisId);
  	  })) != null ? _secondaryAxes$find : secondaryAxes[0];
  	  var portalEl = (0, _usePortalElement["default"])();

  	  var _React$useState = _react["default"].useState(),
  	      tooltipEl = _React$useState[0],
  	      setTooltipEl = _React$useState[1];

  	  var svgRect = (0, _useRect["default"])(svgRef.current, !!(focusedDatum != null && focusedDatum.element));

  	  var anchorEl = _react["default"].useMemo(function () {
  	    var _latestFocusedDatum$e, _latestFocusedDatum$e2, _anchorRect$left, _anchorRect$top, _anchorRect$width, _anchorRect$height;

  	    var anchorRect = (_latestFocusedDatum$e = latestFocusedDatum == null ? void 0 : (_latestFocusedDatum$e2 = latestFocusedDatum.element) == null ? void 0 : _latestFocusedDatum$e2.getBoundingClientRect()) != null ? _latestFocusedDatum$e : null;

  	    if (!anchorRect) {
  	      return null;
  	    }

  	    if (!svgRect) return;
  	    var translateX = (_anchorRect$left = anchorRect.left) != null ? _anchorRect$left : 0;
  	    var translateY = (_anchorRect$top = anchorRect.top) != null ? _anchorRect$top : 0;
  	    var width = (_anchorRect$width = anchorRect.width) != null ? _anchorRect$width : 0;
  	    var height = (_anchorRect$height = anchorRect.height) != null ? _anchorRect$height : 0;
  	    var el = document.createElement('div');

  	    el.getBoundingClientRect = function () {
  	      return {
  	        x: translateX,
  	        y: translateY,
  	        width: width,
  	        height: height,
  	        top: translateY,
  	        left: translateX,
  	        bottom: translateY + width,
  	        right: translateX + height
  	      };
  	    };

  	    return el;
  	  }, [latestFocusedDatum == null ? void 0 : latestFocusedDatum.element, svgRect]);

  	  var anchor = (0, _useAnchor.useAnchor)({
  	    show: !!focusedDatum,
  	    portalEl: portalEl,
  	    anchorEl: anchorEl,
  	    tooltipEl: tooltipEl,
  	    side: ['right', 'left', 'top', 'bottom']
  	  });
  	  var previousAnchor = (0, _usePrevious["default"])(anchor);
  	  var latestStableAnchor = (_useLatestWhen = (0, _useLatestWhen2["default"])(anchor, !!anchor.fit)) != null ? _useLatestWhen : anchor;
  	  var _latestStableAnchor$s = latestStableAnchor.style;
  	      _latestStableAnchor$s.visibility;
  	      var anchorStyle = (0, _objectWithoutPropertiesLoose2["default"])(_latestStableAnchor$s, _excluded);

  	  var tooltipRef = _react["default"].useRef(null);

  	  var immediate = Number.isNaN(previousAnchor == null ? void 0 : previousAnchor.style.left);
  	  var tooltipXSpring = (0, _useSpring.useSpring)(anchorStyle.left || 0, [1, 210, 30], function () {
  	    if (tooltipRef.current) {
  	      tooltipRef.current.style.transform = "translate(" + tooltipXSpring.x() + "px, " + tooltipYSpring.x() + "px)";
  	    }
  	  }, immediate);
  	  var tooltipYSpring = (0, _useSpring.useSpring)(anchorStyle.top || 0, [1, 210, 30], function () {
  	    if (tooltipRef.current) {
  	      tooltipRef.current.style.transform = "translate(" + tooltipXSpring.x() + "px, " + tooltipYSpring.x() + "px)";
  	    }
  	  }, immediate); // const springProps = useSpring({
  	  //   ...anchorStyle,
  	  //   left: anchorStyle.left || 0,
  	  //   top: anchorStyle.top || 0,
  	  //   config: { mass: 1, tension: 210, friction: 30 },
  	  //   immediate: key => {
  	  //     if (['left', 'top'].includes(key)) {
  	  //       return Number.isNaN(previousAnchor?.style.left)
  	  //     }
  	  //     return false
  	  //   },
  	  // })

  	  var show = getOptions().tooltip.show;
  	  var latestFit = (0, _useLatestWhen2["default"])(anchor.fit, !!anchor.fit);
  	  return show && portalEl ? /*#__PURE__*/_reactDom["default"].createPortal( /*#__PURE__*/_react["default"].createElement("div", {
  	    ref: tooltipRef,
  	    style: {
  	      position: anchorStyle.position,
  	      opacity: !!focusedDatum ? 1 : 0,
  	      transition: 'opacity .3s ease'
  	    }
  	  }, /*#__PURE__*/_react["default"].createElement("div", {
  	    ref: function ref(el) {
  	      return setTooltipEl(el);
  	    },
  	    style: (0, _extends2["default"])({
  	      fontFamily: 'sans-serif'
  	    }, (latestFit == null ? void 0 : latestFit.startKey) === 'left' ? {
  	      padding: '0 10px'
  	    } : {
  	      padding: '10px 0'
  	    })
  	  }, getOptions().tooltip.render({
  	    getOptions: getOptions,
  	    focusedDatum: latestFocusedDatum,
  	    primaryAxis: primaryAxis,
  	    secondaryAxes: secondaryAxes,
  	    secondaryAxis: secondaryAxis,
  	    getDatumStyle: function getDatumStyle(datum) {
  	      return getDatumStatusStyle(datum, focusedDatum);
  	    },
  	    anchor: anchor
  	  }))), portalEl) : null;
  	}
  } (Tooltip));

  var Voronoi = {};

  var d3Delaunay = {exports: {}};

  (function (module, exports) {
  	// https://github.com/d3/d3-delaunay v5.3.0 Copyright 2020 Mike Bostock
  	// https://github.com/mapbox/delaunator v4.0.1. Copyright 2019 Mapbox, Inc.
  	(function (global, factory) {
  	factory(exports) ;
  	}(commonjsGlobal, function (exports) {
  	const EPSILON = Math.pow(2, -52);
  	const EDGE_STACK = new Uint32Array(512);

  	class Delaunator {

  	    static from(points, getX = defaultGetX, getY = defaultGetY) {
  	        const n = points.length;
  	        const coords = new Float64Array(n * 2);

  	        for (let i = 0; i < n; i++) {
  	            const p = points[i];
  	            coords[2 * i] = getX(p);
  	            coords[2 * i + 1] = getY(p);
  	        }

  	        return new Delaunator(coords);
  	    }

  	    constructor(coords) {
  	        const n = coords.length >> 1;
  	        if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');

  	        this.coords = coords;

  	        // arrays that will store the triangulation graph
  	        const maxTriangles = Math.max(2 * n - 5, 0);
  	        this._triangles = new Uint32Array(maxTriangles * 3);
  	        this._halfedges = new Int32Array(maxTriangles * 3);

  	        // temporary arrays for tracking the edges of the advancing convex hull
  	        this._hashSize = Math.ceil(Math.sqrt(n));
  	        this._hullPrev = new Uint32Array(n); // edge to prev edge
  	        this._hullNext = new Uint32Array(n); // edge to next edge
  	        this._hullTri = new Uint32Array(n); // edge to adjacent triangle
  	        this._hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash

  	        // temporary arrays for sorting points
  	        this._ids = new Uint32Array(n);
  	        this._dists = new Float64Array(n);

  	        this.update();
  	    }

  	    update() {
  	        const {coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash} =  this;
  	        const n = coords.length >> 1;

  	        // populate an array of point indices; calculate input data bbox
  	        let minX = Infinity;
  	        let minY = Infinity;
  	        let maxX = -Infinity;
  	        let maxY = -Infinity;

  	        for (let i = 0; i < n; i++) {
  	            const x = coords[2 * i];
  	            const y = coords[2 * i + 1];
  	            if (x < minX) minX = x;
  	            if (y < minY) minY = y;
  	            if (x > maxX) maxX = x;
  	            if (y > maxY) maxY = y;
  	            this._ids[i] = i;
  	        }
  	        const cx = (minX + maxX) / 2;
  	        const cy = (minY + maxY) / 2;

  	        let minDist = Infinity;
  	        let i0, i1, i2;

  	        // pick a seed point close to the center
  	        for (let i = 0; i < n; i++) {
  	            const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);
  	            if (d < minDist) {
  	                i0 = i;
  	                minDist = d;
  	            }
  	        }
  	        const i0x = coords[2 * i0];
  	        const i0y = coords[2 * i0 + 1];

  	        minDist = Infinity;

  	        // find the point closest to the seed
  	        for (let i = 0; i < n; i++) {
  	            if (i === i0) continue;
  	            const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);
  	            if (d < minDist && d > 0) {
  	                i1 = i;
  	                minDist = d;
  	            }
  	        }
  	        let i1x = coords[2 * i1];
  	        let i1y = coords[2 * i1 + 1];

  	        let minRadius = Infinity;

  	        // find the third point which forms the smallest circumcircle with the first two
  	        for (let i = 0; i < n; i++) {
  	            if (i === i0 || i === i1) continue;
  	            const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);
  	            if (r < minRadius) {
  	                i2 = i;
  	                minRadius = r;
  	            }
  	        }
  	        let i2x = coords[2 * i2];
  	        let i2y = coords[2 * i2 + 1];

  	        if (minRadius === Infinity) {
  	            // order collinear points by dx (or dy if all x are identical)
  	            // and return the list as a hull
  	            for (let i = 0; i < n; i++) {
  	                this._dists[i] = (coords[2 * i] - coords[0]) || (coords[2 * i + 1] - coords[1]);
  	            }
  	            quicksort(this._ids, this._dists, 0, n - 1);
  	            const hull = new Uint32Array(n);
  	            let j = 0;
  	            for (let i = 0, d0 = -Infinity; i < n; i++) {
  	                const id = this._ids[i];
  	                if (this._dists[id] > d0) {
  	                    hull[j++] = id;
  	                    d0 = this._dists[id];
  	                }
  	            }
  	            this.hull = hull.subarray(0, j);
  	            this.triangles = new Uint32Array(0);
  	            this.halfedges = new Uint32Array(0);
  	            return;
  	        }

  	        // swap the order of the seed points for counter-clockwise orientation
  	        if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {
  	            const i = i1;
  	            const x = i1x;
  	            const y = i1y;
  	            i1 = i2;
  	            i1x = i2x;
  	            i1y = i2y;
  	            i2 = i;
  	            i2x = x;
  	            i2y = y;
  	        }

  	        const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);
  	        this._cx = center.x;
  	        this._cy = center.y;

  	        for (let i = 0; i < n; i++) {
  	            this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);
  	        }

  	        // sort the points by distance from the seed triangle circumcenter
  	        quicksort(this._ids, this._dists, 0, n - 1);

  	        // set up the seed triangle as the starting hull
  	        this._hullStart = i0;
  	        let hullSize = 3;

  	        hullNext[i0] = hullPrev[i2] = i1;
  	        hullNext[i1] = hullPrev[i0] = i2;
  	        hullNext[i2] = hullPrev[i1] = i0;

  	        hullTri[i0] = 0;
  	        hullTri[i1] = 1;
  	        hullTri[i2] = 2;

  	        hullHash.fill(-1);
  	        hullHash[this._hashKey(i0x, i0y)] = i0;
  	        hullHash[this._hashKey(i1x, i1y)] = i1;
  	        hullHash[this._hashKey(i2x, i2y)] = i2;

  	        this.trianglesLen = 0;
  	        this._addTriangle(i0, i1, i2, -1, -1, -1);

  	        for (let k = 0, xp, yp; k < this._ids.length; k++) {
  	            const i = this._ids[k];
  	            const x = coords[2 * i];
  	            const y = coords[2 * i + 1];

  	            // skip near-duplicate points
  	            if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;
  	            xp = x;
  	            yp = y;

  	            // skip seed triangle points
  	            if (i === i0 || i === i1 || i === i2) continue;

  	            // find a visible edge on the convex hull using edge hash
  	            let start = 0;
  	            for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {
  	                start = hullHash[(key + j) % this._hashSize];
  	                if (start !== -1 && start !== hullNext[start]) break;
  	            }

  	            start = hullPrev[start];
  	            let e = start, q;
  	            while (q = hullNext[e], !orient(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1])) {
  	                e = q;
  	                if (e === start) {
  	                    e = -1;
  	                    break;
  	                }
  	            }
  	            if (e === -1) continue; // likely a near-duplicate point; skip it

  	            // add the first triangle from the point
  	            let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);

  	            // recursively flip triangles from the point until they satisfy the Delaunay condition
  	            hullTri[i] = this._legalize(t + 2);
  	            hullTri[e] = t; // keep track of boundary triangles on the hull
  	            hullSize++;

  	            // walk forward through the hull, adding more triangles and flipping recursively
  	            let n = hullNext[e];
  	            while (q = hullNext[n], orient(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1])) {
  	                t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);
  	                hullTri[i] = this._legalize(t + 2);
  	                hullNext[n] = n; // mark as removed
  	                hullSize--;
  	                n = q;
  	            }

  	            // walk backward from the other side, adding more triangles and flipping
  	            if (e === start) {
  	                while (q = hullPrev[e], orient(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1])) {
  	                    t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);
  	                    this._legalize(t + 2);
  	                    hullTri[q] = t;
  	                    hullNext[e] = e; // mark as removed
  	                    hullSize--;
  	                    e = q;
  	                }
  	            }

  	            // update the hull indices
  	            this._hullStart = hullPrev[i] = e;
  	            hullNext[e] = hullPrev[n] = i;
  	            hullNext[i] = n;

  	            // save the two new edges in the hash table
  	            hullHash[this._hashKey(x, y)] = i;
  	            hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;
  	        }

  	        this.hull = new Uint32Array(hullSize);
  	        for (let i = 0, e = this._hullStart; i < hullSize; i++) {
  	            this.hull[i] = e;
  	            e = hullNext[e];
  	        }

  	        // trim typed triangle mesh arrays
  	        this.triangles = this._triangles.subarray(0, this.trianglesLen);
  	        this.halfedges = this._halfedges.subarray(0, this.trianglesLen);
  	    }

  	    _hashKey(x, y) {
  	        return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;
  	    }

  	    _legalize(a) {
  	        const {_triangles: triangles, _halfedges: halfedges, coords} = this;

  	        let i = 0;
  	        let ar = 0;

  	        // recursion eliminated with a fixed-size stack
  	        while (true) {
  	            const b = halfedges[a];

  	            /* if the pair of triangles doesn't satisfy the Delaunay condition
  	             * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,
  	             * then do the same check/flip recursively for the new pair of triangles
  	             *
  	             *           pl                    pl
  	             *          /||\                  /  \
  	             *       al/ || \bl            al/    \a
  	             *        /  ||  \              /      \
  	             *       /  a||b  \    flip    /___ar___\
  	             *     p0\   ||   /p1   =>   p0\---bl---/p1
  	             *        \  ||  /              \      /
  	             *       ar\ || /br             b\    /br
  	             *          \||/                  \  /
  	             *           pr                    pr
  	             */
  	            const a0 = a - a % 3;
  	            ar = a0 + (a + 2) % 3;

  	            if (b === -1) { // convex hull edge
  	                if (i === 0) break;
  	                a = EDGE_STACK[--i];
  	                continue;
  	            }

  	            const b0 = b - b % 3;
  	            const al = a0 + (a + 1) % 3;
  	            const bl = b0 + (b + 2) % 3;

  	            const p0 = triangles[ar];
  	            const pr = triangles[a];
  	            const pl = triangles[al];
  	            const p1 = triangles[bl];

  	            const illegal = inCircle(
  	                coords[2 * p0], coords[2 * p0 + 1],
  	                coords[2 * pr], coords[2 * pr + 1],
  	                coords[2 * pl], coords[2 * pl + 1],
  	                coords[2 * p1], coords[2 * p1 + 1]);

  	            if (illegal) {
  	                triangles[a] = p1;
  	                triangles[b] = p0;

  	                const hbl = halfedges[bl];

  	                // edge swapped on the other side of the hull (rare); fix the halfedge reference
  	                if (hbl === -1) {
  	                    let e = this._hullStart;
  	                    do {
  	                        if (this._hullTri[e] === bl) {
  	                            this._hullTri[e] = a;
  	                            break;
  	                        }
  	                        e = this._hullPrev[e];
  	                    } while (e !== this._hullStart);
  	                }
  	                this._link(a, hbl);
  	                this._link(b, halfedges[ar]);
  	                this._link(ar, bl);

  	                const br = b0 + (b + 1) % 3;

  	                // don't worry about hitting the cap: it can only happen on extremely degenerate input
  	                if (i < EDGE_STACK.length) {
  	                    EDGE_STACK[i++] = br;
  	                }
  	            } else {
  	                if (i === 0) break;
  	                a = EDGE_STACK[--i];
  	            }
  	        }

  	        return ar;
  	    }

  	    _link(a, b) {
  	        this._halfedges[a] = b;
  	        if (b !== -1) this._halfedges[b] = a;
  	    }

  	    // add a new triangle given vertex indices and adjacent half-edge ids
  	    _addTriangle(i0, i1, i2, a, b, c) {
  	        const t = this.trianglesLen;

  	        this._triangles[t] = i0;
  	        this._triangles[t + 1] = i1;
  	        this._triangles[t + 2] = i2;

  	        this._link(t, a);
  	        this._link(t + 1, b);
  	        this._link(t + 2, c);

  	        this.trianglesLen += 3;

  	        return t;
  	    }
  	}

  	// monotonically increases with real angle, but doesn't need expensive trigonometry
  	function pseudoAngle(dx, dy) {
  	    const p = dx / (Math.abs(dx) + Math.abs(dy));
  	    return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]
  	}

  	function dist(ax, ay, bx, by) {
  	    const dx = ax - bx;
  	    const dy = ay - by;
  	    return dx * dx + dy * dy;
  	}

  	// return 2d orientation sign if we're confident in it through J. Shewchuk's error bound check
  	function orientIfSure(px, py, rx, ry, qx, qy) {
  	    const l = (ry - py) * (qx - px);
  	    const r = (rx - px) * (qy - py);
  	    return Math.abs(l - r) >= 3.3306690738754716e-16 * Math.abs(l + r) ? l - r : 0;
  	}

  	// a more robust orientation test that's stable in a given triangle (to fix robustness issues)
  	function orient(rx, ry, qx, qy, px, py) {
  	    const sign = orientIfSure(px, py, rx, ry, qx, qy) ||
  	    orientIfSure(rx, ry, qx, qy, px, py) ||
  	    orientIfSure(qx, qy, px, py, rx, ry);
  	    return sign < 0;
  	}

  	function inCircle(ax, ay, bx, by, cx, cy, px, py) {
  	    const dx = ax - px;
  	    const dy = ay - py;
  	    const ex = bx - px;
  	    const ey = by - py;
  	    const fx = cx - px;
  	    const fy = cy - py;

  	    const ap = dx * dx + dy * dy;
  	    const bp = ex * ex + ey * ey;
  	    const cp = fx * fx + fy * fy;

  	    return dx * (ey * cp - bp * fy) -
  	           dy * (ex * cp - bp * fx) +
  	           ap * (ex * fy - ey * fx) < 0;
  	}

  	function circumradius(ax, ay, bx, by, cx, cy) {
  	    const dx = bx - ax;
  	    const dy = by - ay;
  	    const ex = cx - ax;
  	    const ey = cy - ay;

  	    const bl = dx * dx + dy * dy;
  	    const cl = ex * ex + ey * ey;
  	    const d = 0.5 / (dx * ey - dy * ex);

  	    const x = (ey * bl - dy * cl) * d;
  	    const y = (dx * cl - ex * bl) * d;

  	    return x * x + y * y;
  	}

  	function circumcenter(ax, ay, bx, by, cx, cy) {
  	    const dx = bx - ax;
  	    const dy = by - ay;
  	    const ex = cx - ax;
  	    const ey = cy - ay;

  	    const bl = dx * dx + dy * dy;
  	    const cl = ex * ex + ey * ey;
  	    const d = 0.5 / (dx * ey - dy * ex);

  	    const x = ax + (ey * bl - dy * cl) * d;
  	    const y = ay + (dx * cl - ex * bl) * d;

  	    return {x, y};
  	}

  	function quicksort(ids, dists, left, right) {
  	    if (right - left <= 20) {
  	        for (let i = left + 1; i <= right; i++) {
  	            const temp = ids[i];
  	            const tempDist = dists[temp];
  	            let j = i - 1;
  	            while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];
  	            ids[j + 1] = temp;
  	        }
  	    } else {
  	        const median = (left + right) >> 1;
  	        let i = left + 1;
  	        let j = right;
  	        swap(ids, median, i);
  	        if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);
  	        if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);
  	        if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);

  	        const temp = ids[i];
  	        const tempDist = dists[temp];
  	        while (true) {
  	            do i++; while (dists[ids[i]] < tempDist);
  	            do j--; while (dists[ids[j]] > tempDist);
  	            if (j < i) break;
  	            swap(ids, i, j);
  	        }
  	        ids[left + 1] = ids[j];
  	        ids[j] = temp;

  	        if (right - i + 1 >= j - left) {
  	            quicksort(ids, dists, i, right);
  	            quicksort(ids, dists, left, j - 1);
  	        } else {
  	            quicksort(ids, dists, left, j - 1);
  	            quicksort(ids, dists, i, right);
  	        }
  	    }
  	}

  	function swap(arr, i, j) {
  	    const tmp = arr[i];
  	    arr[i] = arr[j];
  	    arr[j] = tmp;
  	}

  	function defaultGetX(p) {
  	    return p[0];
  	}
  	function defaultGetY(p) {
  	    return p[1];
  	}

  	const epsilon = 1e-6;

  	class Path {
  	  constructor() {
  	    this._x0 = this._y0 = // start of current subpath
  	    this._x1 = this._y1 = null; // end of current subpath
  	    this._ = "";
  	  }
  	  moveTo(x, y) {
  	    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;
  	  }
  	  closePath() {
  	    if (this._x1 !== null) {
  	      this._x1 = this._x0, this._y1 = this._y0;
  	      this._ += "Z";
  	    }
  	  }
  	  lineTo(x, y) {
  	    this._ += `L${this._x1 = +x},${this._y1 = +y}`;
  	  }
  	  arc(x, y, r) {
  	    x = +x, y = +y, r = +r;
  	    const x0 = x + r;
  	    const y0 = y;
  	    if (r < 0) throw new Error("negative radius");
  	    if (this._x1 === null) this._ += `M${x0},${y0}`;
  	    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) this._ += "L" + x0 + "," + y0;
  	    if (!r) return;
  	    this._ += `A${r},${r},0,1,1,${x - r},${y}A${r},${r},0,1,1,${this._x1 = x0},${this._y1 = y0}`;
  	  }
  	  rect(x, y, w, h) {
  	    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w}v${+h}h${-w}Z`;
  	  }
  	  value() {
  	    return this._ || null;
  	  }
  	}

  	class Polygon {
  	  constructor() {
  	    this._ = [];
  	  }
  	  moveTo(x, y) {
  	    this._.push([x, y]);
  	  }
  	  closePath() {
  	    this._.push(this._[0].slice());
  	  }
  	  lineTo(x, y) {
  	    this._.push([x, y]);
  	  }
  	  value() {
  	    return this._.length ? this._ : null;
  	  }
  	}

  	class Voronoi {
  	  constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {
  	    if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error("invalid bounds");
  	    this.delaunay = delaunay;
  	    this._circumcenters = new Float64Array(delaunay.points.length * 2);
  	    this.vectors = new Float64Array(delaunay.points.length * 2);
  	    this.xmax = xmax, this.xmin = xmin;
  	    this.ymax = ymax, this.ymin = ymin;
  	    this._init();
  	  }
  	  update() {
  	    this.delaunay.update();
  	    this._init();
  	    return this;
  	  }
  	  _init() {
  	    const {delaunay: {points, hull, triangles}, vectors} = this;

  	    // Compute circumcenters.
  	    const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);
  	    for (let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2) {
  	      const t1 = triangles[i] * 2;
  	      const t2 = triangles[i + 1] * 2;
  	      const t3 = triangles[i + 2] * 2;
  	      const x1 = points[t1];
  	      const y1 = points[t1 + 1];
  	      const x2 = points[t2];
  	      const y2 = points[t2 + 1];
  	      const x3 = points[t3];
  	      const y3 = points[t3 + 1];

  	      const dx = x2 - x1;
  	      const dy = y2 - y1;
  	      const ex = x3 - x1;
  	      const ey = y3 - y1;
  	      const bl = dx * dx + dy * dy;
  	      const cl = ex * ex + ey * ey;
  	      const ab = (dx * ey - dy * ex) * 2;

  	      if (!ab) {
  	        // degenerate case (collinear diagram)
  	        x = (x1 + x3) / 2 - 1e8 * ey;
  	        y = (y1 + y3) / 2 + 1e8 * ex;
  	      }
  	      else if (Math.abs(ab) < 1e-8) {
  	        // almost equal points (degenerate triangle)
  	        x = (x1 + x3) / 2;
  	        y = (y1 + y3) / 2;
  	      } else {
  	        const d = 1 / ab;
  	        x = x1 + (ey * bl - dy * cl) * d;
  	        y = y1 + (dx * cl - ex * bl) * d;
  	      }
  	      circumcenters[j] = x;
  	      circumcenters[j + 1] = y;
  	    }

  	    // Compute exterior cell rays.
  	    let h = hull[hull.length - 1];
  	    let p0, p1 = h * 4;
  	    let x0, x1 = points[2 * h];
  	    let y0, y1 = points[2 * h + 1];
  	    vectors.fill(0);
  	    for (let i = 0; i < hull.length; ++i) {
  	      h = hull[i];
  	      p0 = p1, x0 = x1, y0 = y1;
  	      p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];
  	      vectors[p0 + 2] = vectors[p1] = y0 - y1;
  	      vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;
  	    }
  	  }
  	  render(context) {
  	    const buffer = context == null ? context = new Path : undefined;
  	    const {delaunay: {halfedges, inedges, hull}, circumcenters, vectors} = this;
  	    if (hull.length <= 1) return null;
  	    for (let i = 0, n = halfedges.length; i < n; ++i) {
  	      const j = halfedges[i];
  	      if (j < i) continue;
  	      const ti = Math.floor(i / 3) * 2;
  	      const tj = Math.floor(j / 3) * 2;
  	      const xi = circumcenters[ti];
  	      const yi = circumcenters[ti + 1];
  	      const xj = circumcenters[tj];
  	      const yj = circumcenters[tj + 1];
  	      this._renderSegment(xi, yi, xj, yj, context);
  	    }
  	    let h0, h1 = hull[hull.length - 1];
  	    for (let i = 0; i < hull.length; ++i) {
  	      h0 = h1, h1 = hull[i];
  	      const t = Math.floor(inedges[h1] / 3) * 2;
  	      const x = circumcenters[t];
  	      const y = circumcenters[t + 1];
  	      const v = h0 * 4;
  	      const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);
  	      if (p) this._renderSegment(x, y, p[0], p[1], context);
  	    }
  	    return buffer && buffer.value();
  	  }
  	  renderBounds(context) {
  	    const buffer = context == null ? context = new Path : undefined;
  	    context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);
  	    return buffer && buffer.value();
  	  }
  	  renderCell(i, context) {
  	    const buffer = context == null ? context = new Path : undefined;
  	    const points = this._clip(i);
  	    if (points === null || !points.length) return;
  	    context.moveTo(points[0], points[1]);
  	    let n = points.length;
  	    while (points[0] === points[n-2] && points[1] === points[n-1] && n > 1) n -= 2;
  	    for (let i = 2; i < n; i += 2) {
  	      if (points[i] !== points[i-2] || points[i+1] !== points[i-1])
  	        context.lineTo(points[i], points[i + 1]);
  	    }
  	    context.closePath();
  	    return buffer && buffer.value();
  	  }
  	  *cellPolygons() {
  	    const {delaunay: {points}} = this;
  	    for (let i = 0, n = points.length / 2; i < n; ++i) {
  	      const cell = this.cellPolygon(i);
  	      if (cell) cell.index = i, yield cell;
  	    }
  	  }
  	  cellPolygon(i) {
  	    const polygon = new Polygon;
  	    this.renderCell(i, polygon);
  	    return polygon.value();
  	  }
  	  _renderSegment(x0, y0, x1, y1, context) {
  	    let S;
  	    const c0 = this._regioncode(x0, y0);
  	    const c1 = this._regioncode(x1, y1);
  	    if (c0 === 0 && c1 === 0) {
  	      context.moveTo(x0, y0);
  	      context.lineTo(x1, y1);
  	    } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {
  	      context.moveTo(S[0], S[1]);
  	      context.lineTo(S[2], S[3]);
  	    }
  	  }
  	  contains(i, x, y) {
  	    if ((x = +x, x !== x) || (y = +y, y !== y)) return false;
  	    return this.delaunay._step(i, x, y) === i;
  	  }
  	  *neighbors(i) {
  	    const ci = this._clip(i);
  	    if (ci) for (const j of this.delaunay.neighbors(i)) {
  	      const cj = this._clip(j);
  	      // find the common edge
  	      if (cj) loop: for (let ai = 0, li = ci.length; ai < li; ai += 2) {
  	        for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {
  	          if (ci[ai] == cj[aj]
  	          && ci[ai + 1] == cj[aj + 1]
  	          && ci[(ai + 2) % li] == cj[(aj + lj - 2) % lj]
  	          && ci[(ai + 3) % li] == cj[(aj + lj - 1) % lj]
  	          ) {
  	            yield j;
  	            break loop;
  	          }
  	        }
  	      }
  	    }
  	  }
  	  _cell(i) {
  	    const {circumcenters, delaunay: {inedges, halfedges, triangles}} = this;
  	    const e0 = inedges[i];
  	    if (e0 === -1) return null; // coincident point
  	    const points = [];
  	    let e = e0;
  	    do {
  	      const t = Math.floor(e / 3);
  	      points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);
  	      e = e % 3 === 2 ? e - 2 : e + 1;
  	      if (triangles[e] !== i) break; // bad triangulation
  	      e = halfedges[e];
  	    } while (e !== e0 && e !== -1);
  	    return points;
  	  }
  	  _clip(i) {
  	    // degenerate case (1 valid point: return the box)
  	    if (i === 0 && this.delaunay.hull.length === 1) {
  	      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
  	    }
  	    const points = this._cell(i);
  	    if (points === null) return null;
  	    const {vectors: V} = this;
  	    const v = i * 4;
  	    return V[v] || V[v + 1]
  	        ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3])
  	        : this._clipFinite(i, points);
  	  }
  	  _clipFinite(i, points) {
  	    const n = points.length;
  	    let P = null;
  	    let x0, y0, x1 = points[n - 2], y1 = points[n - 1];
  	    let c0, c1 = this._regioncode(x1, y1);
  	    let e0, e1;
  	    for (let j = 0; j < n; j += 2) {
  	      x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];
  	      c0 = c1, c1 = this._regioncode(x1, y1);
  	      if (c0 === 0 && c1 === 0) {
  	        e0 = e1, e1 = 0;
  	        if (P) P.push(x1, y1);
  	        else P = [x1, y1];
  	      } else {
  	        let S, sx0, sy0, sx1, sy1;
  	        if (c0 === 0) {
  	          if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;
  	          [sx0, sy0, sx1, sy1] = S;
  	        } else {
  	          if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;
  	          [sx1, sy1, sx0, sy0] = S;
  	          e0 = e1, e1 = this._edgecode(sx0, sy0);
  	          if (e0 && e1) this._edge(i, e0, e1, P, P.length);
  	          if (P) P.push(sx0, sy0);
  	          else P = [sx0, sy0];
  	        }
  	        e0 = e1, e1 = this._edgecode(sx1, sy1);
  	        if (e0 && e1) this._edge(i, e0, e1, P, P.length);
  	        if (P) P.push(sx1, sy1);
  	        else P = [sx1, sy1];
  	      }
  	    }
  	    if (P) {
  	      e0 = e1, e1 = this._edgecode(P[0], P[1]);
  	      if (e0 && e1) this._edge(i, e0, e1, P, P.length);
  	    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
  	      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
  	    }
  	    return P;
  	  }
  	  _clipSegment(x0, y0, x1, y1, c0, c1) {
  	    while (true) {
  	      if (c0 === 0 && c1 === 0) return [x0, y0, x1, y1];
  	      if (c0 & c1) return null;
  	      let x, y, c = c0 || c1;
  	      if (c & 0b1000) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;
  	      else if (c & 0b0100) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;
  	      else if (c & 0b0010) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;
  	      else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;
  	      if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);
  	      else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);
  	    }
  	  }
  	  _clipInfinite(i, points, vx0, vy0, vxn, vyn) {
  	    let P = Array.from(points), p;
  	    if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);
  	    if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);
  	    if (P = this._clipFinite(i, P)) {
  	      for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {
  	        c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);
  	        if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;
  	      }
  	    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
  	      P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];
  	    }
  	    return P;
  	  }
  	  _edge(i, e0, e1, P, j) {
  	    while (e0 !== e1) {
  	      let x, y;
  	      switch (e0) {
  	        case 0b0101: e0 = 0b0100; continue; // top-left
  	        case 0b0100: e0 = 0b0110, x = this.xmax, y = this.ymin; break; // top
  	        case 0b0110: e0 = 0b0010; continue; // top-right
  	        case 0b0010: e0 = 0b1010, x = this.xmax, y = this.ymax; break; // right
  	        case 0b1010: e0 = 0b1000; continue; // bottom-right
  	        case 0b1000: e0 = 0b1001, x = this.xmin, y = this.ymax; break; // bottom
  	        case 0b1001: e0 = 0b0001; continue; // bottom-left
  	        case 0b0001: e0 = 0b0101, x = this.xmin, y = this.ymin; break; // left
  	      }
  	      if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {
  	        P.splice(j, 0, x, y), j += 2;
  	      }
  	    }
  	    if (P.length > 4) {
  	      for (let i = 0; i < P.length; i+= 2) {
  	        const j = (i + 2) % P.length, k = (i + 4) % P.length;
  	        if (P[i] === P[j] && P[j] === P[k]
  	        || P[i + 1] === P[j + 1] && P[j + 1] === P[k + 1])
  	          P.splice(j, 2), i -= 2;
  	      }
  	    }
  	    return j;
  	  }
  	  _project(x0, y0, vx, vy) {
  	    let t = Infinity, c, x, y;
  	    if (vy < 0) { // top
  	      if (y0 <= this.ymin) return null;
  	      if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;
  	    } else if (vy > 0) { // bottom
  	      if (y0 >= this.ymax) return null;
  	      if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;
  	    }
  	    if (vx > 0) { // right
  	      if (x0 >= this.xmax) return null;
  	      if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;
  	    } else if (vx < 0) { // left
  	      if (x0 <= this.xmin) return null;
  	      if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;
  	    }
  	    return [x, y];
  	  }
  	  _edgecode(x, y) {
  	    return (x === this.xmin ? 0b0001
  	        : x === this.xmax ? 0b0010 : 0b0000)
  	        | (y === this.ymin ? 0b0100
  	        : y === this.ymax ? 0b1000 : 0b0000);
  	  }
  	  _regioncode(x, y) {
  	    return (x < this.xmin ? 0b0001
  	        : x > this.xmax ? 0b0010 : 0b0000)
  	        | (y < this.ymin ? 0b0100
  	        : y > this.ymax ? 0b1000 : 0b0000);
  	  }
  	}

  	const tau = 2 * Math.PI, pow = Math.pow;

  	function pointX(p) {
  	  return p[0];
  	}

  	function pointY(p) {
  	  return p[1];
  	}

  	// A triangulation is collinear if all its triangles have a non-null area
  	function collinear(d) {
  	  const {triangles, coords} = d;
  	  for (let i = 0; i < triangles.length; i += 3) {
  	    const a = 2 * triangles[i],
  	          b = 2 * triangles[i + 1],
  	          c = 2 * triangles[i + 2],
  	          cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1])
  	                - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);
  	    if (cross > 1e-10) return false;
  	  }
  	  return true;
  	}

  	function jitter(x, y, r) {
  	  return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r];
  	}

  	class Delaunay {
  	  static from(points, fx = pointX, fy = pointY, that) {
  	    return new Delaunay("length" in points
  	        ? flatArray(points, fx, fy, that)
  	        : Float64Array.from(flatIterable(points, fx, fy, that)));
  	  }
  	  constructor(points) {
  	    this._delaunator = new Delaunator(points);
  	    this.inedges = new Int32Array(points.length / 2);
  	    this._hullIndex = new Int32Array(points.length / 2);
  	    this.points = this._delaunator.coords;
  	    this._init();
  	  }
  	  update() {
  	    this._delaunator.update();
  	    this._init();
  	    return this;
  	  }
  	  _init() {
  	    const d = this._delaunator, points = this.points;

  	    // check for collinear
  	    if (d.hull && d.hull.length > 2 && collinear(d)) {
  	      this.collinear = Int32Array.from({length: points.length/2}, (_,i) => i)
  	        .sort((i, j) => points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]); // for exact neighbors
  	      const e = this.collinear[0], f = this.collinear[this.collinear.length - 1],
  	        bounds = [ points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1] ],
  	        r = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);
  	      for (let i = 0, n = points.length / 2; i < n; ++i) {
  	        const p = jitter(points[2 * i], points[2 * i + 1], r);
  	        points[2 * i] = p[0];
  	        points[2 * i + 1] = p[1];
  	      }
  	      this._delaunator = new Delaunator(points);
  	    } else {
  	      delete this.collinear;
  	    }

  	    const halfedges = this.halfedges = this._delaunator.halfedges;
  	    const hull = this.hull = this._delaunator.hull;
  	    const triangles = this.triangles = this._delaunator.triangles;
  	    const inedges = this.inedges.fill(-1);
  	    const hullIndex = this._hullIndex.fill(-1);

  	    // Compute an index from each point to an (arbitrary) incoming halfedge
  	    // Used to give the first neighbor of each point; for this reason,
  	    // on the hull we give priority to exterior halfedges
  	    for (let e = 0, n = halfedges.length; e < n; ++e) {
  	      const p = triangles[e % 3 === 2 ? e - 2 : e + 1];
  	      if (halfedges[e] === -1 || inedges[p] === -1) inedges[p] = e;
  	    }
  	    for (let i = 0, n = hull.length; i < n; ++i) {
  	      hullIndex[hull[i]] = i;
  	    }

  	    // degenerate case: 1 or 2 (distinct) points
  	    if (hull.length <= 2 && hull.length > 0) {
  	      this.triangles = new Int32Array(3).fill(-1);
  	      this.halfedges = new Int32Array(3).fill(-1);
  	      this.triangles[0] = hull[0];
  	      this.triangles[1] = hull[1];
  	      this.triangles[2] = hull[1];
  	      inedges[hull[0]] = 1;
  	      if (hull.length === 2) inedges[hull[1]] = 0;
  	    }
  	  }
  	  voronoi(bounds) {
  	    return new Voronoi(this, bounds);
  	  }
  	  *neighbors(i) {
  	    const {inedges, hull, _hullIndex, halfedges, triangles, collinear} = this;

  	    // degenerate case with several collinear points
  	    if (collinear) {
  	      const l = collinear.indexOf(i);
  	      if (l > 0) yield collinear[l - 1];
  	      if (l < collinear.length - 1) yield collinear[l + 1];
  	      return;
  	    }

  	    const e0 = inedges[i];
  	    if (e0 === -1) return; // coincident point
  	    let e = e0, p0 = -1;
  	    do {
  	      yield p0 = triangles[e];
  	      e = e % 3 === 2 ? e - 2 : e + 1;
  	      if (triangles[e] !== i) return; // bad triangulation
  	      e = halfedges[e];
  	      if (e === -1) {
  	        const p = hull[(_hullIndex[i] + 1) % hull.length];
  	        if (p !== p0) yield p;
  	        return;
  	      }
  	    } while (e !== e0);
  	  }
  	  find(x, y, i = 0) {
  	    if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;
  	    const i0 = i;
  	    let c;
  	    while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0) i = c;
  	    return c;
  	  }
  	  _step(i, x, y) {
  	    const {inedges, hull, _hullIndex, halfedges, triangles, points} = this;
  	    if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);
  	    let c = i;
  	    let dc = pow(x - points[i * 2], 2) + pow(y - points[i * 2 + 1], 2);
  	    const e0 = inedges[i];
  	    let e = e0;
  	    do {
  	      let t = triangles[e];
  	      const dt = pow(x - points[t * 2], 2) + pow(y - points[t * 2 + 1], 2);
  	      if (dt < dc) dc = dt, c = t;
  	      e = e % 3 === 2 ? e - 2 : e + 1;
  	      if (triangles[e] !== i) break; // bad triangulation
  	      e = halfedges[e];
  	      if (e === -1) {
  	        e = hull[(_hullIndex[i] + 1) % hull.length];
  	        if (e !== t) {
  	          if (pow(x - points[e * 2], 2) + pow(y - points[e * 2 + 1], 2) < dc) return e;
  	        }
  	        break;
  	      }
  	    } while (e !== e0);
  	    return c;
  	  }
  	  render(context) {
  	    const buffer = context == null ? context = new Path : undefined;
  	    const {points, halfedges, triangles} = this;
  	    for (let i = 0, n = halfedges.length; i < n; ++i) {
  	      const j = halfedges[i];
  	      if (j < i) continue;
  	      const ti = triangles[i] * 2;
  	      const tj = triangles[j] * 2;
  	      context.moveTo(points[ti], points[ti + 1]);
  	      context.lineTo(points[tj], points[tj + 1]);
  	    }
  	    this.renderHull(context);
  	    return buffer && buffer.value();
  	  }
  	  renderPoints(context, r = 2) {
  	    const buffer = context == null ? context = new Path : undefined;
  	    const {points} = this;
  	    for (let i = 0, n = points.length; i < n; i += 2) {
  	      const x = points[i], y = points[i + 1];
  	      context.moveTo(x + r, y);
  	      context.arc(x, y, r, 0, tau);
  	    }
  	    return buffer && buffer.value();
  	  }
  	  renderHull(context) {
  	    const buffer = context == null ? context = new Path : undefined;
  	    const {hull, points} = this;
  	    const h = hull[0] * 2, n = hull.length;
  	    context.moveTo(points[h], points[h + 1]);
  	    for (let i = 1; i < n; ++i) {
  	      const h = 2 * hull[i];
  	      context.lineTo(points[h], points[h + 1]);
  	    }
  	    context.closePath();
  	    return buffer && buffer.value();
  	  }
  	  hullPolygon() {
  	    const polygon = new Polygon;
  	    this.renderHull(polygon);
  	    return polygon.value();
  	  }
  	  renderTriangle(i, context) {
  	    const buffer = context == null ? context = new Path : undefined;
  	    const {points, triangles} = this;
  	    const t0 = triangles[i *= 3] * 2;
  	    const t1 = triangles[i + 1] * 2;
  	    const t2 = triangles[i + 2] * 2;
  	    context.moveTo(points[t0], points[t0 + 1]);
  	    context.lineTo(points[t1], points[t1 + 1]);
  	    context.lineTo(points[t2], points[t2 + 1]);
  	    context.closePath();
  	    return buffer && buffer.value();
  	  }
  	  *trianglePolygons() {
  	    const {triangles} = this;
  	    for (let i = 0, n = triangles.length / 3; i < n; ++i) {
  	      yield this.trianglePolygon(i);
  	    }
  	  }
  	  trianglePolygon(i) {
  	    const polygon = new Polygon;
  	    this.renderTriangle(i, polygon);
  	    return polygon.value();
  	  }
  	}

  	function flatArray(points, fx, fy, that) {
  	  const n = points.length;
  	  const array = new Float64Array(n * 2);
  	  for (let i = 0; i < n; ++i) {
  	    const p = points[i];
  	    array[i * 2] = fx.call(that, p, i, points);
  	    array[i * 2 + 1] = fy.call(that, p, i, points);
  	  }
  	  return array;
  	}

  	function* flatIterable(points, fx, fy, that) {
  	  let i = 0;
  	  for (const p of points) {
  	    yield fx.call(that, p, i, points);
  	    yield fy.call(that, p, i, points);
  	    ++i;
  	  }
  	}

  	exports.Delaunay = Delaunay;
  	exports.Voronoi = Voronoi;

  	Object.defineProperty(exports, '__esModule', { value: true });

  	}));
  } (d3Delaunay, d3Delaunay.exports));

  (function (exports) {

  	var _interopRequireDefault = interopRequireDefault.exports["default"];

  	exports.__esModule = true;
  	exports["default"] = Voronoi;

  	var _react = _interopRequireDefault(React__default["default"]);

  	var _d3Delaunay = d3Delaunay.exports;

  	var _Utils = Utils;

  	var _chartContext = _interopRequireDefault(chartContext);

  	var _d3Shape = d3Shape.exports;

  	var _Bar = Bar;

  	function Voronoi() {
  	  var _useChartContext = (0, _chartContext["default"])(),
  	      getOptions = _useChartContext.getOptions,
  	      focusedDatumState = _useChartContext.focusedDatumState,
  	      isInteractingState = _useChartContext.isInteractingState;

  	  var setFocusedDatum = focusedDatumState[1];
  	  var isInteracting = isInteractingState[0];

  	  var _getOptions = getOptions(),
  	      onFocusDatum = _getOptions.onFocusDatum,
  	      onClickDatum = _getOptions.onClickDatum,
  	      tooltip = _getOptions.tooltip,
  	      primaryCursor = _getOptions.primaryCursor,
  	      secondaryCursor = _getOptions.secondaryCursor,
  	      showVoronoi = _getOptions.showVoronoi,
  	      interactionMode = _getOptions.interactionMode;

  	  var handleFocus = _react["default"].useCallback(function (datum) {
  	    var _getOptions$onFocusDa, _getOptions2;

  	    (_getOptions$onFocusDa = (_getOptions2 = getOptions()).onFocusDatum) == null ? void 0 : _getOptions$onFocusDa.call(_getOptions2, datum);
  	    setFocusedDatum(datum);
  	  }, [getOptions, setFocusedDatum]);

  	  var needsVoronoi = isInteracting && (showVoronoi || onFocusDatum || onClickDatum || tooltip || primaryCursor || secondaryCursor);

  	  if (!needsVoronoi) {
  	    return null;
  	  }

  	  var props = {
  	    handleFocus: handleFocus
  	  };

  	  if (interactionMode === 'closest') {
  	    return /*#__PURE__*/_react["default"].createElement(SingleVoronoi, props);
  	  }

  	  return /*#__PURE__*/_react["default"].createElement(PrimaryVoronoi, props);
  	}

  	function PrimaryVoronoi(_ref) {
  	  var handleFocus = _ref.handleFocus;

  	  var _useChartContext2 = (0, _chartContext["default"])(),
  	      primaryAxis = _useChartContext2.primaryAxis,
  	      secondaryAxes = _useChartContext2.secondaryAxes,
  	      getOptions = _useChartContext2.getOptions,
  	      gridDimensions = _useChartContext2.gridDimensions,
  	      datumsByInteractionGroup = _useChartContext2.datumsByInteractionGroup;

  	  var stackedVoronoi = secondaryAxes.length === 1 && secondaryAxes[0].stacked;
  	  var useBarPx = secondaryAxes.every(function (d) {
  	    return d.elementType === 'bar' && !d.stacked;
  	  });
  	  return _react["default"].useMemo(function () {
  	    var preColumns = Array.from(datumsByInteractionGroup.entries()).map(function (_ref2) {
  	      _ref2[0];
  	          var datums = _ref2[1];
  	      return datums;
  	    }).filter(function (datums) {
  	      var datum = datums[0];

  	      if (!datum) {
  	        return;
  	      }

  	      var primaryValue = datum.primaryValue;
  	      return primaryValue !== 'undefined' && primaryValue !== null;
  	    }).sort(function (a, b) {
  	      var aAxis = secondaryAxes.find(function (d) {
  	        return d.id === a[0].secondaryAxisId;
  	      });
  	      var bAxis = secondaryAxes.find(function (d) {
  	        return d.id === b[0].secondaryAxisId;
  	      });
  	      var aPx = getPrimary(a[0], primaryAxis, aAxis, useBarPx);
  	      var bPx = getPrimary(b[0], primaryAxis, bAxis, useBarPx);
  	      return aPx - bPx;
  	    });

  	    if (primaryAxis.isVertical) {
  	      preColumns.reverse();
  	    }

  	    var columns = preColumns.map(function (datums, i, all) {
  	      var _primaryAxis$scale$ra;

  	      var datum = datums[0];
  	      var prev = all[i - 1];
  	      var next = all[i + 1];
  	      var secondaryAxis = secondaryAxes.find(function (d) {
  	        return d.id === datum.secondaryAxisId;
  	      });
  	      var primaryPx = getPrimary(datum, primaryAxis, secondaryAxis, useBarPx);
  	      var range = (_primaryAxis$scale$ra = primaryAxis == null ? void 0 : primaryAxis.scale.range()) != null ? _primaryAxis$scale$ra : [0, 0];
  	      var primaryStart = range[0],
  	          primaryEnd = range[1];

  	      if (prev) {
  	        var _secondaryAxis = secondaryAxes.find(function (d) {
  	          return d.id === prev[0].secondaryAxisId;
  	        });

  	        var prevPx = getPrimary(prev[0], primaryAxis, _secondaryAxis, useBarPx);
  	        primaryStart = primaryPx - (primaryPx - prevPx) / 2;
  	      }

  	      if (next) {
  	        var _secondaryAxis2 = secondaryAxes.find(function (d) {
  	          return d.id === next[0].secondaryAxisId;
  	        });

  	        var nextPx = getPrimary(next[0], primaryAxis, _secondaryAxis2, useBarPx);
  	        primaryEnd = primaryPx + (nextPx - primaryPx) / 2;
  	      }

  	      return {
  	        primaryStart: primaryStart,
  	        primaryEnd: primaryEnd,
  	        primaryPx: primaryPx,
  	        datumBoundaries: datums.filter(function (datum) {
  	          var secondaryValue = datum.secondaryValue;
  	          return typeof secondaryValue !== 'undefined' && secondaryValue !== null;
  	        }).map(function (datum, i, all) {
  	          var _secondaryAxis$scale3, _datum$stackData3, _secondaryAxis$scale$2;

  	          var prev = all[i - 1];
  	          var next = all[i + 1];
  	          var secondaryAxis = secondaryAxes.find(function (d) {
  	            return d.id === datum.secondaryAxisId;
  	          });

  	          if (stackedVoronoi) {
  	            var _secondaryAxis$scale$, _datum$stackData, _datum$stackData2;

  	            var _range = (_secondaryAxis$scale$ = secondaryAxis == null ? void 0 : secondaryAxis.scale.range()) != null ? _secondaryAxis$scale$ : [0, 0];

  	            var stackData = [(_datum$stackData = datum.stackData) == null ? void 0 : _datum$stackData[0], (_datum$stackData2 = datum.stackData) == null ? void 0 : _datum$stackData2[1]];

  	            if (secondaryAxis != null && secondaryAxis.isVertical) {
  	              _range.reverse();

  	              stackData.reverse();
  	            }

  	            var _secondaryStart = _range[0],
  	                _secondaryEnd = _range[1];

  	            if (prev) {
  	              var _secondaryAxis$scale, _stackData$;

  	              _secondaryStart = (_secondaryAxis$scale = secondaryAxis == null ? void 0 : secondaryAxis.scale((_stackData$ = stackData[0]) != null ? _stackData$ : NaN)) != null ? _secondaryAxis$scale : NaN;
  	            }

  	            if (next) {
  	              var _secondaryAxis$scale2, _stackData$2;

  	              _secondaryEnd = (_secondaryAxis$scale2 = secondaryAxis == null ? void 0 : secondaryAxis.scale((_stackData$2 = stackData[1]) != null ? _stackData$2 : NaN)) != null ? _secondaryAxis$scale2 : NaN;
  	            }

  	            return {
  	              secondaryStart: _secondaryStart,
  	              secondaryEnd: _secondaryEnd,
  	              datum: datum
  	            };
  	          }

  	          var value = (_secondaryAxis$scale3 = secondaryAxis == null ? void 0 : secondaryAxis.scale(secondaryAxis.stacked ? (_datum$stackData3 = datum.stackData) == null ? void 0 : _datum$stackData3[1] : datum.secondaryValue)) != null ? _secondaryAxis$scale3 : NaN;
  	          var range = (_secondaryAxis$scale$2 = secondaryAxis == null ? void 0 : secondaryAxis.scale.range()) != null ? _secondaryAxis$scale$2 : [0, 0];

  	          if (secondaryAxis != null && secondaryAxis.isVertical) {
  	            range.reverse();
  	          }

  	          var secondaryStart = range[0],
  	              secondaryEnd = range[1];

  	          if (prev) {
  	            var _prevAxis$scale, _prev$stackData;

  	            var prevAxis = secondaryAxes.find(function (d) {
  	              return d.id === (prev == null ? void 0 : prev.secondaryAxisId);
  	            });
  	            var prevValue = (_prevAxis$scale = prevAxis == null ? void 0 : prevAxis.scale(prevAxis.stacked ? (_prev$stackData = prev.stackData) == null ? void 0 : _prev$stackData[1] : prev.secondaryValue)) != null ? _prevAxis$scale : NaN;
  	            secondaryStart = value - (value - prevValue) / 2;
  	          }

  	          if (next) {
  	            var _nextAxis$scale, _next$stackData;

  	            var nextAxis = secondaryAxes.find(function (d) {
  	              return d.id === (next == null ? void 0 : next.secondaryAxisId);
  	            });
  	            var nextValue = (_nextAxis$scale = nextAxis == null ? void 0 : nextAxis.scale(nextAxis.stacked ? (_next$stackData = next.stackData) == null ? void 0 : _next$stackData[1] : next.secondaryValue)) != null ? _nextAxis$scale : NaN;
  	            secondaryEnd = value + (nextValue - value) / 2;
  	          }

  	          return {
  	            secondaryStart: secondaryStart,
  	            secondaryEnd: secondaryEnd,
  	            datum: datum
  	          };
  	        })
  	      };
  	    });
  	    return /*#__PURE__*/_react["default"].createElement("g", {
  	      onMouseLeave: function onMouseLeave() {
  	        return handleFocus(null);
  	      },
  	      style: {
  	        transform: (0, _Utils.translate)(gridDimensions.left, gridDimensions.top)
  	      }
  	    }, columns.map(function (column, i) {
  	      return /*#__PURE__*/_react["default"].createElement("g", {
  	        key: column.primaryPx + "_" + i
  	      }, column.datumBoundaries.map(function (datumBoundary, i) {
  	        var x1 = !primaryAxis.isVertical ? column.primaryStart : datumBoundary.secondaryStart;
  	        var x2 = !primaryAxis.isVertical ? column.primaryEnd : datumBoundary.secondaryEnd;
  	        var y1 = !primaryAxis.isVertical ? datumBoundary.secondaryStart : column.primaryStart;
  	        var y2 = !primaryAxis.isVertical ? datumBoundary.secondaryEnd : column.primaryEnd;
  	        var x = Math.min(x1, x2);
  	        var y = Math.min(y1, y2);
  	        var xEnd = Math.max(x1, x2);
  	        var yEnd = Math.max(y1, y2);
  	        var height = Math.max(yEnd - y, 0);
  	        var width = Math.max(xEnd - x, 0);
  	        return /*#__PURE__*/_react["default"].createElement("rect", {
  	          key: i,
  	          x: x,
  	          y: y,
  	          width: width,
  	          height: height,
  	          className: 'action-voronoi',
  	          onMouseEnter: function onMouseEnter() {
  	            return handleFocus(datumBoundary.datum);
  	          },
  	          style: {
  	            fill: getOptions().dark ? '#ffffff33' : 'rgba(0,0,0,0.2)',
  	            strokeWidth: 1,
  	            stroke: getOptions().dark ? 'white' : 'black',
  	            opacity: getOptions().showVoronoi ? 1 : 0
  	          }
  	        });
  	      }));
  	    }));
  	  }, [datumsByInteractionGroup, primaryAxis, gridDimensions.left, gridDimensions.top, secondaryAxes, useBarPx, stackedVoronoi, handleFocus, getOptions]);
  	}

  	var delaunayLineFn = (0, _d3Shape.line)();

  	function SingleVoronoi(_ref3) {
  	  var handleFocus = _ref3.handleFocus;

  	  var _useChartContext3 = (0, _chartContext["default"])(),
  	      primaryAxis = _useChartContext3.primaryAxis,
  	      series = _useChartContext3.series,
  	      secondaryAxes = _useChartContext3.secondaryAxes,
  	      getOptions = _useChartContext3.getOptions,
  	      gridDimensions = _useChartContext3.gridDimensions;

  	  var polygons = null;
  	  var voronoiData = [];
  	  var useBarPx = secondaryAxes.every(function (d) {
  	    return d.elementType === 'bar' && !d.stacked;
  	  });
  	  series.forEach(function (serie) {
  	    serie.datums.filter(function (datum) {
  	      var primaryValue = datum.primaryValue;
  	      var secondaryValue = datum.secondaryValue;
  	      return primaryValue !== 'undefined' && primaryValue !== null && secondaryValue !== 'undefined' && secondaryValue !== null;
  	    }).forEach(function (datum) {
  	      var secondaryAxis = secondaryAxes.find(function (d) {
  	        return d.id === datum.secondaryAxisId;
  	      });
  	      var x = getX(datum, primaryAxis, secondaryAxis, useBarPx);
  	      var y = getY(datum, primaryAxis, secondaryAxis, useBarPx);

  	      if (typeof x !== 'number' || typeof y !== 'number' || Number.isNaN(y) || Number.isNaN(x)) {
  	        return;
  	      }

  	      voronoiData.push({
  	        x: x,
  	        y: y,
  	        datum: datum
  	      });
  	    });
  	  });

  	  var delaunay = _d3Delaunay.Delaunay.from(voronoiData, function (d) {
  	    return Math.max(d.x, 0);
  	  }, function (d) {
  	    return Math.max(d.y, 0);
  	  });

  	  var voronoi = delaunay.voronoi([0, 0, gridDimensions.width, gridDimensions.height]);
  	  polygons = voronoi.cellPolygons();
  	  polygons = Array.from(polygons);
  	  return /*#__PURE__*/_react["default"].createElement("g", {
  	    onMouseLeave: function onMouseLeave() {
  	      return handleFocus(null);
  	    },
  	    style: {
  	      transform: (0, _Utils.translate)(gridDimensions.left, gridDimensions.top)
  	    }
  	  }, polygons.map(function (points, i) {
  	    var index = points.index;
  	    var datum = voronoiData[index].datum;
  	    var path = delaunayLineFn(points) || undefined;
  	    return /*#__PURE__*/_react["default"].createElement("path", {
  	      key: i,
  	      d: path,
  	      className: 'action-voronoi',
  	      onMouseEnter: function onMouseEnter() {
  	        return handleFocus(datum);
  	      },
  	      style: {
  	        fill: getOptions().dark ? '#ffffff33' : 'rgba(0,0,0,0.2)',
  	        strokeWidth: 1,
  	        stroke: getOptions().dark ? 'white' : 'black',
  	        opacity: getOptions().showVoronoi ? 1 : 0
  	      }
  	    });
  	  }));
  	}

  	function getX(datum, primaryAxis, secondaryAxis, useBarPx) {
  	  return primaryAxis.isVertical ? getSecondary(datum, secondaryAxis) : getPrimary(datum, primaryAxis, secondaryAxis, useBarPx);
  	}

  	function getY(datum, primaryAxis, secondaryAxis, useBarPx) {
  	  return primaryAxis.isVertical ? getPrimary(datum, primaryAxis, secondaryAxis, useBarPx) : getSecondary(datum, secondaryAxis);
  	}

  	function getPrimary(datum, primaryAxis, secondaryAxis, useBarPx) {
  	  var _primaryAxis$scale;

  	  var primary = (_primaryAxis$scale = primaryAxis.scale(datum.primaryValue)) != null ? _primaryAxis$scale : NaN;

  	  if (useBarPx && secondaryAxis.elementType === 'bar') {
  	    if (!secondaryAxis.stacked) {
  	      var _ref4;

  	      primary += (_ref4 = primaryAxis.seriesBandScale(datum.seriesIndex)) != null ? _ref4 : NaN;
  	      primary += (0, _Bar.getPrimaryLength)(datum, primaryAxis, secondaryAxis) / 2;
  	    } else {
  	      primary += (0, _Bar.getPrimaryGroupLength)(datum, primaryAxis) / 2;
  	    }
  	  }

  	  return primary;
  	}

  	function getSecondary(datum, secondaryAxis) {
  	  var _secondaryAxis$scale5;

  	  if (secondaryAxis.stacked) {
  	    var _secondaryAxis$scale4, _datum$stackData$, _datum$stackData4;

  	    return (_secondaryAxis$scale4 = secondaryAxis.scale((_datum$stackData$ = (_datum$stackData4 = datum.stackData) == null ? void 0 : _datum$stackData4[1]) != null ? _datum$stackData$ : NaN)) != null ? _secondaryAxis$scale4 : NaN;
  	  }

  	  return (_secondaryAxis$scale5 = secondaryAxis.scale(datum.secondaryValue)) != null ? _secondaryAxis$scale5 : NaN;
  	}
  } (Voronoi));

  var _interopRequireDefault$4 = interopRequireDefault.exports["default"];

  var _interopRequireWildcard$4 = interopRequireWildcard.exports["default"];

  Chart$1.__esModule = true;
  Chart$1.Chart = Chart;

  var _createForOfIteratorHelperLoose2 = _interopRequireDefault$4(createForOfIteratorHelperLoose.exports);

  var _objectWithoutPropertiesLoose2 = _interopRequireDefault$4(objectWithoutPropertiesLoose.exports);

  var _extends2 = _interopRequireDefault$4(_extends$2.exports);

  var _d3Array = d3Array.exports;

  var _react$1 = _interopRequireDefault$4(React__default["default"]);

  var _useGetLatest = _interopRequireDefault$4(useGetLatest);

  var _useIsomorphicLayoutEffect = _interopRequireDefault$4(useIsomorphicLayoutEffect);

  var _Bar = _interopRequireWildcard$4(Bar);

  var _Line = _interopRequireDefault$4(Line);

  var _Utils = Utils;

  var _buildAxis = _interopRequireDefault$4(buildAxis_linear);

  var _chartContext = chartContext;

  var _AxisLinear = _interopRequireDefault$4(AxisLinear);

  var _Cursors = _interopRequireDefault$4(Cursors);

  var _Tooltip = _interopRequireWildcard$4(Tooltip);

  var _Voronoi = _interopRequireDefault$4(Voronoi);

  var _excluded$2 = ["options", "className", "style"];
  //
  //
  var defaultColorScheme = ['#0f83ab', '#faa43a', '#fd6868', '#53cfc9', '#a2d925', '#decf3f', '#734fe9', '#cd82ad', '#006d92', '#de7c00', '#f33232', '#3f9a80', '#53c200', '#d7af00', '#4c26c9', '#d44d99'];
  var defaultPadding = 5;

  function defaultChartOptions(options) {
    var _options$initialWidth, _options$initialHeigh, _options$getSeriesOrd, _options$interactionM, _options$showVoronoi, _options$defaultColor, _options$useIntersect, _options$intersection, _options$primaryCurso, _options$secondaryCur, _options$padding;

    return (0, _extends2["default"])({}, options, {
      initialWidth: (_options$initialWidth = options.initialWidth) != null ? _options$initialWidth : 300,
      initialHeight: (_options$initialHeigh = options.initialHeight) != null ? _options$initialHeigh : 200,
      getSeriesOrder: (_options$getSeriesOrd = options.getSeriesOrder) != null ? _options$getSeriesOrd : function (series) {
        return series;
      },
      interactionMode: (_options$interactionM = options.interactionMode) != null ? _options$interactionM : 'primary',
      showVoronoi: (_options$showVoronoi = options.showVoronoi) != null ? _options$showVoronoi : false,
      defaultColors: (_options$defaultColor = options.defaultColors) != null ? _options$defaultColor : defaultColorScheme,
      useIntersectionObserver: (_options$useIntersect = options.useIntersectionObserver) != null ? _options$useIntersect : false,
      intersectionObserverRootMargin: (_options$intersection = options.intersectionObserverRootMargin) != null ? _options$intersection : '1000px',
      primaryCursor: (_options$primaryCurso = options.primaryCursor) != null ? _options$primaryCurso : true,
      secondaryCursor: (_options$secondaryCur = options.secondaryCursor) != null ? _options$secondaryCur : true,
      padding: (_options$padding = options.padding) != null ? _options$padding : defaultPadding
    });
  }

  function Chart(_ref) {
    var userOptions = _ref.options,
        className = _ref.className,
        _ref$style = _ref.style,
        style = _ref$style === void 0 ? {} : _ref$style,
        rest = (0, _objectWithoutPropertiesLoose2["default"])(_ref, _excluded$2);
    var options = defaultChartOptions(userOptions);

    var _React$useState = _react$1["default"].useState(null),
        chartElement = _React$useState[0],
        setContainerElement = _React$useState[1];

    var containerEl = chartElement == null ? void 0 : chartElement.parentElement;

    var nearestScrollableParent = _react$1["default"].useMemo(function () {
      var run = function run(el) {
        if (!el) {
          return null;
        }

        var grandParent = el.parentElement;

        if (!grandParent) {
          return null;
        }

        if (grandParent.scrollHeight > grandParent.clientHeight) {
          var _window$getComputedSt = window.getComputedStyle(grandParent),
              overflow = _window$getComputedSt.overflow;

          if (overflow.includes('scroll') || overflow.includes('auto')) {
            return grandParent;
          }
        }

        return run(grandParent);
      };

      return run(containerEl);
    }, [containerEl]);

    var _React$useState2 = _react$1["default"].useState({
      width: options.initialWidth,
      height: options.initialHeight
    }),
        _React$useState2$ = _React$useState2[0],
        width = _React$useState2$.width,
        height = _React$useState2$.height,
        setDims = _React$useState2[1];

    (0, _useIsomorphicLayoutEffect["default"])(function () {
      if (containerEl) {
        var computed = window.getComputedStyle(containerEl);

        if (!['relative', 'absolute', 'fixed'].includes(computed.position)) {
          containerEl.style.position = 'relative';
        }
      }
    }, [containerEl]);

    _react$1["default"].useEffect(function () {
      if (!containerEl) {
        return;
      }

      var observer = new ResizeObserver(function () {
        var rect = containerEl == null ? void 0 : containerEl.getBoundingClientRect();
        var styles = window.getComputedStyle(containerEl);

        if (rect) {
          setDims({
            width: rect.width - parseInt(styles.borderLeftWidth) - parseInt(styles.borderRightWidth),
            height: rect.height - parseInt(styles.borderTopWidth) - parseInt(styles.borderBottomWidth)
          });
        }
      });
      observer.observe(containerEl);
      return function () {
        observer.unobserve(containerEl);
      };
    }, [containerEl]);

    var _React$useState3 = _react$1["default"].useState(true),
        isIntersecting = _React$useState3[0],
        setIsIntersecting = _React$useState3[1];

    _react$1["default"].useEffect(function () {
      if (!containerEl || !options.useIntersectionObserver) return;
      var observer = new IntersectionObserver(function (entries) {
        for (var _iterator = (0, _createForOfIteratorHelperLoose2["default"])(entries), _step; !(_step = _iterator()).done;) {
          var entry = _step.value;

          if (entry.isIntersecting) {
            setIsIntersecting(true);
          } else {
            setIsIntersecting(false);
          }
        }
      }, {
        root: nearestScrollableParent,
        rootMargin: options.intersectionObserverRootMargin
      });
      observer.observe(containerEl);
      return function () {
        observer.unobserve(containerEl);
      };
    }, [containerEl, nearestScrollableParent, options.intersectionObserverRootMargin, options.useIntersectionObserver]);

    return /*#__PURE__*/_react$1["default"].createElement("div", (0, _extends2["default"])({
      ref: setContainerElement
    }, rest, {
      className: "ReactChart " + (className || ''),
      style: (0, _extends2["default"])({
        fontFamily: 'sans-serif'
      }, style, {
        position: 'absolute',
        width: width,
        height: height
      })
    }), options.useIntersectionObserver && !isIntersecting ? null : /*#__PURE__*/_react$1["default"].createElement(ChartInner, {
      options: options,
      width: width,
      height: height
    }));
  }

  function ChartInner(_ref2) {
    var _options2, _options$renderSVG;

    var options = _ref2.options,
        width = _ref2.width,
        height = _ref2.height;

    if (!options.primaryAxis) {
      throw new Error('A primaryAxis is required');
    }

    if (!options.secondaryAxes.length) {
      throw new Error('At least one secondaryAxis is required');
    }

    var primaryAxisOptions = _react$1["default"].useMemo(function () {
      var firstValue = getFirstDefinedValue(options.primaryAxis, options.data);
      var axisOptions = axisOptionsWithScaleType(options.primaryAxis, firstValue);
      return (0, _extends2["default"])({
        position: 'bottom'
      }, axisOptions);
    }, [options.data, options.primaryAxis]);

    var secondaryAxesOptions = _react$1["default"].useMemo(function () {
      return options.secondaryAxes.map(function (secondaryAxis, i) {
        var firstValue = getFirstDefinedValue(secondaryAxis, options.data);
        var axisOptions = axisOptionsWithScaleType(secondaryAxis, firstValue);

        if (!axisOptions.elementType) {
          if (primaryAxisOptions.scaleType === 'band') {
            axisOptions.elementType = 'bar';
          } else if (axisOptions.stacked) {
            axisOptions.elementType = 'area';
          }
        }

        if (typeof axisOptions.stacked === 'undefined' && axisOptions.elementType && ['area'].includes(axisOptions.elementType)) {
          axisOptions.stacked = true;
        }

        return (0, _extends2["default"])({
          position: !i ? 'left' : 'right'
        }, axisOptions);
      });
    }, [options.data, options.secondaryAxes, primaryAxisOptions]); // Resolve Tooltip Option


    var tooltipOptions = _react$1["default"].useMemo(function () {
      var _options, _tooltipOptions$group;

      var tooltipOptions = (0, _Tooltip.defaultTooltip)((_options = options) == null ? void 0 : _options.tooltip);
      tooltipOptions.groupingMode = (_tooltipOptions$group = tooltipOptions.groupingMode) != null ? _tooltipOptions$group : function () {
        if (options.interactionMode === 'closest') {
          return 'single';
        }

        return 'primary';
      }();
      return tooltipOptions;
    }, [options.interactionMode, (_options2 = options) == null ? void 0 : _options2.tooltip]);

    options = (0, _extends2["default"])({}, options, {
      tooltip: tooltipOptions
    }); //

    var svgRef = _react$1["default"].useRef(null);

    var getOptions = (0, _useGetLatest["default"])((0, _extends2["default"])({}, options, {
      tooltip: tooltipOptions
    }));

    var axisDimensionsState = _react$1["default"].useState({
      left: {},
      right: {},
      top: {},
      bottom: {}
    });

    var axisDimensions = axisDimensionsState[0];

    var isInteractingState = _react$1["default"].useState(false);

    var isInteracting = isInteractingState[0];

    var focusedDatumState = _react$1["default"].useState(null);

    var focusedDatum = focusedDatumState[0]; // useAtom<Datum<TDatum> | null>(focusedDatumAtom)

    var gridDimensions = _react$1["default"].useMemo(function () {
      var _options$padding$left, _options$padding$righ, _options$padding$bott, _options$padding$top;

      var padding = {
        left: typeof options.padding === 'object' ? (_options$padding$left = options.padding.left) != null ? _options$padding$left : defaultPadding : options.padding,
        right: typeof options.padding === 'object' ? (_options$padding$righ = options.padding.right) != null ? _options$padding$righ : defaultPadding : options.padding,
        bottom: typeof options.padding === 'object' ? (_options$padding$bott = options.padding.bottom) != null ? _options$padding$bott : defaultPadding : options.padding,
        top: typeof options.padding === 'object' ? (_options$padding$top = options.padding.top) != null ? _options$padding$top : defaultPadding : options.padding
      };
      var left = padding.left + Math.max((0, _d3Array.sum)(Object.values(axisDimensions.left), function (d) {
        return d.width;
      }), (0, _d3Array.sum)(Object.values(axisDimensions.top), function (d) {
        return d.paddingLeft;
      }), (0, _d3Array.sum)(Object.values(axisDimensions.bottom), function (d) {
        return d.paddingLeft;
      }));
      var top = padding.top + Math.max((0, _d3Array.sum)(Object.values(axisDimensions.top), function (d) {
        return d.height;
      }), (0, _d3Array.sum)(Object.values(axisDimensions.left), function (d) {
        return d.paddingTop;
      }), (0, _d3Array.sum)(Object.values(axisDimensions.right), function (d) {
        return d.paddingTop;
      }));
      var right = padding.right + Math.max((0, _d3Array.sum)(Object.values(axisDimensions.right), function (d) {
        return d.width;
      }), (0, _d3Array.sum)(Object.values(axisDimensions.top), function (d) {
        return d.paddingRight;
      }), (0, _d3Array.sum)(Object.values(axisDimensions.bottom), function (d) {
        return d.paddingRight;
      }));
      var bottom = padding.bottom + Math.max((0, _d3Array.sum)(Object.values(axisDimensions.bottom), function (d) {
        return d.height;
      }), (0, _d3Array.sum)(Object.values(axisDimensions.left), function (d) {
        return d.paddingBottom;
      }), (0, _d3Array.sum)(Object.values(axisDimensions.right), function (d) {
        return d.paddingBottom;
      }));
      var gridWidth = Math.max(0, width - left - right);
      var gridHeight = Math.max(0, height - top - bottom);
      return {
        left: left,
        top: top,
        right: right,
        bottom: bottom,
        width: gridWidth,
        height: gridHeight
      };
    }, [options.padding, axisDimensions.left, axisDimensions.top, axisDimensions.bottom, axisDimensions.right, width, height]);

    var series = _react$1["default"].useMemo(function () {
      var series = [];
      var indicesByAxisId = {};

      for (var seriesIndex = 0; seriesIndex < options.data.length; seriesIndex++) {
        var _originalSeries$id, _originalSeries$label, _indicesByAxisId$;

        var originalSeries = options.data[seriesIndex];
        var seriesId = (_originalSeries$id = originalSeries.id) != null ? _originalSeries$id : seriesIndex + '';
        var seriesLabel = (_originalSeries$label = originalSeries.label) != null ? _originalSeries$label : "Series " + (seriesIndex + 1);
        var secondaryAxisId = originalSeries.secondaryAxisId;
        var originalDatums = originalSeries.data;
        var datums = [];
        indicesByAxisId["" + secondaryAxisId] = (_indicesByAxisId$ = indicesByAxisId["" + secondaryAxisId]) != null ? _indicesByAxisId$ : 0;
        var seriesIndexPerAxis = indicesByAxisId["" + secondaryAxisId];
        indicesByAxisId["" + secondaryAxisId]++;

        for (var datumIndex = 0; datumIndex < originalDatums.length; datumIndex++) {
          var originalDatum = originalDatums[datumIndex];
          datums[datumIndex] = {
            originalSeries: originalSeries,
            seriesIndex: seriesIndex,
            seriesIndexPerAxis: seriesIndexPerAxis,
            seriesId: seriesId,
            seriesLabel: seriesLabel,
            secondaryAxisId: secondaryAxisId,
            index: datumIndex,
            originalDatum: originalDatum
          };
        }

        series[seriesIndex] = {
          originalSeries: originalSeries,
          index: seriesIndex,
          id: seriesId,
          label: seriesLabel,
          indexPerAxis: seriesIndexPerAxis,
          secondaryAxisId: secondaryAxisId,
          datums: datums
        };
      }

      return series;
    }, [options.data]);

    var allDatums = _react$1["default"].useMemo(function () {
      return series.map(function (s) {
        return s.datums;
      }).flat(2);
    }, [series]);

    var primaryAxis = _react$1["default"].useMemo(function () {
      return (0, _buildAxis["default"])(true, primaryAxisOptions, series, allDatums, gridDimensions, width, height);
    }, [allDatums, gridDimensions, height, primaryAxisOptions, series, width]);

    var secondaryAxes = _react$1["default"].useMemo(function () {
      return secondaryAxesOptions.map(function (secondaryAxis) {
        return (0, _buildAxis["default"])(false, secondaryAxis, series, allDatums, gridDimensions, width, height);
      });
    }, [allDatums, gridDimensions, height, secondaryAxesOptions, series, width]);

    var _React$useMemo = _react$1["default"].useMemo(function () {
      if (!isInteracting) {
        return [new Map(), new Map()];
      }

      var datumsByInteractionGroup = new Map();
      var datumsByTooltipGroup = new Map();
      var allBarAndNotStacked = secondaryAxes.every(function (d) {
        return d.elementType === 'bar' && !d.stacked;
      });

      var getInteractionPrimary = function getInteractionPrimary(datum) {
        if (allBarAndNotStacked) {
          var secondaryAxis = secondaryAxes.find(function (d) {
            return d.id === datum.secondaryAxisId;
          });

          if (secondaryAxis.elementType === 'bar' && !secondaryAxis.stacked) {
            return (0, _Bar.getPrimary)(datum, primaryAxis, secondaryAxis);
          }
        }

        return datum.primaryValue;
      };

      var getInteractionKey = function getInteractionKey(datum) {
        return "" + getInteractionPrimary(datum);
      };

      var getTooltipKey = function getTooltipKey(datum) {
        return "" + datum.primaryValue;
      };

      if (options.interactionMode === 'closest') {
        getInteractionKey = function getInteractionKey(datum) {
          return getInteractionPrimary(datum) + "_" + datum.secondaryValue;
        };
      }

      if (tooltipOptions.groupingMode === 'single') {
        getTooltipKey = function getTooltipKey(datum) {
          return datum.primaryValue + "_" + datum.secondaryValue;
        };
      } else if (tooltipOptions.groupingMode === 'secondary') {
        getTooltipKey = function getTooltipKey(datum) {
          return "" + datum.secondaryValue;
        };
      } else if (tooltipOptions.groupingMode === 'series') {
        getTooltipKey = function getTooltipKey(datum) {
          return "" + datum.seriesIndex;
        };
      }

      allDatums.forEach(function (datum) {
        var interactionKey = getInteractionKey(datum);
        var tooltipKey = getTooltipKey(datum);

        if (!datumsByInteractionGroup.has(interactionKey)) {
          datumsByInteractionGroup.set(interactionKey, []);
        }

        if (!datumsByTooltipGroup.has(tooltipKey)) {
          datumsByTooltipGroup.set(tooltipKey, []);
        }

        datumsByInteractionGroup.get(interactionKey).push(datum);
        datumsByTooltipGroup.get(tooltipKey).push(datum);
      });
      datumsByInteractionGroup.forEach(function (value, key) {
        datumsByInteractionGroup.set(key, sortDatumsBySecondaryPx(value, secondaryAxes));
      });
      datumsByTooltipGroup.forEach(function (value, key) {
        datumsByTooltipGroup.set(key, sortDatumsBySecondaryPx(value, secondaryAxes));
      });
      allDatums.forEach(function (datum) {
        var interactionKey = getInteractionKey(datum);
        var tooltipKey = getTooltipKey(datum);
        datum.interactiveGroup = datumsByInteractionGroup.get(interactionKey);
        datum.tooltipGroup = datumsByTooltipGroup.get(tooltipKey);
      });
      return [datumsByInteractionGroup, datumsByTooltipGroup];
    }, [isInteracting, allDatums, options.interactionMode, primaryAxis, secondaryAxes, tooltipOptions.groupingMode]),
        datumsByInteractionGroup = _React$useMemo[0],
        datumsByTooltipGroup = _React$useMemo[1];

    var getSeriesStatusStyle = _react$1["default"].useCallback(function (series, focusedDatum) {
      var _getOptions$getSeries, _getOptions$getSeries2, _getOptions;

      var base = {
        color: getOptions().defaultColors[series.index % getOptions().defaultColors.length]
      };
      var status = (0, _Utils.getSeriesStatus)(series, focusedDatum);
      var statusStyles = (_getOptions$getSeries = (_getOptions$getSeries2 = (_getOptions = getOptions()).getSeriesStyle) == null ? void 0 : _getOptions$getSeries2.call(_getOptions, series, status)) != null ? _getOptions$getSeries : {};
      series.style = (0, _Utils.materializeStyles)(statusStyles, base);
      return series.style;
    }, [getOptions]);

    var getDatumStatusStyle = _react$1["default"].useCallback(function (datum, focusedDatum) {
      var _series$datum$seriesI, _getOptions$getDatumS, _getOptions$getDatumS2, _getOptions2;

      var base = (0, _extends2["default"])({}, (_series$datum$seriesI = series[datum.seriesIndex]) == null ? void 0 : _series$datum$seriesI.style, {
        color: getOptions().defaultColors[datum.seriesIndex % getOptions().defaultColors.length]
      });
      var status = (0, _Utils.getDatumStatus)(datum, focusedDatum);
      var statusStyles = (_getOptions$getDatumS = (_getOptions$getDatumS2 = (_getOptions2 = getOptions()).getDatumStyle) == null ? void 0 : _getOptions$getDatumS2.call(_getOptions2, datum, status)) != null ? _getOptions$getDatumS : {};
      datum.style = (0, _Utils.materializeStyles)(statusStyles, base);
      return datum.style;
    }, [getOptions, series]); // Reverse the stack order for proper z-indexing


    var orderedSeries = _react$1["default"].useMemo(function () {
      var reversedSeries = [].concat(series).reverse();
      return getOptions().getSeriesOrder(reversedSeries);
    }, [getOptions, series]);

    (0, _useIsomorphicLayoutEffect["default"])(function () {
      if (svgRef.current && svgRef.current.parentElement && !svgRef.current.parentElement.style.position) {
        svgRef.current.parentElement.style.position = 'relative';
      }
    });
    var contextValue = {
      getOptions: getOptions,
      gridDimensions: gridDimensions,
      primaryAxis: primaryAxis,
      secondaryAxes: secondaryAxes,
      series: series,
      orderedSeries: orderedSeries,
      datumsByInteractionGroup: datumsByInteractionGroup,
      datumsByTooltipGroup: datumsByTooltipGroup,
      width: width,
      height: height,
      getSeriesStatusStyle: getSeriesStatusStyle,
      getDatumStatusStyle: getDatumStatusStyle,
      axisDimensionsState: axisDimensionsState,
      focusedDatumState: focusedDatumState,
      svgRef: svgRef,
      isInteractingState: isInteractingState
    };

    var seriesByAxisId = _react$1["default"].useMemo(function () {
      return (0, _d3Array.sort)((0, _d3Array.groups)(orderedSeries, function (d) {
        return d.secondaryAxisId;
      }), function (_ref3) {
        var key = _ref3[0];
        return secondaryAxes.findIndex(function (axis) {
          return axis.id === key;
        });
      });
    }, [orderedSeries, secondaryAxes]); // eslint-disable-next-line react-hooks/exhaustive-deps


    var getSeriesInfo = function getSeriesInfo() {
      return {
        primaryAxis: primaryAxis,
        secondaryAxes: secondaryAxes,
        seriesByAxisId: seriesByAxisId
      };
    };

    var getMemoizedSeriesInfo = _react$1["default"].useCallback(function () {
      return {
        primaryAxis: primaryAxis,
        secondaryAxes: secondaryAxes,
        seriesByAxisId: seriesByAxisId
      };
    }, [primaryAxis, secondaryAxes, seriesByAxisId]);

    if (options.memoizeSeries) {
      getSeriesInfo = getMemoizedSeriesInfo;
    }

    var seriesEl = _react$1["default"].useMemo(function () {
      var _getSeriesInfo = getSeriesInfo(),
          primaryAxis = _getSeriesInfo.primaryAxis,
          secondaryAxes = _getSeriesInfo.secondaryAxes,
          seriesByAxisId = _getSeriesInfo.seriesByAxisId;

      return seriesByAxisId.map(function (_ref4) {
        var axisId = _ref4[0],
            series = _ref4[1];
        var secondaryAxis = secondaryAxes.find(function (d) {
          return d.id === axisId;
        });

        if (!secondaryAxis) {
          return null;
        }

        var elementType = secondaryAxis.elementType;

        var Component = function () {
          if (elementType === 'line' || elementType === 'bubble' || elementType === 'area') {
            return _Line["default"];
          }

          if (elementType === 'bar') {
            return _Bar["default"];
          }

          throw new Error('Invalid elementType');
        }();

        if (primaryAxis.isInvalid || secondaryAxis.isInvalid) {
          return null;
        }

        return /*#__PURE__*/_react$1["default"].createElement(Component, {
          key: axisId != null ? axisId : '__default__',
          primaryAxis: primaryAxis,
          secondaryAxis: secondaryAxis,
          series: series
        });
      });
    }, [getSeriesInfo]);

    return /*#__PURE__*/_react$1["default"].createElement(_chartContext.ChartContextProvider, {
      value: (0, _useGetLatest["default"])(contextValue)
    }, /*#__PURE__*/_react$1["default"].createElement("div", null, /*#__PURE__*/_react$1["default"].createElement("svg", {
      ref: svgRef,
      style: {
        width: width,
        height: height,
        overflow: options.brush ? 'hidden' : 'visible'
      },
      onClick: function onClick(e) {
        return options.onClickDatum == null ? void 0 : options.onClickDatum(focusedDatum, e);
      },
      onMouseEnter: function onMouseEnter() {
        isInteractingState[1](true);
      },
      onMouseLeave: function onMouseLeave() {
        isInteractingState[1](false);
      }
    }, /*#__PURE__*/_react$1["default"].createElement("g", {
      className: "axes"
    }, [primaryAxis].concat(secondaryAxes).map(function (axis) {
      return /*#__PURE__*/_react$1["default"].createElement(_AxisLinear["default"], (0, _extends2["default"])({
        key: [axis.position, axis.id].join('')
      }, axis));
    })), /*#__PURE__*/_react$1["default"].createElement("g", {
      className: "Series",
      style: {
        pointerEvents: 'none'
      }
    }, seriesEl), /*#__PURE__*/_react$1["default"].createElement(_Voronoi["default"], null), (_options$renderSVG = options.renderSVG == null ? void 0 : options.renderSVG()) != null ? _options$renderSVG : null), /*#__PURE__*/_react$1["default"].createElement(_Cursors["default"], null), /*#__PURE__*/_react$1["default"].createElement(_Tooltip["default"], null)));
  }

  function getFirstDefinedValue(options, data) {
    var firstDefinedValue;
    data.some(function (serie) {
      return serie.data.some(function (originalDatum) {
        var value = options.getValue(originalDatum);

        if (value !== null && typeof value !== 'undefined') {
          firstDefinedValue = value;
          return true;
        }
      });
    });
    return firstDefinedValue;
  }

  function axisOptionsWithScaleType(options, firstValue) {
    var scaleType = options.scaleType;

    if (!options.scaleType) {
      if (typeof firstValue === 'number') {
        scaleType = 'linear';
      } else if (typeof (firstValue == null ? void 0 : firstValue.getMonth) === 'function') {
        scaleType = 'time';
      } else if (typeof firstValue === 'string' || typeof firstValue === 'boolean') {
        scaleType = 'band';
      } else {
        throw new Error('Invalid scale type: Unable to infer type from data');
      }
    }

    return (0, _extends2["default"])({}, options, {
      scaleType: scaleType
    });
  }

  function sortDatumsBySecondaryPx(datums, secondaryAxes) {
    if (secondaryAxes.every(function (d) {
      return d.stacked;
    })) {
      var differingInverts = secondaryAxes.some(function (d) {
        return d.invert;
      }) && secondaryAxes.some(function (d) {
        return !d.invert;
      });

      if (!differingInverts) {
        return datums;
      }
    }

    return [].concat(datums).sort(function (a, b) {
      var _aAxis$scale, _a$stackData, _bAxis$scale, _b$stackData;

      var aAxis = secondaryAxes.find(function (d) {
        return d.id === a.secondaryAxisId;
      });
      var bAxis = secondaryAxes.find(function (d) {
        return d.id === b.secondaryAxisId;
      });
      var aPx = (_aAxis$scale = aAxis == null ? void 0 : aAxis.scale(aAxis.stacked ? (_a$stackData = a.stackData) == null ? void 0 : _a$stackData[1] : a.secondaryValue)) != null ? _aAxis$scale : NaN;
      var bPx = (_bAxis$scale = bAxis == null ? void 0 : bAxis.scale(bAxis.stacked ? (_b$stackData = b.stackData) == null ? void 0 : _b$stackData[1] : b.secondaryValue)) != null ? _bAxis$scale : NaN;
      return aPx > bPx ? 1 : aPx < bPx ? -1 : 0;
    });
  }

  var types = {};

  (function (exports) {

  	exports.__esModule = true;
  	var _exportNames = {
  	  Chart: true
  	};
  	exports.Chart = void 0;

  	var _Chart = Chart$1;

  	exports.Chart = _Chart.Chart;

  	var _types = types;

  	Object.keys(_types).forEach(function (key) {
  	  if (key === "default" || key === "__esModule") return;
  	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  	  if (key in exports && exports[key] === _types[key]) return;
  	  exports[key] = _types[key];
  	});
  } (lib));

  var data = [{
    label: 'React Charts',
    data: [{
      date: new Date(),
      stars: 202123
    }
    // ...
    ]
  }, {
    label: 'React Query',
    data: [{
      date: new Date(),
      stars: 10234230
    }
    // ...
    ]
  }];

  var LineChartComponent = function LineChartComponent() {
    var primaryAxis = React__default["default"].useMemo(function () {
      return {
        getValue: function getValue(datum) {
          return datum.date;
        }
      };
    }, []);
    var secondaryAxes = React__default["default"].useMemo(function () {
      return [{
        getValue: function getValue(datum) {
          return datum.stars;
        }
      }];
    }, []);
    return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(lib.Chart, {
      options: {
        data: data,
        primaryAxis: primaryAxis,
        secondaryAxes: secondaryAxes
      }
    }));
  };

  var reactResizable = {exports: {}};

  var Resizable$1 = {};

  var cjs = {exports: {}};

  var Draggable$1 = {};

  var clsx = {exports: {}};

  function e(r){var o,t,f="";if("string"==typeof r||"number"==typeof r)f+=r;else if("object"==typeof r)if(Array.isArray(r))for(o=0;o<r.length;o++)r[o]&&(t=e(r[o]))&&(f&&(f+=" "),f+=t);else for(o in r)r[o]&&(f&&(f+=" "),f+=o);return f}function r(){for(var r,o,t=0,f="";t<arguments.length;)(r=arguments[t++])&&(o=e(r))&&(f&&(f+=" "),f+=o);return f}clsx.exports=r,clsx.exports.clsx=r;

  var domFns = {};

  var shims = {};

  Object.defineProperty(shims, "__esModule", {
    value: true
  });
  shims.dontSetMe = dontSetMe;
  shims.findInArray = findInArray;
  shims.int = int;
  shims.isFunction = isFunction;
  shims.isNum = isNum;

  // @credits https://gist.github.com/rogozhnikoff/a43cfed27c41e4e68cdc
  function findInArray(array
  /*: Array<any> | TouchList*/
  , callback
  /*: Function*/
  )
  /*: any*/
  {
    for (var i = 0, length = array.length; i < length; i++) {
      if (callback.apply(callback, [array[i], i, array])) return array[i];
    }
  }

  function isFunction(func
  /*: any*/
  )
  /*: boolean %checks*/
  {
    // $FlowIgnore[method-unbinding]
    return typeof func === 'function' || Object.prototype.toString.call(func) === '[object Function]';
  }

  function isNum(num
  /*: any*/
  )
  /*: boolean %checks*/
  {
    return typeof num === 'number' && !isNaN(num);
  }

  function int(a
  /*: string*/
  )
  /*: number*/
  {
    return parseInt(a, 10);
  }

  function dontSetMe(props
  /*: Object*/
  , propName
  /*: string*/
  , componentName
  /*: string*/
  )
  /*: ?Error*/
  {
    if (props[propName]) {
      return new Error("Invalid prop ".concat(propName, " passed to ").concat(componentName, " - do not set this, set it on the child."));
    }
  }

  var getPrefix$1 = {};

  Object.defineProperty(getPrefix$1, "__esModule", {
    value: true
  });
  getPrefix$1.browserPrefixToKey = browserPrefixToKey;
  getPrefix$1.browserPrefixToStyle = browserPrefixToStyle;
  getPrefix$1.default = void 0;
  getPrefix$1.getPrefix = getPrefix;
  var prefixes = ['Moz', 'Webkit', 'O', 'ms'];

  function getPrefix()
  /*: string*/
  {
    var _window$document, _window$document$docu;

    var prop
    /*: string*/
    = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'transform';
    // Ensure we're running in an environment where there is actually a global
    // `window` obj
    if (typeof window === 'undefined') return ''; // If we're in a pseudo-browser server-side environment, this access
    // path may not exist, so bail out if it doesn't.

    var style = (_window$document = window.document) === null || _window$document === void 0 ? void 0 : (_window$document$docu = _window$document.documentElement) === null || _window$document$docu === void 0 ? void 0 : _window$document$docu.style;
    if (!style) return '';
    if (prop in style) return '';

    for (var i = 0; i < prefixes.length; i++) {
      if (browserPrefixToKey(prop, prefixes[i]) in style) return prefixes[i];
    }

    return '';
  }

  function browserPrefixToKey(prop
  /*: string*/
  , prefix
  /*: string*/
  )
  /*: string*/
  {
    return prefix ? "".concat(prefix).concat(kebabToTitleCase(prop)) : prop;
  }

  function browserPrefixToStyle(prop
  /*: string*/
  , prefix
  /*: string*/
  )
  /*: string*/
  {
    return prefix ? "-".concat(prefix.toLowerCase(), "-").concat(prop) : prop;
  }

  function kebabToTitleCase(str
  /*: string*/
  )
  /*: string*/
  {
    var out = '';
    var shouldCapitalize = true;

    for (var i = 0; i < str.length; i++) {
      if (shouldCapitalize) {
        out += str[i].toUpperCase();
        shouldCapitalize = false;
      } else if (str[i] === '-') {
        shouldCapitalize = true;
      } else {
        out += str[i];
      }
    }

    return out;
  } // Default export is the prefix itself, like 'Moz', 'Webkit', etc
  // Note that you may have to re-test for certain things; for instance, Chrome 50
  // can handle unprefixed `transform`, but not unprefixed `user-select`


  var _default = (getPrefix()
  /*: string*/
  );

  getPrefix$1.default = _default;

  function _typeof$1(obj) { "@babel/helpers - typeof"; return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof$1(obj); }

  Object.defineProperty(domFns, "__esModule", {
    value: true
  });
  domFns.addClassName = addClassName;
  domFns.addEvent = addEvent;
  domFns.addUserSelectStyles = addUserSelectStyles;
  domFns.createCSSTransform = createCSSTransform;
  domFns.createSVGTransform = createSVGTransform;
  domFns.getTouch = getTouch;
  domFns.getTouchIdentifier = getTouchIdentifier;
  domFns.getTranslation = getTranslation;
  domFns.innerHeight = innerHeight;
  domFns.innerWidth = innerWidth;
  domFns.matchesSelector = matchesSelector;
  domFns.matchesSelectorAndParentsTo = matchesSelectorAndParentsTo;
  domFns.offsetXYFromParent = offsetXYFromParent;
  domFns.outerHeight = outerHeight;
  domFns.outerWidth = outerWidth;
  domFns.removeClassName = removeClassName;
  domFns.removeEvent = removeEvent;
  domFns.removeUserSelectStyles = removeUserSelectStyles;

  var _shims$2 = shims;

  var _getPrefix = _interopRequireWildcard$3(getPrefix$1);

  function _getRequireWildcardCache$3(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$3 = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard$3(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof$1(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$3(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) { _defineProperty$4(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _defineProperty$4(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var matchesSelectorFunc = '';

  function matchesSelector(el
  /*: Node*/
  , selector
  /*: string*/
  )
  /*: boolean*/
  {
    if (!matchesSelectorFunc) {
      matchesSelectorFunc = (0, _shims$2.findInArray)(['matches', 'webkitMatchesSelector', 'mozMatchesSelector', 'msMatchesSelector', 'oMatchesSelector'], function (method) {
        // $FlowIgnore: Doesn't think elements are indexable
        return (0, _shims$2.isFunction)(el[method]);
      });
    } // Might not be found entirely (not an Element?) - in that case, bail
    // $FlowIgnore: Doesn't think elements are indexable


    if (!(0, _shims$2.isFunction)(el[matchesSelectorFunc])) return false; // $FlowIgnore: Doesn't think elements are indexable

    return el[matchesSelectorFunc](selector);
  } // Works up the tree to the draggable itself attempting to match selector.


  function matchesSelectorAndParentsTo(el
  /*: Node*/
  , selector
  /*: string*/
  , baseNode
  /*: Node*/
  )
  /*: boolean*/
  {
    var node = el;

    do {
      if (matchesSelector(node, selector)) return true;
      if (node === baseNode) return false;
      node = node.parentNode;
    } while (node);

    return false;
  }

  function addEvent(el
  /*: ?Node*/
  , event
  /*: string*/
  , handler
  /*: Function*/
  , inputOptions
  /*: Object*/
  )
  /*: void*/
  {
    if (!el) return;

    var options = _objectSpread$3({
      capture: true
    }, inputOptions); // $FlowIgnore[method-unbinding]


    if (el.addEventListener) {
      el.addEventListener(event, handler, options);
    } else if (el.attachEvent) {
      el.attachEvent('on' + event, handler);
    } else {
      // $FlowIgnore: Doesn't think elements are indexable
      el['on' + event] = handler;
    }
  }

  function removeEvent(el
  /*: ?Node*/
  , event
  /*: string*/
  , handler
  /*: Function*/
  , inputOptions
  /*: Object*/
  )
  /*: void*/
  {
    if (!el) return;

    var options = _objectSpread$3({
      capture: true
    }, inputOptions); // $FlowIgnore[method-unbinding]


    if (el.removeEventListener) {
      el.removeEventListener(event, handler, options);
    } else if (el.detachEvent) {
      el.detachEvent('on' + event, handler);
    } else {
      // $FlowIgnore: Doesn't think elements are indexable
      el['on' + event] = null;
    }
  }

  function outerHeight(node
  /*: HTMLElement*/
  )
  /*: number*/
  {
    // This is deliberately excluding margin for our calculations, since we are using
    // offsetTop which is including margin. See getBoundPosition
    var height = node.clientHeight;
    var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
    height += (0, _shims$2.int)(computedStyle.borderTopWidth);
    height += (0, _shims$2.int)(computedStyle.borderBottomWidth);
    return height;
  }

  function outerWidth(node
  /*: HTMLElement*/
  )
  /*: number*/
  {
    // This is deliberately excluding margin for our calculations, since we are using
    // offsetLeft which is including margin. See getBoundPosition
    var width = node.clientWidth;
    var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
    width += (0, _shims$2.int)(computedStyle.borderLeftWidth);
    width += (0, _shims$2.int)(computedStyle.borderRightWidth);
    return width;
  }

  function innerHeight(node
  /*: HTMLElement*/
  )
  /*: number*/
  {
    var height = node.clientHeight;
    var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
    height -= (0, _shims$2.int)(computedStyle.paddingTop);
    height -= (0, _shims$2.int)(computedStyle.paddingBottom);
    return height;
  }

  function innerWidth(node
  /*: HTMLElement*/
  )
  /*: number*/
  {
    var width = node.clientWidth;
    var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
    width -= (0, _shims$2.int)(computedStyle.paddingLeft);
    width -= (0, _shims$2.int)(computedStyle.paddingRight);
    return width;
  }
  /*:: interface EventWithOffset {
    clientX: number, clientY: number
  }*/


  // Get from offsetParent
  function offsetXYFromParent(evt
  /*: EventWithOffset*/
  , offsetParent
  /*: HTMLElement*/
  , scale
  /*: number*/
  )
  /*: ControlPosition*/
  {
    var isBody = offsetParent === offsetParent.ownerDocument.body;
    var offsetParentRect = isBody ? {
      left: 0,
      top: 0
    } : offsetParent.getBoundingClientRect();
    var x = (evt.clientX + offsetParent.scrollLeft - offsetParentRect.left) / scale;
    var y = (evt.clientY + offsetParent.scrollTop - offsetParentRect.top) / scale;
    return {
      x: x,
      y: y
    };
  }

  function createCSSTransform(controlPos
  /*: ControlPosition*/
  , positionOffset
  /*: PositionOffsetControlPosition*/
  )
  /*: Object*/
  {
    var translation = getTranslation(controlPos, positionOffset, 'px');
    return _defineProperty$4({}, (0, _getPrefix.browserPrefixToKey)('transform', _getPrefix.default), translation);
  }

  function createSVGTransform(controlPos
  /*: ControlPosition*/
  , positionOffset
  /*: PositionOffsetControlPosition*/
  )
  /*: string*/
  {
    var translation = getTranslation(controlPos, positionOffset, '');
    return translation;
  }

  function getTranslation(_ref2, positionOffset
  /*: PositionOffsetControlPosition*/
  , unitSuffix
  /*: string*/
  )
  /*: string*/
  {
    var x = _ref2.x,
        y = _ref2.y;
    var translation = "translate(".concat(x).concat(unitSuffix, ",").concat(y).concat(unitSuffix, ")");

    if (positionOffset) {
      var defaultX = "".concat(typeof positionOffset.x === 'string' ? positionOffset.x : positionOffset.x + unitSuffix);
      var defaultY = "".concat(typeof positionOffset.y === 'string' ? positionOffset.y : positionOffset.y + unitSuffix);
      translation = "translate(".concat(defaultX, ", ").concat(defaultY, ")") + translation;
    }

    return translation;
  }

  function getTouch(e
  /*: MouseTouchEvent*/
  , identifier
  /*: number*/
  )
  /*: ?{clientX: number, clientY: number}*/
  {
    return e.targetTouches && (0, _shims$2.findInArray)(e.targetTouches, function (t) {
      return identifier === t.identifier;
    }) || e.changedTouches && (0, _shims$2.findInArray)(e.changedTouches, function (t) {
      return identifier === t.identifier;
    });
  }

  function getTouchIdentifier(e
  /*: MouseTouchEvent*/
  )
  /*: ?number*/
  {
    if (e.targetTouches && e.targetTouches[0]) return e.targetTouches[0].identifier;
    if (e.changedTouches && e.changedTouches[0]) return e.changedTouches[0].identifier;
  } // User-select Hacks:
  //
  // Useful for preventing blue highlights all over everything when dragging.
  // Note we're passing `document` b/c we could be iframed


  function addUserSelectStyles(doc
  /*: ?Document*/
  ) {
    if (!doc) return;
    var styleEl = doc.getElementById('react-draggable-style-el');

    if (!styleEl) {
      styleEl = doc.createElement('style');
      styleEl.type = 'text/css';
      styleEl.id = 'react-draggable-style-el';
      styleEl.innerHTML = '.react-draggable-transparent-selection *::-moz-selection {all: inherit;}\n';
      styleEl.innerHTML += '.react-draggable-transparent-selection *::selection {all: inherit;}\n';
      doc.getElementsByTagName('head')[0].appendChild(styleEl);
    }

    if (doc.body) addClassName(doc.body, 'react-draggable-transparent-selection');
  }

  function removeUserSelectStyles(doc
  /*: ?Document*/
  ) {
    if (!doc) return;

    try {
      if (doc.body) removeClassName(doc.body, 'react-draggable-transparent-selection'); // $FlowIgnore: IE

      if (doc.selection) {
        // $FlowIgnore: IE
        doc.selection.empty();
      } else {
        // Remove selection caused by scroll, unless it's a focused input
        // (we use doc.defaultView in case we're in an iframe)
        var selection = (doc.defaultView || window).getSelection();

        if (selection && selection.type !== 'Caret') {
          selection.removeAllRanges();
        }
      }
    } catch (e) {// probably IE
    }
  }

  function addClassName(el
  /*: HTMLElement*/
  , className
  /*: string*/
  ) {
    if (el.classList) {
      el.classList.add(className);
    } else {
      if (!el.className.match(new RegExp("(?:^|\\s)".concat(className, "(?!\\S)")))) {
        el.className += " ".concat(className);
      }
    }
  }

  function removeClassName(el
  /*: HTMLElement*/
  , className
  /*: string*/
  ) {
    if (el.classList) {
      el.classList.remove(className);
    } else {
      el.className = el.className.replace(new RegExp("(?:^|\\s)".concat(className, "(?!\\S)"), 'g'), '');
    }
  }

  var positionFns = {};

  Object.defineProperty(positionFns, "__esModule", {
    value: true
  });
  positionFns.canDragX = canDragX;
  positionFns.canDragY = canDragY;
  positionFns.createCoreData = createCoreData;
  positionFns.createDraggableData = createDraggableData;
  positionFns.getBoundPosition = getBoundPosition;
  positionFns.getControlPosition = getControlPosition;
  positionFns.snapToGrid = snapToGrid;

  var _shims$1 = shims;

  var _domFns$1 = domFns;

  function getBoundPosition(draggable
  /*: Draggable*/
  , x
  /*: number*/
  , y
  /*: number*/
  )
  /*: [number, number]*/
  {
    // If no bounds, short-circuit and move on
    if (!draggable.props.bounds) return [x, y]; // Clone new bounds

    var bounds = draggable.props.bounds;
    bounds = typeof bounds === 'string' ? bounds : cloneBounds(bounds);
    var node = findDOMNode(draggable);

    if (typeof bounds === 'string') {
      var ownerDocument = node.ownerDocument;
      var ownerWindow = ownerDocument.defaultView;
      var boundNode;

      if (bounds === 'parent') {
        boundNode = node.parentNode;
      } else {
        boundNode = ownerDocument.querySelector(bounds);
      }

      if (!(boundNode instanceof ownerWindow.HTMLElement)) {
        throw new Error('Bounds selector "' + bounds + '" could not find an element.');
      }

      var boundNodeEl
      /*: HTMLElement*/
      = boundNode; // for Flow, can't seem to refine correctly

      var nodeStyle = ownerWindow.getComputedStyle(node);
      var boundNodeStyle = ownerWindow.getComputedStyle(boundNodeEl); // Compute bounds. This is a pain with padding and offsets but this gets it exactly right.

      bounds = {
        left: -node.offsetLeft + (0, _shims$1.int)(boundNodeStyle.paddingLeft) + (0, _shims$1.int)(nodeStyle.marginLeft),
        top: -node.offsetTop + (0, _shims$1.int)(boundNodeStyle.paddingTop) + (0, _shims$1.int)(nodeStyle.marginTop),
        right: (0, _domFns$1.innerWidth)(boundNodeEl) - (0, _domFns$1.outerWidth)(node) - node.offsetLeft + (0, _shims$1.int)(boundNodeStyle.paddingRight) - (0, _shims$1.int)(nodeStyle.marginRight),
        bottom: (0, _domFns$1.innerHeight)(boundNodeEl) - (0, _domFns$1.outerHeight)(node) - node.offsetTop + (0, _shims$1.int)(boundNodeStyle.paddingBottom) - (0, _shims$1.int)(nodeStyle.marginBottom)
      };
    } // Keep x and y below right and bottom limits...


    if ((0, _shims$1.isNum)(bounds.right)) x = Math.min(x, bounds.right);
    if ((0, _shims$1.isNum)(bounds.bottom)) y = Math.min(y, bounds.bottom); // But above left and top limits.

    if ((0, _shims$1.isNum)(bounds.left)) x = Math.max(x, bounds.left);
    if ((0, _shims$1.isNum)(bounds.top)) y = Math.max(y, bounds.top);
    return [x, y];
  }

  function snapToGrid(grid
  /*: [number, number]*/
  , pendingX
  /*: number*/
  , pendingY
  /*: number*/
  )
  /*: [number, number]*/
  {
    var x = Math.round(pendingX / grid[0]) * grid[0];
    var y = Math.round(pendingY / grid[1]) * grid[1];
    return [x, y];
  }

  function canDragX(draggable
  /*: Draggable*/
  )
  /*: boolean*/
  {
    return draggable.props.axis === 'both' || draggable.props.axis === 'x';
  }

  function canDragY(draggable
  /*: Draggable*/
  )
  /*: boolean*/
  {
    return draggable.props.axis === 'both' || draggable.props.axis === 'y';
  } // Get {x, y} positions from event.


  function getControlPosition(e
  /*: MouseTouchEvent*/
  , touchIdentifier
  /*: ?number*/
  , draggableCore
  /*: DraggableCore*/
  )
  /*: ?ControlPosition*/
  {
    var touchObj = typeof touchIdentifier === 'number' ? (0, _domFns$1.getTouch)(e, touchIdentifier) : null;
    if (typeof touchIdentifier === 'number' && !touchObj) return null; // not the right touch

    var node = findDOMNode(draggableCore); // User can provide an offsetParent if desired.

    var offsetParent = draggableCore.props.offsetParent || node.offsetParent || node.ownerDocument.body;
    return (0, _domFns$1.offsetXYFromParent)(touchObj || e, offsetParent, draggableCore.props.scale);
  } // Create an data object exposed by <DraggableCore>'s events


  function createCoreData(draggable
  /*: DraggableCore*/
  , x
  /*: number*/
  , y
  /*: number*/
  )
  /*: DraggableData*/
  {
    var state = draggable.state;
    var isStart = !(0, _shims$1.isNum)(state.lastX);
    var node = findDOMNode(draggable);

    if (isStart) {
      // If this is our first move, use the x and y as last coords.
      return {
        node: node,
        deltaX: 0,
        deltaY: 0,
        lastX: x,
        lastY: y,
        x: x,
        y: y
      };
    } else {
      // Otherwise calculate proper values.
      return {
        node: node,
        deltaX: x - state.lastX,
        deltaY: y - state.lastY,
        lastX: state.lastX,
        lastY: state.lastY,
        x: x,
        y: y
      };
    }
  } // Create an data exposed by <Draggable>'s events


  function createDraggableData(draggable
  /*: Draggable*/
  , coreData
  /*: DraggableData*/
  )
  /*: DraggableData*/
  {
    var scale = draggable.props.scale;
    return {
      node: coreData.node,
      x: draggable.state.x + coreData.deltaX / scale,
      y: draggable.state.y + coreData.deltaY / scale,
      deltaX: coreData.deltaX / scale,
      deltaY: coreData.deltaY / scale,
      lastX: draggable.state.x,
      lastY: draggable.state.y
    };
  } // A lot faster than stringify/parse


  function cloneBounds(bounds
  /*: Bounds*/
  )
  /*: Bounds*/
  {
    return {
      left: bounds.left,
      top: bounds.top,
      right: bounds.right,
      bottom: bounds.bottom
    };
  }

  function findDOMNode(draggable
  /*: Draggable | DraggableCore*/
  )
  /*: HTMLElement*/
  {
    var node = draggable.findDOMNode();

    if (!node) {
      throw new Error('<DraggableCore>: Unmounted during event!');
    } // $FlowIgnore we can't assert on HTMLElement due to tests... FIXME


    return node;
  }

  var DraggableCore$2 = {};

  var log$1 = {};

  Object.defineProperty(log$1, "__esModule", {
    value: true
  });
  log$1.default = log;

  /*eslint no-console:0*/
  function log() {
  }

  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

  Object.defineProperty(DraggableCore$2, "__esModule", {
    value: true
  });
  DraggableCore$2.default = void 0;

  var React$2 = _interopRequireWildcard$2(React__default["default"]);

  var _propTypes$3 = _interopRequireDefault$3(require$$1__default["default"]);

  var _reactDom = _interopRequireDefault$3(require$$2__default["default"]);

  var _domFns = domFns;

  var _positionFns = positionFns;

  var _shims = shims;

  var _log = _interopRequireDefault$3(log$1);

  function _interopRequireDefault$3(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _getRequireWildcardCache$2(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$2 = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard$2(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$2(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

  function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf$2(subClass, superClass); }

  function _setPrototypeOf$2(o, p) { _setPrototypeOf$2 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$2(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperty$3(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  // Simple abstraction for dragging events names.
  var eventsFor = {
    touch: {
      start: 'touchstart',
      move: 'touchmove',
      stop: 'touchend'
    },
    mouse: {
      start: 'mousedown',
      move: 'mousemove',
      stop: 'mouseup'
    }
  }; // Default to mouse events.

  var dragEventFor = eventsFor.mouse;
  /*:: type DraggableCoreState = {
    dragging: boolean,
    lastX: number,
    lastY: number,
    touchIdentifier: ?number
  };*/

  /*:: export type DraggableData = {
    node: HTMLElement,
    x: number, y: number,
    deltaX: number, deltaY: number,
    lastX: number, lastY: number,
  };*/

  /*:: export type DraggableEventHandler = (e: MouseEvent, data: DraggableData) => void | false;*/

  /*:: export type ControlPosition = {x: number, y: number};*/

  /*:: export type PositionOffsetControlPosition = {x: number|string, y: number|string};*/

  /*:: export type DraggableCoreDefaultProps = {
    allowAnyClick: boolean,
    disabled: boolean,
    enableUserSelectHack: boolean,
    onStart: DraggableEventHandler,
    onDrag: DraggableEventHandler,
    onStop: DraggableEventHandler,
    onMouseDown: (e: MouseEvent) => void,
    scale: number,
  };*/

  /*:: export type DraggableCoreProps = {
    ...DraggableCoreDefaultProps,
    cancel: string,
    children: ReactElement<any>,
    offsetParent: HTMLElement,
    grid: [number, number],
    handle: string,
    nodeRef?: ?React.ElementRef<any>,
  };*/

  //
  // Define <DraggableCore>.
  //
  // <DraggableCore> is for advanced usage of <Draggable>. It maintains minimal internal state so it can
  // work well with libraries that require more control over the element.
  //
  var DraggableCore$1 = /*#__PURE__*/function (_React$Component) {
    _inherits(DraggableCore, _React$Component);

    var _super = _createSuper(DraggableCore);

    function DraggableCore() {
      var _this;

      _classCallCheck(this, DraggableCore);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _defineProperty$3(_assertThisInitialized(_this), "state", {
        dragging: false,
        // Used while dragging to determine deltas.
        lastX: NaN,
        lastY: NaN,
        touchIdentifier: null
      });

      _defineProperty$3(_assertThisInitialized(_this), "mounted", false);

      _defineProperty$3(_assertThisInitialized(_this), "handleDragStart", function (e) {
        // Make it possible to attach event handlers on top of this one.
        _this.props.onMouseDown(e); // Only accept left-clicks.


        if (!_this.props.allowAnyClick && typeof e.button === 'number' && e.button !== 0) return false; // Get nodes. Be sure to grab relative document (could be iframed)

        var thisNode = _this.findDOMNode();

        if (!thisNode || !thisNode.ownerDocument || !thisNode.ownerDocument.body) {
          throw new Error('<DraggableCore> not mounted on DragStart!');
        }

        var ownerDocument = thisNode.ownerDocument; // Short circuit if handle or cancel prop was provided and selector doesn't match.

        if (_this.props.disabled || !(e.target instanceof ownerDocument.defaultView.Node) || _this.props.handle && !(0, _domFns.matchesSelectorAndParentsTo)(e.target, _this.props.handle, thisNode) || _this.props.cancel && (0, _domFns.matchesSelectorAndParentsTo)(e.target, _this.props.cancel, thisNode)) {
          return;
        } // Prevent scrolling on mobile devices, like ipad/iphone.
        // Important that this is after handle/cancel.


        if (e.type === 'touchstart') e.preventDefault(); // Set touch identifier in component state if this is a touch event. This allows us to
        // distinguish between individual touches on multitouch screens by identifying which
        // touchpoint was set to this element.

        var touchIdentifier = (0, _domFns.getTouchIdentifier)(e);

        _this.setState({
          touchIdentifier: touchIdentifier
        }); // Get the current drag point from the event. This is used as the offset.


        var position = (0, _positionFns.getControlPosition)(e, touchIdentifier, _assertThisInitialized(_this));
        if (position == null) return; // not possible but satisfies flow

        var x = position.x,
            y = position.y; // Create an event object with all the data parents need to make a decision here.

        var coreEvent = (0, _positionFns.createCoreData)(_assertThisInitialized(_this), x, y);
        (0, _log.default)('DraggableCore: handleDragStart: %j', coreEvent); // Call event handler. If it returns explicit false, cancel.

        (0, _log.default)('calling', _this.props.onStart);

        var shouldUpdate = _this.props.onStart(e, coreEvent);

        if (shouldUpdate === false || _this.mounted === false) return; // Add a style to the body to disable user-select. This prevents text from
        // being selected all over the page.

        if (_this.props.enableUserSelectHack) (0, _domFns.addUserSelectStyles)(ownerDocument); // Initiate dragging. Set the current x and y as offsets
        // so we know how much we've moved during the drag. This allows us
        // to drag elements around even if they have been moved, without issue.

        _this.setState({
          dragging: true,
          lastX: x,
          lastY: y
        }); // Add events to the document directly so we catch when the user's mouse/touch moves outside of
        // this element. We use different events depending on whether or not we have detected that this
        // is a touch-capable device.


        (0, _domFns.addEvent)(ownerDocument, dragEventFor.move, _this.handleDrag);
        (0, _domFns.addEvent)(ownerDocument, dragEventFor.stop, _this.handleDragStop);
      });

      _defineProperty$3(_assertThisInitialized(_this), "handleDrag", function (e) {
        // Get the current drag point from the event. This is used as the offset.
        var position = (0, _positionFns.getControlPosition)(e, _this.state.touchIdentifier, _assertThisInitialized(_this));
        if (position == null) return;
        var x = position.x,
            y = position.y; // Snap to grid if prop has been provided

        if (Array.isArray(_this.props.grid)) {
          var deltaX = x - _this.state.lastX,
              deltaY = y - _this.state.lastY;

          var _snapToGrid = (0, _positionFns.snapToGrid)(_this.props.grid, deltaX, deltaY);

          var _snapToGrid2 = _slicedToArray(_snapToGrid, 2);

          deltaX = _snapToGrid2[0];
          deltaY = _snapToGrid2[1];
          if (!deltaX && !deltaY) return; // skip useless drag

          x = _this.state.lastX + deltaX, y = _this.state.lastY + deltaY;
        }

        var coreEvent = (0, _positionFns.createCoreData)(_assertThisInitialized(_this), x, y);
        (0, _log.default)('DraggableCore: handleDrag: %j', coreEvent); // Call event handler. If it returns explicit false, trigger end.

        var shouldUpdate = _this.props.onDrag(e, coreEvent);

        if (shouldUpdate === false || _this.mounted === false) {
          try {
            // $FlowIgnore
            _this.handleDragStop(new MouseEvent('mouseup'));
          } catch (err) {
            // Old browsers
            var event = ((document.createEvent('MouseEvents')
            /*: any*/
            )
            /*: MouseTouchEvent*/
            ); // I see why this insanity was deprecated
            // $FlowIgnore

            event.initMouseEvent('mouseup', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);

            _this.handleDragStop(event);
          }

          return;
        }

        _this.setState({
          lastX: x,
          lastY: y
        });
      });

      _defineProperty$3(_assertThisInitialized(_this), "handleDragStop", function (e) {
        if (!_this.state.dragging) return;
        var position = (0, _positionFns.getControlPosition)(e, _this.state.touchIdentifier, _assertThisInitialized(_this));
        if (position == null) return;
        var x = position.x,
            y = position.y; // Snap to grid if prop has been provided

        if (Array.isArray(_this.props.grid)) {
          var deltaX = x - _this.state.lastX || 0;
          var deltaY = y - _this.state.lastY || 0;

          var _snapToGrid3 = (0, _positionFns.snapToGrid)(_this.props.grid, deltaX, deltaY);

          var _snapToGrid4 = _slicedToArray(_snapToGrid3, 2);

          deltaX = _snapToGrid4[0];
          deltaY = _snapToGrid4[1];
          x = _this.state.lastX + deltaX, y = _this.state.lastY + deltaY;
        }

        var coreEvent = (0, _positionFns.createCoreData)(_assertThisInitialized(_this), x, y); // Call event handler

        var shouldContinue = _this.props.onStop(e, coreEvent);

        if (shouldContinue === false || _this.mounted === false) return false;

        var thisNode = _this.findDOMNode();

        if (thisNode) {
          // Remove user-select hack
          if (_this.props.enableUserSelectHack) (0, _domFns.removeUserSelectStyles)(thisNode.ownerDocument);
        }

        (0, _log.default)('DraggableCore: handleDragStop: %j', coreEvent); // Reset the el.

        _this.setState({
          dragging: false,
          lastX: NaN,
          lastY: NaN
        });

        if (thisNode) {
          // Remove event handlers
          (0, _log.default)('DraggableCore: Removing handlers');
          (0, _domFns.removeEvent)(thisNode.ownerDocument, dragEventFor.move, _this.handleDrag);
          (0, _domFns.removeEvent)(thisNode.ownerDocument, dragEventFor.stop, _this.handleDragStop);
        }
      });

      _defineProperty$3(_assertThisInitialized(_this), "onMouseDown", function (e) {
        dragEventFor = eventsFor.mouse; // on touchscreen laptops we could switch back to mouse

        return _this.handleDragStart(e);
      });

      _defineProperty$3(_assertThisInitialized(_this), "onMouseUp", function (e) {
        dragEventFor = eventsFor.mouse;
        return _this.handleDragStop(e);
      });

      _defineProperty$3(_assertThisInitialized(_this), "onTouchStart", function (e) {
        // We're on a touch device now, so change the event handlers
        dragEventFor = eventsFor.touch;
        return _this.handleDragStart(e);
      });

      _defineProperty$3(_assertThisInitialized(_this), "onTouchEnd", function (e) {
        // We're on a touch device now, so change the event handlers
        dragEventFor = eventsFor.touch;
        return _this.handleDragStop(e);
      });

      return _this;
    }

    _createClass(DraggableCore, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.mounted = true; // Touch handlers must be added with {passive: false} to be cancelable.
        // https://developers.google.com/web/updates/2017/01/scrolling-intervention

        var thisNode = this.findDOMNode();

        if (thisNode) {
          (0, _domFns.addEvent)(thisNode, eventsFor.touch.start, this.onTouchStart, {
            passive: false
          });
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.mounted = false; // Remove any leftover event handlers. Remove both touch and mouse handlers in case
        // some browser quirk caused a touch event to fire during a mouse move, or vice versa.

        var thisNode = this.findDOMNode();

        if (thisNode) {
          var ownerDocument = thisNode.ownerDocument;
          (0, _domFns.removeEvent)(ownerDocument, eventsFor.mouse.move, this.handleDrag);
          (0, _domFns.removeEvent)(ownerDocument, eventsFor.touch.move, this.handleDrag);
          (0, _domFns.removeEvent)(ownerDocument, eventsFor.mouse.stop, this.handleDragStop);
          (0, _domFns.removeEvent)(ownerDocument, eventsFor.touch.stop, this.handleDragStop);
          (0, _domFns.removeEvent)(thisNode, eventsFor.touch.start, this.onTouchStart, {
            passive: false
          });
          if (this.props.enableUserSelectHack) (0, _domFns.removeUserSelectStyles)(ownerDocument);
        }
      } // React Strict Mode compatibility: if `nodeRef` is passed, we will use it instead of trying to find
      // the underlying DOM node ourselves. See the README for more information.

    }, {
      key: "findDOMNode",
      value: function findDOMNode()
      /*: ?HTMLElement*/
      {
        var _this$props, _this$props2, _this$props2$nodeRef;

        return (_this$props = this.props) !== null && _this$props !== void 0 && _this$props.nodeRef ? (_this$props2 = this.props) === null || _this$props2 === void 0 ? void 0 : (_this$props2$nodeRef = _this$props2.nodeRef) === null || _this$props2$nodeRef === void 0 ? void 0 : _this$props2$nodeRef.current : _reactDom.default.findDOMNode(this);
      }
    }, {
      key: "render",
      value: function render()
      /*: React.Element<any>*/
      {
        // Reuse the child provided
        // This makes it flexible to use whatever element is wanted (div, ul, etc)
        return /*#__PURE__*/React$2.cloneElement(React$2.Children.only(this.props.children), {
          // Note: mouseMove handler is attached to document so it will still function
          // when the user drags quickly and leaves the bounds of the element.
          onMouseDown: this.onMouseDown,
          onMouseUp: this.onMouseUp,
          // onTouchStart is added on `componentDidMount` so they can be added with
          // {passive: false}, which allows it to cancel. See
          // https://developers.google.com/web/updates/2017/01/scrolling-intervention
          onTouchEnd: this.onTouchEnd
        });
      }
    }]);

    return DraggableCore;
  }(React$2.Component);

  DraggableCore$2.default = DraggableCore$1;

  _defineProperty$3(DraggableCore$1, "displayName", 'DraggableCore');

  _defineProperty$3(DraggableCore$1, "propTypes", {
    /**
     * `allowAnyClick` allows dragging using any mouse button.
     * By default, we only accept the left button.
     *
     * Defaults to `false`.
     */
    allowAnyClick: _propTypes$3.default.bool,

    /**
     * `disabled`, if true, stops the <Draggable> from dragging. All handlers,
     * with the exception of `onMouseDown`, will not fire.
     */
    disabled: _propTypes$3.default.bool,

    /**
     * By default, we add 'user-select:none' attributes to the document body
     * to prevent ugly text selection during drag. If this is causing problems
     * for your app, set this to `false`.
     */
    enableUserSelectHack: _propTypes$3.default.bool,

    /**
     * `offsetParent`, if set, uses the passed DOM node to compute drag offsets
     * instead of using the parent node.
     */
    offsetParent: function offsetParent(props
    /*: DraggableCoreProps*/
    , propName
    /*: $Keys<DraggableCoreProps>*/
    ) {
      if (props[propName] && props[propName].nodeType !== 1) {
        throw new Error('Draggable\'s offsetParent must be a DOM Node.');
      }
    },

    /**
     * `grid` specifies the x and y that dragging should snap to.
     */
    grid: _propTypes$3.default.arrayOf(_propTypes$3.default.number),

    /**
     * `handle` specifies a selector to be used as the handle that initiates drag.
     *
     * Example:
     *
     * ```jsx
     *   let App = React.createClass({
     *       render: function () {
     *         return (
     *            <Draggable handle=".handle">
     *              <div>
     *                  <div className="handle">Click me to drag</div>
     *                  <div>This is some other content</div>
     *              </div>
     *           </Draggable>
     *         );
     *       }
     *   });
     * ```
     */
    handle: _propTypes$3.default.string,

    /**
     * `cancel` specifies a selector to be used to prevent drag initialization.
     *
     * Example:
     *
     * ```jsx
     *   let App = React.createClass({
     *       render: function () {
     *           return(
     *               <Draggable cancel=".cancel">
     *                   <div>
     *                     <div className="cancel">You can't drag from here</div>
     *                     <div>Dragging here works fine</div>
     *                   </div>
     *               </Draggable>
     *           );
     *       }
     *   });
     * ```
     */
    cancel: _propTypes$3.default.string,

    /* If running in React Strict mode, ReactDOM.findDOMNode() is deprecated.
     * Unfortunately, in order for <Draggable> to work properly, we need raw access
     * to the underlying DOM node. If you want to avoid the warning, pass a `nodeRef`
     * as in this example:
     *
     * function MyComponent() {
     *   const nodeRef = React.useRef(null);
     *   return (
     *     <Draggable nodeRef={nodeRef}>
     *       <div ref={nodeRef}>Example Target</div>
     *     </Draggable>
     *   );
     * }
     *
     * This can be used for arbitrarily nested components, so long as the ref ends up
     * pointing to the actual child DOM node and not a custom component.
     */
    nodeRef: _propTypes$3.default.object,

    /**
     * Called when dragging starts.
     * If this function returns the boolean false, dragging will be canceled.
     */
    onStart: _propTypes$3.default.func,

    /**
     * Called while dragging.
     * If this function returns the boolean false, dragging will be canceled.
     */
    onDrag: _propTypes$3.default.func,

    /**
     * Called when dragging stops.
     * If this function returns the boolean false, the drag will remain active.
     */
    onStop: _propTypes$3.default.func,

    /**
     * A workaround option which can be passed if onMouseDown needs to be accessed,
     * since it'll always be blocked (as there is internal use of onMouseDown)
     */
    onMouseDown: _propTypes$3.default.func,

    /**
     * `scale`, if set, applies scaling while dragging an element
     */
    scale: _propTypes$3.default.number,

    /**
     * These properties should be defined on the child, not here.
     */
    className: _shims.dontSetMe,
    style: _shims.dontSetMe,
    transform: _shims.dontSetMe
  });

  _defineProperty$3(DraggableCore$1, "defaultProps", {
    allowAnyClick: false,
    // by default only accept left click
    disabled: false,
    enableUserSelectHack: true,
    onStart: function onStart() {},
    onDrag: function onDrag() {},
    onStop: function onStop() {},
    onMouseDown: function onMouseDown() {},
    scale: 1
  });

  (function (exports) {

  	function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});
  	Object.defineProperty(exports, "DraggableCore", {
  	  enumerable: true,
  	  get: function get() {
  	    return _DraggableCore.default;
  	  }
  	});
  	exports.default = void 0;

  	var React = _interopRequireWildcard(React__default["default"]);

  	var _propTypes = _interopRequireDefault(require$$1__default["default"]);

  	var _reactDom = _interopRequireDefault(require$$2__default["default"]);

  	var _clsx2 = _interopRequireDefault(clsx.exports);

  	var _domFns = domFns;

  	var _positionFns = positionFns;

  	var _shims = shims;

  	var _DraggableCore = _interopRequireDefault(DraggableCore$2);

  	var _log = _interopRequireDefault(log$1);

  	var _excluded = ["axis", "bounds", "children", "defaultPosition", "defaultClassName", "defaultClassNameDragging", "defaultClassNameDragged", "position", "positionOffset", "scale"];

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  	function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

  	function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

  	function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

  	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  	function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

  	function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  	function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  	function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  	function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

  	function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

  	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  	function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  	function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

  	function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  	function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  	function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  	//
  	// Define <Draggable>
  	//
  	var Draggable = /*#__PURE__*/function (_React$Component) {
  	  _inherits(Draggable, _React$Component);

  	  var _super = _createSuper(Draggable);

  	  function Draggable(props
  	  /*: DraggableProps*/
  	  ) {
  	    var _this;

  	    _classCallCheck(this, Draggable);

  	    _this = _super.call(this, props);

  	    _defineProperty(_assertThisInitialized(_this), "onDragStart", function (e, coreData) {
  	      (0, _log.default)('Draggable: onDragStart: %j', coreData); // Short-circuit if user's callback killed it.

  	      var shouldStart = _this.props.onStart(e, (0, _positionFns.createDraggableData)(_assertThisInitialized(_this), coreData)); // Kills start event on core as well, so move handlers are never bound.


  	      if (shouldStart === false) return false;

  	      _this.setState({
  	        dragging: true,
  	        dragged: true
  	      });
  	    });

  	    _defineProperty(_assertThisInitialized(_this), "onDrag", function (e, coreData) {
  	      if (!_this.state.dragging) return false;
  	      (0, _log.default)('Draggable: onDrag: %j', coreData);
  	      var uiData = (0, _positionFns.createDraggableData)(_assertThisInitialized(_this), coreData);
  	      var newState
  	      /*: $Shape<DraggableState>*/
  	      = {
  	        x: uiData.x,
  	        y: uiData.y
  	      }; // Keep within bounds.

  	      if (_this.props.bounds) {
  	        // Save original x and y.
  	        var x = newState.x,
  	            y = newState.y; // Add slack to the values used to calculate bound position. This will ensure that if
  	        // we start removing slack, the element won't react to it right away until it's been
  	        // completely removed.

  	        newState.x += _this.state.slackX;
  	        newState.y += _this.state.slackY; // Get bound position. This will ceil/floor the x and y within the boundaries.

  	        var _getBoundPosition = (0, _positionFns.getBoundPosition)(_assertThisInitialized(_this), newState.x, newState.y),
  	            _getBoundPosition2 = _slicedToArray(_getBoundPosition, 2),
  	            newStateX = _getBoundPosition2[0],
  	            newStateY = _getBoundPosition2[1];

  	        newState.x = newStateX;
  	        newState.y = newStateY; // Recalculate slack by noting how much was shaved by the boundPosition handler.

  	        newState.slackX = _this.state.slackX + (x - newState.x);
  	        newState.slackY = _this.state.slackY + (y - newState.y); // Update the event we fire to reflect what really happened after bounds took effect.

  	        uiData.x = newState.x;
  	        uiData.y = newState.y;
  	        uiData.deltaX = newState.x - _this.state.x;
  	        uiData.deltaY = newState.y - _this.state.y;
  	      } // Short-circuit if user's callback killed it.


  	      var shouldUpdate = _this.props.onDrag(e, uiData);

  	      if (shouldUpdate === false) return false;

  	      _this.setState(newState);
  	    });

  	    _defineProperty(_assertThisInitialized(_this), "onDragStop", function (e, coreData) {
  	      if (!_this.state.dragging) return false; // Short-circuit if user's callback killed it.

  	      var shouldContinue = _this.props.onStop(e, (0, _positionFns.createDraggableData)(_assertThisInitialized(_this), coreData));

  	      if (shouldContinue === false) return false;
  	      (0, _log.default)('Draggable: onDragStop: %j', coreData);
  	      var newState
  	      /*: $Shape<DraggableState>*/
  	      = {
  	        dragging: false,
  	        slackX: 0,
  	        slackY: 0
  	      }; // If this is a controlled component, the result of this operation will be to
  	      // revert back to the old position. We expect a handler on `onDragStop`, at the least.

  	      var controlled = Boolean(_this.props.position);

  	      if (controlled) {
  	        var _this$props$position = _this.props.position,
  	            x = _this$props$position.x,
  	            y = _this$props$position.y;
  	        newState.x = x;
  	        newState.y = y;
  	      }

  	      _this.setState(newState);
  	    });

  	    _this.state = {
  	      // Whether or not we are currently dragging.
  	      dragging: false,
  	      // Whether or not we have been dragged before.
  	      dragged: false,
  	      // Current transform x and y.
  	      x: props.position ? props.position.x : props.defaultPosition.x,
  	      y: props.position ? props.position.y : props.defaultPosition.y,
  	      prevPropsPosition: _objectSpread({}, props.position),
  	      // Used for compensating for out-of-bounds drags
  	      slackX: 0,
  	      slackY: 0,
  	      // Can only determine if SVG after mounting
  	      isElementSVG: false
  	    };

  	    if (props.position && !(props.onDrag || props.onStop)) {
  	      // eslint-disable-next-line no-console
  	      console.warn('A `position` was applied to this <Draggable>, without drag handlers. This will make this ' + 'component effectively undraggable. Please attach `onDrag` or `onStop` handlers so you can adjust the ' + '`position` of this element.');
  	    }

  	    return _this;
  	  }

  	  _createClass(Draggable, [{
  	    key: "componentDidMount",
  	    value: function componentDidMount() {
  	      // Check to see if the element passed is an instanceof SVGElement
  	      if (typeof window.SVGElement !== 'undefined' && this.findDOMNode() instanceof window.SVGElement) {
  	        this.setState({
  	          isElementSVG: true
  	        });
  	      }
  	    }
  	  }, {
  	    key: "componentWillUnmount",
  	    value: function componentWillUnmount() {
  	      this.setState({
  	        dragging: false
  	      }); // prevents invariant if unmounted while dragging
  	    } // React Strict Mode compatibility: if `nodeRef` is passed, we will use it instead of trying to find
  	    // the underlying DOM node ourselves. See the README for more information.

  	  }, {
  	    key: "findDOMNode",
  	    value: function findDOMNode()
  	    /*: ?HTMLElement*/
  	    {
  	      var _this$props$nodeRef$c, _this$props, _this$props$nodeRef;

  	      return (_this$props$nodeRef$c = (_this$props = this.props) === null || _this$props === void 0 ? void 0 : (_this$props$nodeRef = _this$props.nodeRef) === null || _this$props$nodeRef === void 0 ? void 0 : _this$props$nodeRef.current) !== null && _this$props$nodeRef$c !== void 0 ? _this$props$nodeRef$c : _reactDom.default.findDOMNode(this);
  	    }
  	  }, {
  	    key: "render",
  	    value: function render()
  	    /*: ReactElement<any>*/
  	    {
  	      var _clsx;

  	      var _this$props2 = this.props;
  	          _this$props2.axis;
  	          _this$props2.bounds;
  	          var children = _this$props2.children,
  	          defaultPosition = _this$props2.defaultPosition,
  	          defaultClassName = _this$props2.defaultClassName,
  	          defaultClassNameDragging = _this$props2.defaultClassNameDragging,
  	          defaultClassNameDragged = _this$props2.defaultClassNameDragged,
  	          position = _this$props2.position,
  	          positionOffset = _this$props2.positionOffset;
  	          _this$props2.scale;
  	          var draggableCoreProps = _objectWithoutProperties(_this$props2, _excluded);

  	      var style = {};
  	      var svgTransform = null; // If this is controlled, we don't want to move it - unless it's dragging.

  	      var controlled = Boolean(position);
  	      var draggable = !controlled || this.state.dragging;
  	      var validPosition = position || defaultPosition;
  	      var transformOpts = {
  	        // Set left if horizontal drag is enabled
  	        x: (0, _positionFns.canDragX)(this) && draggable ? this.state.x : validPosition.x,
  	        // Set top if vertical drag is enabled
  	        y: (0, _positionFns.canDragY)(this) && draggable ? this.state.y : validPosition.y
  	      }; // If this element was SVG, we use the `transform` attribute.

  	      if (this.state.isElementSVG) {
  	        svgTransform = (0, _domFns.createSVGTransform)(transformOpts, positionOffset);
  	      } else {
  	        // Add a CSS transform to move the element around. This allows us to move the element around
  	        // without worrying about whether or not it is relatively or absolutely positioned.
  	        // If the item you are dragging already has a transform set, wrap it in a <span> so <Draggable>
  	        // has a clean slate.
  	        style = (0, _domFns.createCSSTransform)(transformOpts, positionOffset);
  	      } // Mark with class while dragging


  	      var className = (0, _clsx2.default)(children.props.className || '', defaultClassName, (_clsx = {}, _defineProperty(_clsx, defaultClassNameDragging, this.state.dragging), _defineProperty(_clsx, defaultClassNameDragged, this.state.dragged), _clsx)); // Reuse the child provided
  	      // This makes it flexible to use whatever element is wanted (div, ul, etc)

  	      return /*#__PURE__*/React.createElement(_DraggableCore.default, _extends({}, draggableCoreProps, {
  	        onStart: this.onDragStart,
  	        onDrag: this.onDrag,
  	        onStop: this.onDragStop
  	      }), /*#__PURE__*/React.cloneElement(React.Children.only(children), {
  	        className: className,
  	        style: _objectSpread(_objectSpread({}, children.props.style), style),
  	        transform: svgTransform
  	      }));
  	    }
  	  }], [{
  	    key: "getDerivedStateFromProps",
  	    value: // React 16.3+
  	    // Arity (props, state)
  	    function getDerivedStateFromProps(_ref, _ref2)
  	    /*: ?$Shape<DraggableState>*/
  	    {
  	      var position = _ref.position;
  	      var prevPropsPosition = _ref2.prevPropsPosition;

  	      // Set x/y if a new position is provided in props that is different than the previous.
  	      if (position && (!prevPropsPosition || position.x !== prevPropsPosition.x || position.y !== prevPropsPosition.y)) {
  	        (0, _log.default)('Draggable: getDerivedStateFromProps %j', {
  	          position: position,
  	          prevPropsPosition: prevPropsPosition
  	        });
  	        return {
  	          x: position.x,
  	          y: position.y,
  	          prevPropsPosition: _objectSpread({}, position)
  	        };
  	      }

  	      return null;
  	    }
  	  }]);

  	  return Draggable;
  	}(React.Component);

  	exports.default = Draggable;

  	_defineProperty(Draggable, "displayName", 'Draggable');

  	_defineProperty(Draggable, "propTypes", _objectSpread(_objectSpread({}, _DraggableCore.default.propTypes), {}, {
  	  /**
  	   * `axis` determines which axis the draggable can move.
  	   *
  	   *  Note that all callbacks will still return data as normal. This only
  	   *  controls flushing to the DOM.
  	   *
  	   * 'both' allows movement horizontally and vertically.
  	   * 'x' limits movement to horizontal axis.
  	   * 'y' limits movement to vertical axis.
  	   * 'none' limits all movement.
  	   *
  	   * Defaults to 'both'.
  	   */
  	  axis: _propTypes.default.oneOf(['both', 'x', 'y', 'none']),

  	  /**
  	   * `bounds` determines the range of movement available to the element.
  	   * Available values are:
  	   *
  	   * 'parent' restricts movement within the Draggable's parent node.
  	   *
  	   * Alternatively, pass an object with the following properties, all of which are optional:
  	   *
  	   * {left: LEFT_BOUND, right: RIGHT_BOUND, bottom: BOTTOM_BOUND, top: TOP_BOUND}
  	   *
  	   * All values are in px.
  	   *
  	   * Example:
  	   *
  	   * ```jsx
  	   *   let App = React.createClass({
  	   *       render: function () {
  	   *         return (
  	   *            <Draggable bounds={{right: 300, bottom: 300}}>
  	   *              <div>Content</div>
  	   *           </Draggable>
  	   *         );
  	   *       }
  	   *   });
  	   * ```
  	   */
  	  bounds: _propTypes.default.oneOfType([_propTypes.default.shape({
  	    left: _propTypes.default.number,
  	    right: _propTypes.default.number,
  	    top: _propTypes.default.number,
  	    bottom: _propTypes.default.number
  	  }), _propTypes.default.string, _propTypes.default.oneOf([false])]),
  	  defaultClassName: _propTypes.default.string,
  	  defaultClassNameDragging: _propTypes.default.string,
  	  defaultClassNameDragged: _propTypes.default.string,

  	  /**
  	   * `defaultPosition` specifies the x and y that the dragged item should start at
  	   *
  	   * Example:
  	   *
  	   * ```jsx
  	   *      let App = React.createClass({
  	   *          render: function () {
  	   *              return (
  	   *                  <Draggable defaultPosition={{x: 25, y: 25}}>
  	   *                      <div>I start with transformX: 25px and transformY: 25px;</div>
  	   *                  </Draggable>
  	   *              );
  	   *          }
  	   *      });
  	   * ```
  	   */
  	  defaultPosition: _propTypes.default.shape({
  	    x: _propTypes.default.number,
  	    y: _propTypes.default.number
  	  }),
  	  positionOffset: _propTypes.default.shape({
  	    x: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  	    y: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
  	  }),

  	  /**
  	   * `position`, if present, defines the current position of the element.
  	   *
  	   *  This is similar to how form elements in React work - if no `position` is supplied, the component
  	   *  is uncontrolled.
  	   *
  	   * Example:
  	   *
  	   * ```jsx
  	   *      let App = React.createClass({
  	   *          render: function () {
  	   *              return (
  	   *                  <Draggable position={{x: 25, y: 25}}>
  	   *                      <div>I start with transformX: 25px and transformY: 25px;</div>
  	   *                  </Draggable>
  	   *              );
  	   *          }
  	   *      });
  	   * ```
  	   */
  	  position: _propTypes.default.shape({
  	    x: _propTypes.default.number,
  	    y: _propTypes.default.number
  	  }),

  	  /**
  	   * These properties should be defined on the child, not here.
  	   */
  	  className: _shims.dontSetMe,
  	  style: _shims.dontSetMe,
  	  transform: _shims.dontSetMe
  	}));

  	_defineProperty(Draggable, "defaultProps", _objectSpread(_objectSpread({}, _DraggableCore.default.defaultProps), {}, {
  	  axis: 'both',
  	  bounds: false,
  	  defaultClassName: 'react-draggable',
  	  defaultClassNameDragging: 'react-draggable-dragging',
  	  defaultClassNameDragged: 'react-draggable-dragged',
  	  defaultPosition: {
  	    x: 0,
  	    y: 0
  	  },
  	  scale: 1
  	}));
  } (Draggable$1));

  var _require = Draggable$1,
      Draggable = _require.default,
      DraggableCore = _require.DraggableCore; // Previous versions of this lib exported <Draggable> as the root export. As to no-// them, or TypeScript, we export *both* as the root and as 'default'.
  // See https://github.com/mzabriskie/react-draggable/pull/254
  // and https://github.com/mzabriskie/react-draggable/issues/266


  cjs.exports = Draggable;
  cjs.exports.default = Draggable;
  cjs.exports.DraggableCore = DraggableCore;

  var utils = {};

  utils.__esModule = true;
  utils.cloneElement = cloneElement;
  var _react = _interopRequireDefault$2(React__default["default"]);
  function _interopRequireDefault$2(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _defineProperty$2(obj, key, value) { key = _toPropertyKey$2(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey$2(arg) { var key = _toPrimitive$2(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive$2(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  // React.addons.cloneWithProps look-alike that merges style & className.
  function cloneElement(element, props) {
    if (props.style && element.props.style) {
      props.style = _objectSpread$2(_objectSpread$2({}, element.props.style), props.style);
    }
    if (props.className && element.props.className) {
      props.className = element.props.className + " " + props.className;
    }
    return /*#__PURE__*/_react.default.cloneElement(element, props);
  }

  var propTypes = {};

  propTypes.__esModule = true;
  propTypes.resizableProps = void 0;
  var _propTypes$2 = _interopRequireDefault$1(require$$1__default["default"]);
  function _interopRequireDefault$1(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  var resizableProps = {
    /*
    * Restricts resizing to a particular axis (default: 'both')
    * 'both' - allows resizing by width or height
    * 'x' - only allows the width to be changed
    * 'y' - only allows the height to be changed
    * 'none' - disables resizing altogether
    * */
    axis: _propTypes$2.default.oneOf(['both', 'x', 'y', 'none']),
    className: _propTypes$2.default.string,
    /*
    * Require that one and only one child be present.
    * */
    children: _propTypes$2.default.element.isRequired,
    /*
    * These will be passed wholesale to react-draggable's DraggableCore
    * */
    draggableOpts: _propTypes$2.default.shape({
      allowAnyClick: _propTypes$2.default.bool,
      cancel: _propTypes$2.default.string,
      children: _propTypes$2.default.node,
      disabled: _propTypes$2.default.bool,
      enableUserSelectHack: _propTypes$2.default.bool,
      offsetParent: _propTypes$2.default.node,
      grid: _propTypes$2.default.arrayOf(_propTypes$2.default.number),
      handle: _propTypes$2.default.string,
      nodeRef: _propTypes$2.default.object,
      onStart: _propTypes$2.default.func,
      onDrag: _propTypes$2.default.func,
      onStop: _propTypes$2.default.func,
      onMouseDown: _propTypes$2.default.func,
      scale: _propTypes$2.default.number
    }),
    /*
    * Initial height
    * */
    height: function height() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var props = args[0];
      // Required if resizing height or both
      if (props.axis === 'both' || props.axis === 'y') {
        var _PropTypes$number;
        return (_PropTypes$number = _propTypes$2.default.number).isRequired.apply(_PropTypes$number, args);
      }
      return _propTypes$2.default.number.apply(_propTypes$2.default, args);
    },
    /*
    * Customize cursor resize handle
    * */
    handle: _propTypes$2.default.oneOfType([_propTypes$2.default.node, _propTypes$2.default.func]),
    /*
    * If you change this, be sure to update your css
    * */
    handleSize: _propTypes$2.default.arrayOf(_propTypes$2.default.number),
    lockAspectRatio: _propTypes$2.default.bool,
    /*
    * Max X & Y measure
    * */
    maxConstraints: _propTypes$2.default.arrayOf(_propTypes$2.default.number),
    /*
    * Min X & Y measure
    * */
    minConstraints: _propTypes$2.default.arrayOf(_propTypes$2.default.number),
    /*
    * Called on stop resize event
    * */
    onResizeStop: _propTypes$2.default.func,
    /*
    * Called on start resize event
    * */
    onResizeStart: _propTypes$2.default.func,
    /*
    * Called on resize event
    * */
    onResize: _propTypes$2.default.func,
    /*
    * Defines which resize handles should be rendered (default: 'se')
    * 's' - South handle (bottom-center)
    * 'w' - West handle (left-center)
    * 'e' - East handle (right-center)
    * 'n' - North handle (top-center)
    * 'sw' - Southwest handle (bottom-left)
    * 'nw' - Northwest handle (top-left)
    * 'se' - Southeast handle (bottom-right)
    * 'ne' - Northeast handle (top-center)
    * */
    resizeHandles: _propTypes$2.default.arrayOf(_propTypes$2.default.oneOf(['s', 'w', 'e', 'n', 'sw', 'nw', 'se', 'ne'])),
    /*
    * If `transform: scale(n)` is set on the parent, this should be set to `n`.
    * */
    transformScale: _propTypes$2.default.number,
    /*
     * Initial width
     */
    width: function width() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      var props = args[0];
      // Required if resizing width or both
      if (props.axis === 'both' || props.axis === 'x') {
        var _PropTypes$number2;
        return (_PropTypes$number2 = _propTypes$2.default.number).isRequired.apply(_PropTypes$number2, args);
      }
      return _propTypes$2.default.number.apply(_propTypes$2.default, args);
    }
  };
  propTypes.resizableProps = resizableProps;

  Resizable$1.__esModule = true;
  Resizable$1.default = void 0;
  var React$1 = _interopRequireWildcard$1(React__default["default"]);
  var _reactDraggable = cjs.exports;
  var _utils = utils;
  var _propTypes$1 = propTypes;
  var _excluded$1 = ["children", "className", "draggableOpts", "width", "height", "handle", "handleSize", "lockAspectRatio", "axis", "minConstraints", "maxConstraints", "onResize", "onResizeStop", "onResizeStart", "resizeHandles", "transformScale"];
  function _getRequireWildcardCache$1(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1 = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
  function _interopRequireWildcard$1(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
  function _extends$1() { _extends$1 = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1.apply(this, arguments); }
  function _objectWithoutPropertiesLoose$1(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
  function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty$1(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _defineProperty$1(obj, key, value) { key = _toPropertyKey$1(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey$1(arg) { var key = _toPrimitive$1(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive$1(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _inheritsLoose$1(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf$1(subClass, superClass); }
  function _setPrototypeOf$1(o, p) { _setPrototypeOf$1 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$1(o, p); }
  // The base <Resizable> component.
  // This component does not have state and relies on the parent to set its props based on callback data.
  var Resizable = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose$1(Resizable, _React$Component);
    function Resizable() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.handleRefs = {};
      _this.lastHandleRect = null;
      _this.slack = null;
      return _this;
    }
    var _proto = Resizable.prototype;
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.resetData();
    };
    _proto.resetData = function resetData() {
      this.lastHandleRect = this.slack = null;
    }

    // Clamp width and height within provided constraints
    ;
    _proto.runConstraints = function runConstraints(width, height) {
      var _this$props = this.props,
        minConstraints = _this$props.minConstraints,
        maxConstraints = _this$props.maxConstraints,
        lockAspectRatio = _this$props.lockAspectRatio;
      // short circuit
      if (!minConstraints && !maxConstraints && !lockAspectRatio) return [width, height];

      // If constraining to min and max, we need to also fit width and height to aspect ratio.
      if (lockAspectRatio) {
        var ratio = this.props.width / this.props.height;
        var deltaW = width - this.props.width;
        var deltaH = height - this.props.height;

        // Find which coordinate was greater and should push the other toward it.
        // E.g.:
        // ratio = 1, deltaW = 10, deltaH = 5, deltaH should become 10.
        // ratio = 2, deltaW = 10, deltaH = 6, deltaW should become 12.
        if (Math.abs(deltaW) > Math.abs(deltaH * ratio)) {
          height = width / ratio;
        } else {
          width = height * ratio;
        }
      }
      var oldW = width,
        oldH = height;

      // Add slack to the values used to calculate bound position. This will ensure that if
      // we start removing slack, the element won't react to it right away until it's been
      // completely removed.
      var _ref = this.slack || [0, 0],
        slackW = _ref[0],
        slackH = _ref[1];
      width += slackW;
      height += slackH;
      if (minConstraints) {
        width = Math.max(minConstraints[0], width);
        height = Math.max(minConstraints[1], height);
      }
      if (maxConstraints) {
        width = Math.min(maxConstraints[0], width);
        height = Math.min(maxConstraints[1], height);
      }

      // If the width or height changed, we must have introduced some slack. Record it for the next iteration.
      this.slack = [slackW + (oldW - width), slackH + (oldH - height)];
      return [width, height];
    }

    /**
     * Wrapper around drag events to provide more useful data.
     *
     * @param  {String} handlerName Handler name to wrap.
     * @return {Function}           Handler function.
     */;
    _proto.resizeHandler = function resizeHandler(handlerName, axis) {
      var _this2 = this;
      return function (e, _ref2) {
        var node = _ref2.node,
          deltaX = _ref2.deltaX,
          deltaY = _ref2.deltaY;
        // Reset data in case it was left over somehow (should not be possible)
        if (handlerName === 'onResizeStart') _this2.resetData();

        // Axis restrictions
        var canDragX = (_this2.props.axis === 'both' || _this2.props.axis === 'x') && axis !== 'n' && axis !== 's';
        var canDragY = (_this2.props.axis === 'both' || _this2.props.axis === 'y') && axis !== 'e' && axis !== 'w';
        // No dragging possible.
        if (!canDragX && !canDragY) return;

        // Decompose axis for later use
        var axisV = axis[0];
        var axisH = axis[axis.length - 1]; // intentionally not axis[1], so that this catches axis === 'w' for example

        // Track the element being dragged to account for changes in position.
        // If a handle's position is changed between callbacks, we need to factor this in to the next callback.
        // Failure to do so will cause the element to "skip" when resized upwards or leftwards.
        var handleRect = node.getBoundingClientRect();
        if (_this2.lastHandleRect != null) {
          // If the handle has repositioned on either axis since last render,
          // we need to increase our callback values by this much.
          // Only checking 'n', 'w' since resizing by 's', 'w' won't affect the overall position on page,
          if (axisH === 'w') {
            var deltaLeftSinceLast = handleRect.left - _this2.lastHandleRect.left;
            deltaX += deltaLeftSinceLast;
          }
          if (axisV === 'n') {
            var deltaTopSinceLast = handleRect.top - _this2.lastHandleRect.top;
            deltaY += deltaTopSinceLast;
          }
        }
        // Storage of last rect so we know how much it has really moved.
        _this2.lastHandleRect = handleRect;

        // Reverse delta if using top or left drag handles.
        if (axisH === 'w') deltaX = -deltaX;
        if (axisV === 'n') deltaY = -deltaY;

        // Update w/h by the deltas. Also factor in transformScale.
        var width = _this2.props.width + (canDragX ? deltaX / _this2.props.transformScale : 0);
        var height = _this2.props.height + (canDragY ? deltaY / _this2.props.transformScale : 0);

        // Run user-provided constraints.
        var _this2$runConstraints = _this2.runConstraints(width, height);
        width = _this2$runConstraints[0];
        height = _this2$runConstraints[1];
        var dimensionsChanged = width !== _this2.props.width || height !== _this2.props.height;

        // Call user-supplied callback if present.
        var cb = typeof _this2.props[handlerName] === 'function' ? _this2.props[handlerName] : null;
        // Don't call 'onResize' if dimensions haven't changed.
        var shouldSkipCb = handlerName === 'onResize' && !dimensionsChanged;
        if (cb && !shouldSkipCb) {
          e.persist == null ? void 0 : e.persist();
          cb(e, {
            node: node,
            size: {
              width: width,
              height: height
            },
            handle: axis
          });
        }

        // Reset internal data
        if (handlerName === 'onResizeStop') _this2.resetData();
      };
    }

    // Render a resize handle given an axis & DOM ref. Ref *must* be attached for
    // the underlying draggable library to work properly.
    ;
    _proto.renderResizeHandle = function renderResizeHandle(handleAxis, ref) {
      var handle = this.props.handle;
      // No handle provided, make the default
      if (!handle) {
        return /*#__PURE__*/React$1.createElement("span", {
          className: "react-resizable-handle react-resizable-handle-" + handleAxis,
          ref: ref
        });
      }
      // Handle is a function, such as:
      // `handle={(handleAxis) => <span className={...} />}`
      if (typeof handle === 'function') {
        return handle(handleAxis, ref);
      }
      // Handle is a React component (composite or DOM).
      var isDOMElement = typeof handle.type === 'string';
      var props = _objectSpread$1({
        ref: ref
      }, isDOMElement ? {} : {
        handleAxis: handleAxis
      });
      return /*#__PURE__*/React$1.cloneElement(handle, props);
    };
    _proto.render = function render() {
      var _this3 = this;
      // Pass along only props not meant for the `<Resizable>`.`
      // eslint-disable-next-line no-unused-vars
      var _this$props2 = this.props,
        children = _this$props2.children,
        className = _this$props2.className,
        draggableOpts = _this$props2.draggableOpts;
        _this$props2.width;
        _this$props2.height;
        _this$props2.handle;
        _this$props2.handleSize;
        _this$props2.lockAspectRatio;
        _this$props2.axis;
        _this$props2.minConstraints;
        _this$props2.maxConstraints;
        _this$props2.onResize;
        _this$props2.onResizeStop;
        _this$props2.onResizeStart;
        var resizeHandles = _this$props2.resizeHandles;
        _this$props2.transformScale;
        var p = _objectWithoutPropertiesLoose$1(_this$props2, _excluded$1);

      // What we're doing here is getting the child of this element, and cloning it with this element's props.
      // We are then defining its children as:
      // 1. Its original children (resizable's child's children), and
      // 2. One or more draggable handles.
      return (0, _utils.cloneElement)(children, _objectSpread$1(_objectSpread$1({}, p), {}, {
        className: (className ? className + " " : '') + "react-resizable",
        children: [].concat(children.props.children, resizeHandles.map(function (handleAxis) {
          var _this3$handleRefs$han;
          // Create a ref to the handle so that `<DraggableCore>` doesn't have to use ReactDOM.findDOMNode().
          var ref = (_this3$handleRefs$han = _this3.handleRefs[handleAxis]) != null ? _this3$handleRefs$han : _this3.handleRefs[handleAxis] = /*#__PURE__*/React$1.createRef();
          return /*#__PURE__*/React$1.createElement(_reactDraggable.DraggableCore, _extends$1({}, draggableOpts, {
            nodeRef: ref,
            key: "resizableHandle-" + handleAxis,
            onStop: _this3.resizeHandler('onResizeStop', handleAxis),
            onStart: _this3.resizeHandler('onResizeStart', handleAxis),
            onDrag: _this3.resizeHandler('onResize', handleAxis)
          }), _this3.renderResizeHandle(handleAxis, ref));
        }))
      }));
    };
    return Resizable;
  }(React$1.Component);
  Resizable$1.default = Resizable;
  Resizable.propTypes = _propTypes$1.resizableProps;
  Resizable.defaultProps = {
    axis: 'both',
    handleSize: [20, 20],
    lockAspectRatio: false,
    minConstraints: [20, 20],
    maxConstraints: [Infinity, Infinity],
    resizeHandles: ['se'],
    transformScale: 1
  };

  var ResizableBox$3 = {};

  ResizableBox$3.__esModule = true;
  ResizableBox$3.default = void 0;
  var React = _interopRequireWildcard(React__default["default"]);
  var _propTypes = _interopRequireDefault(require$$1__default["default"]);
  var _Resizable = _interopRequireDefault(Resizable$1);
  var _propTypes2 = propTypes;
  var _excluded = ["handle", "handleSize", "onResize", "onResizeStart", "onResizeStop", "draggableOpts", "minConstraints", "maxConstraints", "lockAspectRatio", "axis", "width", "height", "resizeHandles", "style", "transformScale"];
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
  function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  var ResizableBox$2 = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(ResizableBox, _React$Component);
    function ResizableBox() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.state = {
        width: _this.props.width,
        height: _this.props.height,
        propsWidth: _this.props.width,
        propsHeight: _this.props.height
      };
      _this.onResize = function (e, data) {
        var size = data.size;
        if (_this.props.onResize) {
          e.persist == null ? void 0 : e.persist();
          _this.setState(size, function () {
            return _this.props.onResize && _this.props.onResize(e, data);
          });
        } else {
          _this.setState(size);
        }
      };
      return _this;
    }
    ResizableBox.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
      // If parent changes height/width, set that in our state.
      if (state.propsWidth !== props.width || state.propsHeight !== props.height) {
        return {
          width: props.width,
          height: props.height,
          propsWidth: props.width,
          propsHeight: props.height
        };
      }
      return null;
    };
    var _proto = ResizableBox.prototype;
    _proto.render = function render() {
      // Basic wrapper around a Resizable instance.
      // If you use Resizable directly, you are responsible for updating the child component
      // with a new width and height.
      var _this$props = this.props,
        handle = _this$props.handle,
        handleSize = _this$props.handleSize;
        _this$props.onResize;
        var onResizeStart = _this$props.onResizeStart,
        onResizeStop = _this$props.onResizeStop,
        draggableOpts = _this$props.draggableOpts,
        minConstraints = _this$props.minConstraints,
        maxConstraints = _this$props.maxConstraints,
        lockAspectRatio = _this$props.lockAspectRatio,
        axis = _this$props.axis;
        _this$props.width;
        _this$props.height;
        var resizeHandles = _this$props.resizeHandles,
        style = _this$props.style,
        transformScale = _this$props.transformScale,
        props = _objectWithoutPropertiesLoose(_this$props, _excluded);
      return /*#__PURE__*/React.createElement(_Resizable.default, {
        axis: axis,
        draggableOpts: draggableOpts,
        handle: handle,
        handleSize: handleSize,
        height: this.state.height,
        lockAspectRatio: lockAspectRatio,
        maxConstraints: maxConstraints,
        minConstraints: minConstraints,
        onResizeStart: onResizeStart,
        onResize: this.onResize,
        onResizeStop: onResizeStop,
        resizeHandles: resizeHandles,
        transformScale: transformScale,
        width: this.state.width
      }, /*#__PURE__*/React.createElement("div", _extends({}, props, {
        style: _objectSpread(_objectSpread({}, style), {}, {
          width: this.state.width + 'px',
          height: this.state.height + 'px'
        })
      })));
    };
    return ResizableBox;
  }(React.Component);
  ResizableBox$3.default = ResizableBox$2;
  // PropTypes are identical to <Resizable>, except that children are not strictly required to be present.
  ResizableBox$2.propTypes = _objectSpread(_objectSpread({}, _propTypes2.resizableProps), {}, {
    children: _propTypes.default.element
  });

  reactResizable.exports = function() {
    throw new Error("Don't instantiate Resizable directly! Use require('react-resizable').Resizable");
  };

  reactResizable.exports.Resizable = Resizable$1.default;
  var ResizableBox$1 = reactResizable.exports.ResizableBox = ResizableBox$3.default;

  function ResizableBox(_ref) {
    var children = _ref.children,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? 600 : _ref$width,
      _ref$height = _ref.height,
      height = _ref$height === void 0 ? 300 : _ref$height,
      _ref$resizable = _ref.resizable,
      resizable = _ref$resizable === void 0 ? true : _ref$resizable,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {} : _ref$style,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? "" : _ref$className;
    return /*#__PURE__*/React__default["default"].createElement("div", {
      style: {
        marginLeft: 20
      }
    }, /*#__PURE__*/React__default["default"].createElement("div", {
      style: _objectSpread2({
        display: "inline-block",
        width: "auto",
        background: "white",
        padding: ".5rem",
        borderRadius: "0.5rem",
        boxShadow: "0 30px 40px rgba(0,0,0,.1)"
      }, style)
    }, resizable ? /*#__PURE__*/React__default["default"].createElement(ResizableBox$1, {
      width: width,
      height: height
    }, /*#__PURE__*/React__default["default"].createElement("div", {
      style: {
        width: "100%",
        height: "100%"
      },
      className: className
    }, children)) : /*#__PURE__*/React__default["default"].createElement("div", {
      style: {
        width: "".concat(width, "px"),
        height: "".concat(height, "px")
      },
      className: className
    }, children)));
  }

  var _templateObject;
  var pageHeaderHeight = 284;
  var pageHeaderPaddingY = 74;
  var pageHeaderPaddingX = 250;
  var DashboardHeader = function DashboardHeader() {
    var _useTranslation = adminjs.useTranslation(),
      translateMessage = _useTranslation.translateMessage;
    return /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      position: "relative",
      overflow: "hidden",
      "data-css": "default-dashboard"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      position: "absolute",
      top: 50,
      left: -10,
      opacity: [0.2, 0.4, 1],
      animate: true
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Illustration, {
      variant: "Rocket"
    })), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      position: "absolute",
      top: -70,
      right: -15,
      opacity: [0.2, 0.4, 1],
      animate: true
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Illustration, {
      variant: "Moon"
    })), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      bg: "grey100",
      height: pageHeaderHeight,
      py: pageHeaderPaddingY,
      px: ['default', 'lg', pageHeaderPaddingX]
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Text, {
      textAlign: "center",
      color: "white"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.H2, null, translateMessage('welcomeOnBoard_title')))));
  };
  var Card = styled__default["default"](designSystem.Box)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: ", ";\n  color: ", ";\n  text-decoration: none;\n  border: 1px solid transparent;\n  &:hover {\n    border: 1px solid ", ";\n    box-shadow: ", ";\n  }\n"])), function (_ref2) {
    var flex = _ref2.flex;
    return flex ? 'flex' : 'block';
  }, function (_ref3) {
    var theme = _ref3.theme;
    return theme.colors.grey100;
  }, function (_ref4) {
    var theme = _ref4.theme;
    return theme.colors.primary100;
  }, function (_ref5) {
    var theme = _ref5.theme;
    return theme.shadows.cardHover;
  });
  Card.defaultProps = {
    variant: 'white',
    boxShadow: 'card'
  };
  var Dashboard = function Dashboard() {
    var _useTranslation2 = adminjs.useTranslation();
      _useTranslation2.translateMessage;
      _useTranslation2.translateButton;
    return /*#__PURE__*/React__default["default"].createElement(designSystem.Box, null, /*#__PURE__*/React__default["default"].createElement(DashboardHeader, null), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      mt: ['xl', 'xl', '-100px'],
      mb: "xl",
      mx: [0, 0, 0, 'auto'],
      px: ['default', 'lg', 'xxl', '0'],
      position: "relative",
      flex: true,
      flexDirection: "row",
      flexWrap: "wrap",
      width: [1, 1, 1, 1024]
    }, /*#__PURE__*/React__default["default"].createElement(ResizableBox, null, /*#__PURE__*/React__default["default"].createElement(LineChartComponent, null))));
  };

  AdminJS.UserComponents = {};
  AdminJS.UserComponents.Component0 = PasswordEdit;
  AdminJS.UserComponents.Component1 = ExportComponent;
  AdminJS.UserComponents.Component2 = ImportComponent;
  AdminJS.UserComponents.Dashboard = Dashboard;

})(AdminJSDesignSystem, AdminJS, React, styled, ReactDOM, PropTypes);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
